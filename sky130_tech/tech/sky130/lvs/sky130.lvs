# Copyright 2022 Mabrains
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

#===========================================================================================================================
#------------------------------------------------- SKY130 LVS RULE DECK ----------------------------------------------------
#===========================================================================================================================

require 'time'
require "logger"

exec_start_time = Time.now

logger = Logger.new(STDOUT)

logger.formatter = proc do |severity, datetime, progname, msg|
  "#{datetime}: Memory Usage (" + `pmap #{Process.pid} | tail -1`[10,40].strip + ") : #{msg}
"
end

#================================================
#----------------- FILE SETUP -------------------
#================================================

logger.info("Starting running SKY130 Klayout LVS runset on %s" % [$input])

#=== GET LAYOUT ===
if $input
  source($input)
  logger.info("Layout file: #{$input}")
else
  logger.error("No layout loaded, please add your layout file")
end

#=== GET THREADS ===
if $thr
  threads($thr)
  logger.info("Number of threads: #{$thr}")
else
  threads(16)
  logger.info("Number of threads: 16")
end

#=== GET REPORT ===
if $report
  report_lvs($report)
  logger.info("Final report: #{$report}")
else
  report_lvs(source.cell_name+".lvsdb")
  logger.info("Final report: #{source.cell_name}.lvsdb")
end

#=== GET SUBSTRATE NAME ===
if $lvs_sub
  substrate_name = $lvs_sub
  logger.info("Substrate name: #{$lvs_sub}")
else
  substrate_name = "sky130_gnd"
  logger.info("No substrate name given, default name is sky130_gnd")
end

#=== CUSTOM WRITER CLASS ===
class SubcircuitModels < RBA::NetlistSpiceWriterDelegate

  def write_device(device)
    device_class = device.device_class
    if device_class.name.include?('fet')
      str = "M" + device.expanded_name
    elsif device_class.name.include?('diode')
      str = "D" + device.expanded_name
    elsif device_class.name.include?('npn') or device_class.name.include?('pnp')
      str = "Q" + device.expanded_name
    elsif device_class.name.include?('res')
      str = "R" + device.expanded_name
    elsif device_class.name.include?('ind') or device_class.name.include?('coil')
      str = "L" + device.expanded_name
    elsif device_class.name.include?('cap')
      str = "C" + device.expanded_name
    else
      str = "#{device.id}" + device.expanded_name
    end
    device_class.terminal_definitions.each do |td|
      str += " " + net_to_string(device.net_for_terminal(td.id))
    end
    str += " " + device_class.name
    unless device_class.name.include?('vpp') || device_class.name.include?('ind')
      device_class.parameter_definitions.each do |pd|
        str += " " + pd.name + ("=%.12g" % device.parameter(pd.id))
      end
    end
    emit_line(str)
  end      

end

#=== CUSTOM WRITER ===
custom_spice_writer = RBA::NetlistSpiceWriter::new(SubcircuitModels::new)

#=== NET NAMES OPTION ===
# true: use net names instead of numbers
# false: use numbers for nets
if $spice_net_names == "false"
  custom_spice_writer.use_net_names = false
  logger.info("Extracted netlist with net names: #{$spice_net_names}")
else
  custom_spice_writer.use_net_names = true
  logger.info("Extracted netlist with net names: true")
end

#=== COMMENTS OPTION ===
# true: put in comments with details
# false: no comments
if $spice_comments == "true"
  custom_spice_writer.with_comments = true
  logger.info("Extracted netlist with comments in details: #{$spice_comments}")
else
  custom_spice_writer.with_comments = false
  logger.info("Extracted netlist with comments in details: false")
end

if $target_netlist
  target_netlist($target_netlist, custom_spice_writer, "Extracted by KLayout with SKY130 LVS runset on : #{Time.now.strftime("%d/%m/%Y %H:%M")}")
  logger.info("Extracted netlist file: #{$target_netlist}")
else
  target_netlist(File.join(File.dirname(RBA::CellView::active.filename), source.cell_name+"_extracted.cir"), custom_spice_writer,  "Extracted by KLayout with SKY130 LVS runset on : #{Time.now.strftime("%d/%m/%Y %H:%M")}")
  logger.info("Extracted netlist file: #{source.cell_name}_extracted.cir")
end

#=== EXTRACTION SCALE ===
if $scale  == "true"
  device_scaling(1000000)
  logger.info("device_scaling: true")
else
  logger.info("device_scaling: false")
end

#=== PRINT DETAILS ===
if $verbose == "true"
  verbose(true)
  logger.info("Verbose mode: #{$verbose}")
else
  verbose(false)
  logger.info("Verbose mode: false")
end

# === TILING MODE ===
if $run_mode == "tiling"
  # use a tile size of 1mm - not used in deep mode-
  # tiles(500.um)
  # use a tile border of 10 micron:
  # tile_borders(10.um)
  tiles(1000)
  logger.info("Tiling  mode is enabled.")

elsif $run_mode == "deep"
  #=== HIER MODE ===
  deep
  logger.info("deep mode is enabled.")

elsif $run_mode == "flat"
  #=== FLAT MODE ===
  flat
  logger.info("flat  mode is enabled.")

else
  #=== DEFAULT MODE ===
  deep
  logger.info("deep  mode is enabled.")

end # run_mode


#================================================
# --------------- CUSTOM CLASSES ----------------
#================================================

#====================== CUSTOM READER =========================
class SubcircuitModelsReader < RBA::NetlistSpiceReaderDelegate

  def parse_element(s, element)
    if element == "C"
      super(s + " C=2e-16", element)
    elsif element == "R"
      super(s + " R=0", element)
    elsif element == "L"
      super(s + " L=0", element)
    else
      super
    end
  end

  # take and translate the element
  def element(circuit, el, name, model, value, nets, params)

    if el == "C" && model.include?('SKY130') && model.include?('VPP')

      # provide a device class
      if !(model.include?('FLOATM3') || ["M3","M4","M5"].any?{|substr| model.split("_")[7].include?(substr)})
        cls = RBA::DeviceClassMOS3Transistor::new
        cls.name = model
        circuit.netlist.add(cls)

        # create a device
        device = circuit.create_device(cls, name)

        # and configure the device
        [ "S", "G", "D" ].each_with_index do |t,index|
          device.connect_terminal(t, nets[index])
        end
      end
      
      if model.include?('FLOATM3') || ["M3","M4","M5"].any?{|substr| model.split("_")[7].include?(substr)}
        cls = RBA::DeviceClassMOS4Transistor::new
        cls.name = model
        circuit.netlist.add(cls)

        # create a device
        device = circuit.create_device(cls, name)

        # and configure the device
        [ "S", "G", "D", "B" ].each_with_index do |t,index|
          device.connect_terminal(t, nets[index])
        end
      end

    elsif el == "L" && model.include?('SKY130') && (model.include?('IND') || model.include?('COIL'))

      cls = RBA::DeviceClassMOS4Transistor::new
      cls.name = model
      circuit.netlist.add(cls)

      # create a device
      device = circuit.create_device(cls, name)

      # and configure the device
      [ "S", "G", "D", "B" ].each_with_index do |t,index|
        device.connect_terminal(t, nets[index])
      end

    else
      # all other elements are left to the standard implementation
      return super
    end

    return true

  end

end

# Instantiate a reader using the new delegate
reader = RBA::NetlistSpiceReader::new(SubcircuitModelsReader::new)

#=== GET NETLIST ===
if $schematic
  schematic($schematic, reader)
  logger.info("Netlist file: #{$schematic}")
else
  begin  
    schematic("#{source.cell_name}.cdl", reader)
    logger.info("Netlist file: #{source.cell_name}.cdl")
  rescue 
    puts "No schematic loaded , please add your netlist file"
    logger.error("No schematic loaded , please add your netlist file")
  end 
end

class BResistor < RBA::DeviceClassResistorWithBulk
  def initialize
    super
    enable_parameter("R", false)
    enable_parameter("W", true)
    enable_parameter("L", true)
  end
end

class NResistor < RBA::DeviceClassResistor
  def initialize
    super
    enable_parameter("R", false)
    enable_parameter("W", true)
    enable_parameter("L", true)
  end
end

class MIMCap < RBA::DeviceClassCapacitor
  def initialize
    super
    enable_parameter("C", false)
    enable_parameter("A", true)
    enable_parameter("P", true)
  end
end

class VarCap < RBA::DeviceClassCapacitorWithBulk
  def initialize
    super
    enable_parameter("C", false)
    enable_parameter("A", true)
    enable_parameter("P", true)
  end
end

class Diode < RBA::DeviceClassDiode
  def initialize
    super
    enable_parameter("A", true)
    enable_parameter("P", true)
  end
end

#====================== CUSTOM FOUR TERMINAL EXTRACTOR =========================
class Custom4TerminalExtractor < RBA::GenericDeviceExtractor

  def initialize(name)
    self.name = name
  end

  def setup

    define_layer("C1", "Conductor1")
    define_layer("C2", "Conductor2")
    define_layer("M", "Marker")
    define_layer("B", "Bulk")

    register_device_class(RBA::DeviceClassMOS4Transistor::new)

  end

  def extract_devices(layer_geometry)

    # layer_geometry provides the input layers in the order they are 
    # defined with "define_layer"
    # conductor is supposed to be "conductor outside marker"
    conductor1 = layer_geometry[0]
    conductor2 = layer_geometry[1]
    marker     = layer_geometry[2]
    bulk       = layer_geometry[3]

    marker_merged = marker.merged
    bulk_merged   = bulk.merged

    # this will be the edge where the marker turns into conductor
    marker_edges  = (conductor1.merged.edges & marker_merged.edges)
    marker_edges2 = (conductor2.merged.edges & marker_merged.edges)

    marker_merged.each do |r|

      # identify the edges where this marker shape ends
      interface_edges = marker_edges.interacting(RBA::Region::new(r))

      # form terminal shapes from these edges
      terminals  = interface_edges.extended_out(1).merged
      terminals2 = marker_edges2.extended_out(1).merged
      
      if (terminals.size > 1) and (terminals2.size > 0)

        device = create_device
        define_terminal(device, RBA::DeviceClassMOS4Transistor::TERMINAL_S, 0,   terminals[0]);
        define_terminal(device, RBA::DeviceClassMOS4Transistor::TERMINAL_G, 0,   terminals[1]);
        define_terminal(device, RBA::DeviceClassMOS4Transistor::TERMINAL_D, 1,  terminals2[0]);
        define_terminal(device, RBA::DeviceClassMOS4Transistor::TERMINAL_B, 3, bulk_merged[0]);

      end
      
    end

  end

  def get_connectivity(layout, layers)
  
    # marker is used for extraction
    # conductor is used for producing the terminals
    conductor1 = layers[0]
    conductor2 = layers[1]
    marker     = layers[2]
    bulk       = layers[3]
    conn = RBA::Connectivity::new
    conn.connect(marker    , marker)
    conn.connect(conductor1, marker)
    conn.connect(conductor2, marker)
    conn.connect(bulk      , marker)

    return conn

  end

end


#====================== CUSTOM THREE TERMINAL EXTRACTOR =========================
class Custom3TerminalExtractor < RBA::GenericDeviceExtractor

  def initialize(name)
    self.name = name
  end

  def setup

    define_layer("C", "Conductor")
    define_layer("M", "Marker")
    define_layer("B", "Bulk")

    register_device_class(RBA::DeviceClassMOS3Transistor::new)

  end

  def extract_devices(layer_geometry)

    # layer_geometry provides the input layers in the order they are 
    # defined with "define_layer"
    # conductor is supposed to be "conductor outside marker"
    conductor  = layer_geometry[0]
    marker     = layer_geometry[1]
    bulk       = layer_geometry[2]

    marker_merged = marker.merged
    bulk_merged   = bulk.merged

    # this will be the edge where the marker turns into conductor
    marker_edges  = (conductor.merged.edges & marker_merged.edges)

    marker_merged.each do |r|

      # identify the edges where this marker shape ends
      interface_edges = marker_edges.interacting(RBA::Region::new(r))

      # form terminal shapes from these edges
      terminals  = interface_edges.extended_out(1).merged
      
      if terminals.size > 1

        device = create_device
        define_terminal(device, RBA::DeviceClassMOS3Transistor::TERMINAL_S, 0,   terminals[0]);
        define_terminal(device, RBA::DeviceClassMOS3Transistor::TERMINAL_G, 0,   terminals[1]);
        define_terminal(device, RBA::DeviceClassMOS3Transistor::TERMINAL_D, 2, bulk_merged[0]);

      end
      
    end

  end

  def get_connectivity(layout, layers)
  
    # marker is used for extraction
    # conductor is used for producing the terminals
    conductor  = layers[0]
    marker     = layers[1]
    bulk       = layers[2]
    conn = RBA::Connectivity::new
    conn.connect(marker   , marker)
    conn.connect(conductor, marker)
    conn.connect(bulk     , marker)

    return conn

  end

end


#================================================
#------------- LAYERS DERIVATIONS ---------------
#================================================

logger.info("Read in polygons from layers.")

#=== INPUTS ===
diff        = input(65 , 20 )
poly        = input(66 , 20 )
li          = input(67 , 20 )
met1        = input(68 , 20 )
met2        = input(69 , 20 )
met3        = input(70 , 20 )
met4        = input(71 , 20 )
met5        = input(72 , 20 )
pad         = input(76 , 20 )

#=== DRAWINGS ===
bound       = polygons(235, 4  )
sub_pin     = polygons(64 , 59 )
dnwell      = polygons(64 , 18 )
pwell_pin   = polygons(122, 16 )
pwell_res   = polygons(64 , 13 )
pwbm        = polygons(19 , 44 )
pwde        = polygons(124, 20 )
nwell       = polygons(64 , 20 )
nwell_pin   = polygons(64 , 16 )
tap         = polygons(65 , 44 )
psdm        = polygons(94 , 20 )
nsdm        = polygons(93 , 44 )
lvtn        = polygons(125, 44 )
hvtr        = polygons(18 , 20 )
hvtp        = polygons(78 , 44 )
tunm        = polygons(80 , 20 )
sonos       = polygons(80 , 20 )
coreid      = polygons(81 , 2  )
stdcell     = polygons(81 , 4  )
npnid       = polygons(82 , 20 )
pnpid       = polygons(82 , 44 )
rpm         = polygons(86 , 20 )
urpm        = polygons(79 , 20 )
ldntm       = polygons(11 , 44 )
hvntm       = polygons(125, 20 )
poly_pin    = polygons(66 , 16 )
poly_res    = polygons(66 , 13 )
poly_cut    = polygons(66 , 14 )
poly_short  = polygons(66 , 15 )
hvi         = polygons(75 , 20 )
licon       = polygons(66 , 44 )
npc         = polygons(95 , 20 )
diff_res    = polygons(65 , 13 )
diff_cut    = polygons(65 , 14 )
diode       = polygons(81 , 23 )
li_pin      = polygons(67 , 16 )
li_res      = polygons(67 , 13 )
li_cut      = polygons(67 , 14 )
mcon        = polygons(67 , 44 )
met1_pin    = polygons(68 , 16 )
met1_res    = polygons(68 , 13 )
met1_cut    = polygons(68 , 14 )
via1        = polygons(68 , 44 )
met2_pin    = polygons(69 , 16 )
met2_res    = polygons(69 , 13 )
met2_cut    = polygons(69 , 14 )
met2_fuse   = polygons(69 , 17 )
via2        = polygons(69 , 44 )
met3_pin    = polygons(70 , 16 )
met3_res    = polygons(70 , 13 )
met3_cut    = polygons(70 , 14 )
met3_fuse   = polygons(70 , 17 )
via3        = polygons(70 , 44 )
met4_pin    = polygons(71 , 16 )
met4_res    = polygons(71 , 13 )
met4_cut    = polygons(71 , 14 )
met4_fuse   = polygons(71 , 17 )
via4        = polygons(71 , 44 )
met5_pin    = polygons(72 , 16 )
met5_res    = polygons(72 , 13 )
met5_cut    = polygons(72 , 14 )
rdl         = polygons(74 , 20 )
rdl_pin     = polygons(74 , 16 )
glass       = polygons(76 , 20 )
capm        = polygons(89 , 44 )
capm2       = polygons(97 , 44 )
lowtapd     = polygons(81 , 14 )
fillobsm1   = polygons(62 , 24 )
fillobsm2   = polygons(105, 52 )
fillobsm3   = polygons(107, 24 )
fillobsm4   = polygons(112, 4  )
ncm         = polygons(92 , 44 )
natfet      = polygons(124, 21 )
nsm         = polygons(61 , 20 )
vhvi        = polygons(74 , 21 )
uhvi        = polygons(74 , 22 )
npn         = polygons(82 , 20 )
inductor    = polygons(82 , 24 )
vpp         = polygons(82 , 64 )
pnp         = polygons(82 , 44 )
lvs_prune   = polygons(84 , 44 )
padcenter   = polygons(81 , 20 )
mf          = polygons(76 , 44 )
areaid_sl   = polygons(81 , 1  )
areaid_ce   = polygons(81 , 2  )
areaid_fe   = polygons(81 , 3  )
areaid_sc   = polygons(81 , 4  )
areaid_sf   = polygons(81 , 6  )
areaid_sw   = polygons(81 , 7  )
areaid_sr   = polygons(81 , 8  )
areaid_mt   = polygons(81 , 10 )
areaid_dt   = polygons(81 , 11 )
areaid_ft   = polygons(81 , 12 )
areaid_ww   = polygons(81 , 13 )
areaid_ld   = polygons(81 , 14 )
areaid_ns   = polygons(81 , 15 )
areaid_ij   = polygons(81 , 17 )
areaid_zr   = polygons(81 , 18 )
areaid_ed   = polygons(81 , 19 )
areaid_de   = polygons(81 , 23 )
areaid_rd   = polygons(81 , 24 )
areaid_dn   = polygons(81 , 50 )
areaid_cr   = polygons(81 , 51 )
areaid_cd   = polygons(81 , 52 )
areaid_st   = polygons(81 , 53 )
areaid_op   = polygons(81 , 54 )
areaid_en   = polygons(81 , 57 )
areaid_en20 = polygons(81 , 58 )
areaid_le   = polygons(81 , 60 )
areaid_hl   = polygons(81 , 63 )
areaid_sd   = polygons(81 , 70 )
areaid_po   = polygons(81 , 81 )
areaid_it   = polygons(81 , 84 )
areaid_et   = polygons(81 , 101)
areaid_lvt  = polygons(81 , 108)
areaid_re   = polygons(81 , 125)
areaid_ag   = polygons(81 , 79 )
cfom        = polygons(22 , 20 )


logger.info("Read in labels from layers.")

#=== LABELS ===
sub_label       = labels(122, 5)
pwelliso_label  = labels(44 , 5)
nwell_label     = labels(64 , 5)
pwell_label     = labels(64 ,59)
tap_label       = labels(65 , 5)
diff_label      = labels(65 , 6)
poly_label      = labels(66 , 5)
poly_model      = labels(66 ,83)
li_label        = labels(67 , 5)
met1_label      = labels(68 , 5)
met2_label      = labels(69 , 5)
met3_label      = labels(70 , 5)
met4_label      = labels(71 , 5)
met5_label      = labels(72 , 5)
rdl_label       = labels(74 , 5)
pad_label       = labels(76 , 5)
txt_label       = labels(83 ,44)

#=== BULK LAYER ===
sub = polygon_layer

#================================================
#------------------ SWITCHES --------------------
#================================================

logger.info("Evaluate switches start.")

# SONOS
if $sonos
  SONOS = $sonos
else
  SONOS = "star"
end # SONOS

# FUSE
if $fuse
  FUSE = $fuse
else
  FUSE = "m4"
end # FUSE

# SCH_SIMPLE
if $schematic_simplify
  SCH_SIMPLE = $schematic_simplify
else
  SCH_SIMPLE = false
end # SCH_SIMPLE

logger.info("SCH_SIMPLE enabled  %s" % [SCH_SIMPLE])

# NET_ONLY
if $net_only
  NET_ONLY = true
else
  NET_ONLY = false
end # NET_ONLY

logger.info("NET_ONLY enabled  %s" % [NET_ONLY])

# TOP_LVL_PINS
if $top_lvl_pins
  TOP_LVL_PINS = true
else
  TOP_LVL_PINS = false
end # TOP_LVL_PINS

logger.info("TOP_LVL_PINS enabled  %s" % [TOP_LVL_PINS])

# COMBINE
if $combine
  COMBINE = true
else
  COMBINE = false
end # COMBINE

logger.info("COMBINE enabled  %s" % [COMBINE])

# PURGE
if $purge
  PURGE = true
else
  PURGE = false
end # PURGE

logger.info("PURGE enabled  %s" % [PURGE])

# PURGE_NETS
if $purge_nets
  PURGE_NETS = true
else
  PURGE_NETS = false
end # PURGE_NETS

logger.info("PURGE_NETS enabled  %s" % [PURGE_NETS])

# SIMPLIFY
if $net_only || $top_lvl_pins || $combine || $purge || $purge_nets
  SIMPLIFY = false
else
  SIMPLIFY = true
end # SIMPLIFY

logger.info("SIMPLIFY enabled  %s" % [SIMPLIFY])

logger.info("Evaluate switches end.")

#================================================================
#------------------------- MAIN RUNSET --------------------------
#================================================================

logger.info("SKY130 LVS rules started")

#================================================
#------------- LAYERS DERIVATIONS ---------------
#================================================

logger.info("Starting deriving base layers.")

#==================================
# ------ GENERAL DERIVATIONS ------
#==================================

ncomp         = diff.and(nsdm)
pcomp         = diff.and(psdm)
tgate         = poly.and(diff).not(poly_res)

ngate         = nsdm.and(tgate)
nsd           = ncomp.outside(nwell).interacting(ngate).not(ngate).not(diff_res)
ptap          = tap.and(psdm).outside(nwell).outside(dnwell).not(diff_res)

pgate         = psdm.and(tgate)
psd           = pcomp.inside(nwell).interacting(pgate).not(pgate).not(diff_res)
ntap          = tap.and(nsdm).inside(nwell).not(diff_res)

poly_con      = poly.not(poly_res).not(vpp)
li_con        =   li.not( li_res ).not(vpp)
met1_con      = met1.not(met1_res).not(vpp)
met2_con      = met2.not(met2_res).not(inductor).not(met2_fuse).not(vpp)
met3_con      = met3.not(met3_res).not(inductor).not(met3_fuse).not(vpp)
met4_con      = met4.not(met4_res).not(met4_fuse).not(vpp)
met5_con      = met5.not(met5_res).not(vpp)

#==================================
# ------ MOSFET DERIVATIONS -------
#==================================

logger.info("Starting MOSFET DERIVATIONS")

# ==============
# ---- PMOS ----
# ==============

logger.info("Starting PMOS layers DERIVATIONS")

# 1.8V PMOS transistor standard
pgate_1p8v = pgate.not(hvtp).not(ncm).not(hvi).not(lvtn).and(nwell).not(dnwell).not_interacting(poly_model)

# 1.8V PMOS transistor low threshold voltage
pgate_1p8v_lvt = pgate.not(hvtp).not(ncm).not(hvi).and(lvtn).and(nwell).not(dnwell).not_interacting(poly_model)

# 1.8V PMOS transistor high threshold voltage
pgate_1p8v_hvt = pgate.and(hvtp).not(ncm).not(hvi).not(lvtn).and(nwell).not(dnwell).not(areaid_ce)

# 5V gate 10.5V drain PMOS transistor
pgate_5p0v_hv = pgate.not(hvtp).not(ncm).and(hvi).not(lvtn).and(nwell).not(dnwell).not_interacting(areaid_ed)

# 5V gate 16V drain PMOS transistor
pgate_5p0v_vhv = pgate.not(hvtp).not(ncm).and(hvi).not_interacting(lvtn).and(nwell).and(dnwell).and(areaid_en)
pd_5p0v_vhv    = tap.and(psdm).not(hvtp).not(ncm).and(hvi).not(lvtn).not(nwell).and(dnwell).and(areaid_en)
ps_5p0v_vhv    = pcomp.not(hvtp).not(ncm).and(hvi).not(lvtn).and(nwell).and(dnwell).and(areaid_en).not(poly)
psd_5p0v_vhv   = pd_5p0v_vhv.or(pcomp.interacting(ps_5p0v_vhv)).sized(0.6.um).sized(-0.6.um).extents.not(pgate_5p0v_vhv).and(areaid_en)

# 5V gate 20V drain PMOS transistor
pgate_5p0v_uhv = pgate.not(hvtp).not(ncm).and(hvi).not(lvtn).and(nwell).and(dnwell).interacting(lvtn).and(areaid_en20)
pd_5p0v_uhv    = tap.and(psdm).not(hvtp).not(ncm).and(hvi).and(lvtn).not(nwell).and(dnwell).and(areaid_en20)
ps_5p0v_uhv    = pcomp.not(hvtp).not(ncm).and(hvi).not(lvtn).and(nwell).and(dnwell).and(areaid_en20).not(poly)
psd_5p0v_uhv   = tap.and(psdm).sized(0.75.um).sized(-0.75.um).extents.interacting(pd_5p0v_uhv).or(ps_5p0v_uhv).not(pgate_5p0v_uhv).and(areaid_en20)

# Pass PMOS transistor
pgate_pass = pgate.and(hvtp).and(ncm).not(hvi).not(lvtn).and(nwell).not(dnwell).and(areaid_ce)

# Pass PMOS transistor low leakage
pgate_pass_ll = pgate.and(hvtp).not(ncm).not(hvi).not(lvtn).and(nwell).not(dnwell).and(areaid_ce)

# ==============
# ---- NMOS ----
# ==============

logger.info("Starting NMOS layers DERIVATIONS")

# 1.8V NMOS transistor standard
ngate_1p8v = ngate.not(hvtp).not(ncm).not(hvi).not(lvtn).not(nwell).not(dnwell).not_interacting(areaid_ed).not_interacting(areaid_ce).not_interacting(poly_model)

# 1.8V NMOS transistor low threshold voltage
ngate_1p8v_lvt = ngate.not(hvtp).not(ncm).not(hvi).and(lvtn).not(nwell).not(dnwell).not_interacting(areaid_ce).not_interacting(poly_model)

# 5V gate 10.5V drain NMOS transistor
ngate_5p0v_hv = ngate.not(hvtp).not(ncm).and(hvi).not(lvtn).not(nwell).not(dnwell).not(ldntm).not_interacting(areaid_ce).not_interacting(areaid_ed).not_interacting(poly_model).not_interacting(areaid_en)

# 5V gate 16V drain NMOS transistor
ngate_5p0v_vhv = ngate.not(hvtp).not(ncm).and(hvi).not_interacting(lvtn).not(nwell).not(dnwell).and(areaid_en)
nd_5p0v_vhv    = ntap.not(hvtp).not(ncm).and(hvi).not(lvtn).and(nwell).not(dnwell).and(areaid_en)
ns_5p0v_vhv    = ncomp.not(hvtp).not(ncm).and(hvi).not(lvtn).not(nwell).not(dnwell).and(areaid_en).not(poly)
nsd_5p0v_vhv   = nd_5p0v_vhv.or(ncomp.interacting(ns_5p0v_vhv)).sized(0.8.um).sized(-0.8.um).extents.not(ngate_5p0v_vhv).and(areaid_en)

# 5V gate 20V drain NMOS transistor
ngate_5p0v_uhv = ngate.not(hvtp).not(ncm).and(hvi).interacting(lvtn).not(nwell).and(dnwell).and(areaid_en20)
nd_5p0v_uhv    = ntap.not(hvtp).not(ncm).and(hvi).and(lvtn).and(nwell).and(areaid_en20)
ns_5p0v_uhv    = ncomp.not(hvtp).not(ncm).and(hvi).not(lvtn).not(nwell).and(areaid_en20).not(poly)
nsd_5p0v_uhv   = nd_5p0v_uhv.or(ncomp.interacting(ns_5p0v_uhv)).sized(1.um).sized(-1.um).extents.not(ngate_5p0v_uhv).and(dnwell.covering(nd_5p0v_uhv).not_interacting(ns_5p0v_uhv)).and(areaid_en20)

# 5V gate 20V drain NMOS transistor isolated
ngate_5p0v_uhv_iso = ngate.not(hvtp).not(ncm).and(hvi).interacting(lvtn).not(nwell).and(dnwell).and(areaid_en20)
nd_5p0v_uhv_iso    = ntap.not(hvtp).not(ncm).and(hvi).and(lvtn).and(nwell).and(dnwell).and(areaid_en20)
ns_5p0v_uhv_iso    = ncomp.not(hvtp).not(ncm).and(hvi).not(lvtn).not(nwell).and(dnwell).and(areaid_en20).not(poly)
nsd_5p0v_uhv_iso   = nd_5p0v_uhv_iso.or(ncomp.interacting(ns_5p0v_uhv_iso)).sized(1.um).sized(-1.um).extents.not(ngate_5p0v_uhv_iso).and(dnwell.covering(nd_5p0v_uhv_iso.or(ns_5p0v_uhv_iso))).and(areaid_en20)

# 5V gate 20V drain NMOS transistor native voltage
ngate_5p0v_uhv_nvt = ngate.not(hvtp).not(ncm).and(hvi).and(lvtn).not(nwell).and(dnwell).and(areaid_en20)
nd_5p0v_uhv_nvt    = ntap.not(hvtp).not(ncm).and(hvi).and(lvtn).and(nwell).and(areaid_en20)
ns_5p0v_uhv_nvt    = ncomp.not(hvtp).not(ncm).and(hvi).and(lvtn).not(nwell).and(areaid_en20).not(poly)
nsd_5p0v_uhv_nvt   = nd_5p0v_uhv_nvt.or(ncomp.interacting(ns_5p0v_uhv_nvt)).sized(1.um).sized(-1.um).extents.not(ngate_5p0v_uhv_nvt).and(dnwell.covering(nd_5p0v_uhv_nvt).not_interacting(ns_5p0v_uhv_nvt)).and(areaid_en20)

# 5V gate 20V drain NMOS transistor native voltage isolated
ngate_5p0v_uhv_nvt_iso = ngate.not(hvtp).not(ncm).and(hvi).and(lvtn).not(nwell).and(dnwell).and(areaid_en20)
nd_5p0v_uhv_nvt_iso    = ntap.not(hvtp).not(ncm).and(hvi).and(lvtn).and(nwell).and(dnwell).and(areaid_en20)
ns_5p0v_uhv_nvt_iso    = ncomp.not(hvtp).not(ncm).and(hvi).and(lvtn).not(nwell).and(dnwell).and(areaid_en20).not(poly)
nsd_5p0v_uhv_nvt_iso   = nd_5p0v_uhv_nvt.or(ncomp.interacting(ns_5p0v_uhv_nvt)).sized(1.um).sized(-1.um).extents.not(ngate_5p0v_uhv_nvt).and(areaid_en20)

# 5V gate 20V drain NMOS transistor zero threshold voltage
ngate_5p0v_uhv_zvt = ngate.not(hvtp).not(ncm).and(hvi).interacting(lvtn).not(nwell).and(dnwell).and(areaid_en20)
nd_5p0v_uhv_zvt    = ntap.not(hvtp).not(ncm).and(hvi).and(lvtn).and(nwell).and(dnwell).and(areaid_en20)
ns_5p0v_uhv_zvt    = ncomp.not(hvtp).not(ncm).and(hvi).not(lvtn).not(nwell).and(dnwell).and(areaid_en20).not(poly)
nsd_5p0v_uhv_zvt   = nd_5p0v_uhv_zvt.or(ncomp.interacting(ns_5p0v_uhv_zvt)).sized(1.um).sized(-1.um).extents.not(ngate_5p0v_uhv_zvt).interacting(met1.extents.covering(ngate_5p0v_uhv_zvt).covering(nd_5p0v_uhv_zvt).covering(ns_5p0v_uhv_zvt).not_covering(tap.and(psdm))).and(areaid_en20)

# Pass NMOS transistor
ngate_pass = ngate.not(hvtp).not(ncm).not(hvi).not(lvtn).not(nwell).not(dnwell).not(ldntm).and(areaid_ce).interacting(poly_model.texts("sky130_fd_pr__special_nfet_pass"))

# Pass NMOS transistor low threshold voltage
ngate_pass_lvt = ngate.not(hvtp).not(ncm).not(hvi).and(lvtn).not(nwell).not(dnwell).not(ldntm).and(areaid_ce).interacting(poly_model.texts("sky130_fd_pr__special_nfet_pass_lvt"))

# Pass NMOS transistor low leakage
ngate_pass_ll = ngate.not(hvtp).and(ncm).not(hvi).not(lvtn).not(nwell).not(dnwell).and(ldntm).and(areaid_ce).interacting(poly_model.texts("sky130_fd_pr__special_nfet_pass_lowleakage"))

# Latch NMOS transistor
ngate_latch = ngate.not(hvtp).not(ncm).not(hvi).not(lvtn).not(nwell).not(dnwell).not(ldntm).and(areaid_ce).interacting(poly_model.texts("sky130_fd_pr__special_nfet_latch"))

# Latch NMOS transistor low leakage
ngate_latch_ll = ngate.not(hvtp).and(ncm).not(hvi).not(lvtn).not(nwell).not(dnwell).and(ldntm).and(areaid_ce).interacting(poly_model.texts("sky130_fd_pr__special_nfet_latch_lowleakage"))

# Flash pass NMOS transistor
ngate_flash_pass = ngate.not(hvtp).not(ncm).and(hvi).not(lvtn).not(nwell).not(dnwell).and(ldntm).and(areaid_ce).interacting(poly_model.texts("sky130_fd_pr__special_nfet_pass_flash"))

# Flash pass NMOS transistor low leakage
ngate_flash_pass_ll = ngate.not(hvtp).not(ncm).and(hvi).not(lvtn).not(nwell).not(dnwell).and(ldntm).and(areaid_ce).interacting(poly_model.texts("sky130_fd_pr__special_nfet_pass_flash_lowleakage"))

# 3.3V NMOS transistor native voltage
ngate_3p0v_nvt = ngate.not(hvtp).not(ncm).and(hvi).and(lvtn).not(nwell).not(dnwell).and(areaid_le)

# 5V NMOS transistor native voltage
ngate_5p0v_nvt = ngate.not(hvtp).not(ncm).and(hvi).and(lvtn).not(nwell).not(dnwell).not(areaid_le).not_interacting(areaid_ed).not_interacting(vpp)


#================================
# ---- MOS ESD DERIVATIONS ------
#================================

logger.info("Starting MOS SAB DERIVATIONS")

# ==============
# ---- PMOS ----
# ==============

logger.info("Starting PMOS SAB DERIVATIONS")

# 5V gate 10.5V drain ESD PMOS transistor
pgate_5p0v_hv_esd = pgate.not(hvtp).not(ncm).and(hvi).not(lvtn).and(nwell).not(dnwell).and(areaid_ed)

# ==============
# ---- NMOS ----
# ==============

logger.info("Starting NMOS SAB DERIVATIONS")

# 1.8V ESD NMOS transistor standard
ngate_1p8v_esd = ngate.not(hvtp).not(ncm).not(hvi).not(lvtn).not(nwell).not(dnwell).and(areaid_ed)

# 5V gate 10.5V drain ESD NMOS transistor
ngate_5p0v_hv_esd = ngate.not(hvtp).not(ncm).and(hvi).not(lvtn).not(nwell).not(dnwell).not(ldntm).not_interacting(areaid_ce).and(areaid_ed)

# 5V gate 10.5V drain ESD NMOS transistor native voltage
ngate_5p0v_hv_esd_nvt = ngate.not(hvtp).not(ncm).and(hvi).and(lvtn).not(nwell).not(dnwell).not(ldntm).not_interacting(areaid_ce).and(areaid_ed)

# 5V NMOS transistor native voltage
ngate_5p0v_nvt_esd = ngate.not(hvtp).not(ncm).and(hvi).and(lvtn).not(nwell).not(dnwell).not(areaid_le).and(areaid_ed)


#================================
# ------ BJT DERIVATIONS --------
#================================

logger.info("Starting BJT DERIVATIONS")

#==============
# ---- npn ----
#==============

logger.info("Starting NPN layers DERIVATIONS")

# NPN general nodes DERIVATIONS
npn_e = ncomp.inside(dnwell).interacting(npnid)
npn_b = tap.inside(psdm).inside(dnwell).interacting(npnid)
npn_c = ntap.inside(dnwell).interacting(npnid)

# 5V NPN with emitter size of 1umx1um nodes DERIVATIONS
npn_5v0_1x1_e = npn_e.with_area(0.81.um, 1.21.um).interacting(npn_e.edges.with_length(0.9.um, 1.1.um)).not_interacting(poly)
npn_5v0_1x1_b = npn_b.interacting(npn_b.extents.interacting(npn_5v0_1x1_e))
npn_5v0_1x1_c = npn_c.interacting(npn_c.extents.interacting(npn_5v0_1x1_e))  

# 5V NPN with emitter size of 1umx2um DERIVATIONS
npn_5v0_1x2_e = npn_e.with_area(1.71.um, 2.31.um).interacting(npn_e.edges.with_length(1.9.um, 2.1.um)).not_interacting(poly)
npn_5v0_1x2_b = npn_b.interacting(npn_b.extents.interacting(npn_5v0_1x2_e))
npn_5v0_1x2_c = npn_c.interacting(npn_c.extents.interacting(npn_5v0_1x2_e))                       

# 11V NPN poly-gated with octagonal emitter nodes DERIVATIONS
npn_11v0_1x1_e = npn_e.interacting(poly)
npn_11v0_1x1_b = npn_b.interacting(npn_b.extents.interacting(npn_11v0_1x1_e))
npn_11v0_1x1_c = npn_c.interacting(npn_c.extents.interacting(npn_11v0_1x1_e)) 

#==============
# ---- pnp ----
#==============

logger.info("Starting PNP layers DERIVATIONS")

# PNP general nodes DERIVATIONS
pnp_e = pcomp.inside(nwell).interacting(pnpid)
pnp_b = ntap.interacting(pnpid)
pnp_c = tap.inside(psdm).interacting(pnpid)

# 5V PNP with emitter size of 0.68umx0.68um DERIVATIONS
pnp_5v0_0p68x0p68_e = pnp_e.with_area(0.3364.um, 0.6084.um).interacting(pnp_e.edges.with_length(0.58.um, 0.78.um))
pnp_5v0_0p68x0p68_b = pnp_b.interacting(pnp_b.extents.interacting(pnp_5v0_0p68x0p68_e))
pnp_5v0_0p68x0p68_c = pnp_c.interacting(pnp_c.extents.interacting(pnp_5v0_0p68x0p68_e))  

# 5V PNP with emitter size of 3.4umx3.4um DERIVATIONS
pnp_5v0_3p4x3p4_e = pnp_e.with_area(10.24.um, 12.96.um).interacting(pnp_e.edges.with_length(3.2.um, 3.6.um))
pnp_5v0_3p4x3p4_b = pnp_b.interacting(pnp_b.extents.interacting(pnp_5v0_3p4x3p4_e))
pnp_5v0_3p4x3p4_c = pnp_c.interacting(pnp_c.extents.interacting(pnp_5v0_3p4x3p4_e))  


#================================
# ----- DIODE DERIVATIONS -------
#================================

logger.info("Starting DIODE DERIVATIONS")

# 5V N+ diffusion diode
ndiff_5v0_terminal_n = ncomp.not(hvtp).not(hvi).not(lvtn).outside(dnwell).interacting(areaid_de)
ndiff_5v0_terminal_p = tap.and(psdm).holes.interacting(ndiff_5v0_terminal_n)

# 5V N+ diffusion diode low threshold voltage
ndiff_5v0_lvt_terminal_n = ncomp.not(hvtp).not(hvi).and(lvtn).outside(dnwell).interacting(areaid_de)
ndiff_5v0_lvt_terminal_p = tap.and(psdm).holes.interacting(ndiff_5v0_lvt_terminal_n)

# 5V N+ diffusion diode native threshold voltage
ndiff_5v0_nvt_terminal_n = ncomp.not(hvtp).and(hvi).and(lvtn).outside(dnwell).interacting(areaid_de)
ndiff_5v0_nvt_terminal_p = tap.and(psdm).holes.interacting(ndiff_5v0_nvt_terminal_n)

# 11V N+ diffusion diode
ndiff_11v0_terminal_n = ncomp.not(hvtp).and(hvi).not(lvtn).outside(dnwell).interacting(areaid_de).not_interacting(areaid_ed)
ndiff_11v0_terminal_p = tap.and(psdm).holes.interacting(ndiff_11v0_terminal_n)

# 5V P+ diffusion diode
pdiff_5v0_terminal_n = pcomp.not(hvtp).not(hvi).not(lvtn).outside(dnwell).interacting(areaid_de)

# 5V P+ diffusion diode low threshold voltage
pdiff_5v0_lvt_terminal_n = pcomp.not(hvtp).not(hvi).and(lvtn).outside(dnwell).interacting(areaid_de)

# 5V P+ diffusion diode high threshold voltage
pdiff_5v0_hvt_terminal_n = pcomp.and(hvtp).not(hvi).not(lvtn).outside(dnwell).interacting(areaid_de)

# 11V P+ diffusion diode
pdiff_11v0_terminal_n = pcomp.not(hvtp).and(hvi).not(lvtn).outside(dnwell).interacting(areaid_de).not_interacting(areaid_ed)


#================================
# --- ESD DIODE DERIVATIONS -----
#================================

logger.info("Starting ESD DIODE DERIVATIONS")

# ESD 11V N+ diffusion diode
ndiff_11v0_esd_terminal_n = ncomp.not(hvtp).and(hvi).not(lvtn).outside(dnwell).interacting(areaid_de).interacting(areaid_ed)

# ESD 11V N+ diffusion in deep nwell diode
ndiff_11v0_esd_dnwell_terminal_n = ncomp.not(hvtp).and(hvi).not(lvtn).and(dnwell).interacting(areaid_de).interacting(areaid_ed)

# ESD 11V P+ diffusion diode
pdiff_11v0_esd_terminal_n = pcomp.not(hvtp).and(hvi).not(lvtn).outside(dnwell).interacting(areaid_de).interacting(areaid_ed)


#================================
# --- PHOTODIODE DERIVATIONS ----
#================================

logger.info("Starting PHOTODIODE DERIVATIONS")

# Photodiode
photodiode_n = tap.and(nsdm).and(nwell).and(dnwell).interacting(areaid_po)
photodiode_p = tap.and(psdm).holes.interacting(photodiode_n)


#================================
# ---- RESISTOR DERIVATIONS -----
#================================

logger.info("Starting RESISTOR DERIVATIONS")

# ===============
# --DIFF & WELL--
# ===============

# N+ diffusion resistor
nplus_layer       = ncomp.and(diff_res).not(hvi)
nplus_cont        = ncomp.not_interacting(ngate).interacting(diff_res).not(diff_res).not(hvi)

# N+ diffusion high voltage resistor
nplus_hv_layer    = ncomp.and(diff_res).and(hvi)
nplus_hv_cont     = ncomp.not_interacting(ngate).interacting(diff_res).not(diff_res).and(hvi)

# P+ diffusion resistor
pplus_layer       = pcomp.and(nwell).and(diff_res).not(hvi)
pplus_cont        = pcomp.and(nwell).not_interacting(pgate).interacting(diff_res).not(diff_res).not(hvi)

# P+ diffusion high voltage resistor
pplus_hv_layer    = pcomp.and(nwell).and(diff_res).and(hvi)
pplus_hv_cont     = pcomp.and(nwell).not_interacting(pgate).interacting(diff_res).not(diff_res).and(hvi)

# Isolated PWELL resistor
pwell_layer       = pwell_res.not(nwell).and(dnwell)
pwell_cont        = tap.and(psdm).not(nwell).and(dnwell).interacting(pwell_res).not(pwell_res)

# ==============
# ---- POLY ----
# ==============

# Poly resistor
poly_layer       = poly.not(psdm).not_interacting(diff).and(poly_res).not(rpm).not(urpm)

# 300 ohm Poly resistor
poly_300_layer   = poly.and(psdm).not_interacting(diff).and(poly_res).and(rpm).not(urpm)

poly_high_0p35   = poly_300_layer.interacting(poly_300_layer.edges.with_length(0.34.um, 0.36.um))
poly_high_0p69   = poly_300_layer.interacting(poly_300_layer.edges.with_length(0.68.um, 0.7.um ))
poly_high_1p41   = poly_300_layer.interacting(poly_300_layer.edges.with_length(1.4.um , 1.42.um))
poly_high_2p85   = poly_300_layer.interacting(poly_300_layer.edges.with_length(2.84.um, 2.86.um))
poly_high_5p73   = poly_300_layer.interacting(poly_300_layer.edges.with_length(5.72.um, 5.74.um))

# 2K ohm Poly resistor
poly_2k_layer    = poly.and(psdm).not_interacting(diff).and(poly_res).not(rpm).and(urpm)

poly_xhigh_0p35  = poly_2k_layer.interacting(poly_2k_layer.edges.with_length(0.34.um, 0.36.um))
poly_xhigh_0p69  = poly_2k_layer.interacting(poly_2k_layer.edges.with_length(0.68.um, 0.7.um ))
poly_xhigh_1p41  = poly_2k_layer.interacting(poly_2k_layer.edges.with_length(1.4.um , 1.42.um))
poly_xhigh_2p85  = poly_2k_layer.interacting(poly_2k_layer.edges.with_length(2.84.um, 2.86.um))
poly_xhigh_5p73  = poly_2k_layer.interacting(poly_2k_layer.edges.with_length(5.72.um, 5.74.um))

# ===============
# ---- METAL ----
# ===============

# Local inter-connect resistor
li_res_layer    =   li.and(li_res)

# Metal1 resistor
met1_res_layer  = met1.and(met1_res)

# Metal2 resistor
met2_res_layer  = met2.and(met2_res)

# Metal3 resistor
met3_res_layer  = met3.and(met3_res)

# Metal4 resistor
met4_res_layer  = met4.and(met4_res)

# Metal5 resistor
met5_res_layer  = met5.and(met5_res)


#==================================
# ------- FUSE DERIVATIONS --------
#==================================

logger.info("Starting FUSE DERIVATIONS")

if FUSE == "m2"

  # Metal2 fuse
  met2_fuse_res_layer  = met2.and(met2_fuse)

elsif FUSE == "m3"

  # Metal3 fuse
  met3_fuse_res_layer  = met3.and(met3_fuse)

else

  # Metal4 fuse
  met4_fuse_res_layer  = met4.and(met4_fuse)

end


#==================================
# ------ MIMCAP DERIVATIONS -------
#==================================

logger.info("Starting MIMCAP DERIVATIONS")

# mim on metal3
met3_ncap = met3_con.not(capm)

# mim on metal4
met4_ncap = met4_con.not(capm2)


#==================================
# ----- VARACTOR DERIVATIONS ------
#==================================

logger.info("Starting VARACTOR DERIVATIONS")

# Low threshold voltage varactor
varactor_gate_lvt = poly.interacting(poly.and(tap).and(nsdm).not(hvtp).not(ncm).not(hvi).and(nwell).not(dnwell))
varactor_nsd_lvt  = tap.and(nsdm).not(hvtp).not(ncm).not(hvi).and(nwell).not(dnwell).interacting(varactor_gate_lvt).not(diff_res)
varactor_bulk_lvt = tap.and(psdm).holes.interacting(varactor_gate_lvt)

# High threshold voltage varactor
varactor_gate_hvt = poly.interacting(poly.and(tap).and(nsdm).and(hvtp).not(ncm).not(hvi).and(nwell).not(dnwell))
varactor_nsd_hvt  = tap.and(nsdm).and(hvtp).not(ncm).not(hvi).and(nwell).not(dnwell).interacting(varactor_gate_hvt).not(diff_res)
varactor_bulk_hvt = tap.and(psdm).holes.interacting(varactor_gate_hvt)

# High voltage varactor
varactor_gate_hv  = poly.interacting(poly.and(tap).and(nsdm).not(hvtp).not(ncm).and(hvi).and(lvtn).and(nwell).not(dnwell))
varactor_nsd_hv   = tap.and(nsdm).not(hvtp).not(ncm).and(hvi).and(lvtn).and(nwell).not(dnwell).interacting(varactor_gate_hvt).not(diff_res)
varactor_bulk_hv  = tap.and(psdm).holes.interacting(varactor_gate_hv)


#==================================
# ------ VPP CAP DERIVATIONS ------
#==================================

logger.info("Starting VPP CAP DERIVATIONS")

# General VPP capacitor derivation
vpp_sized          = vpp.sized(0.17.um)
#vpp_met_sized      = vpp.sized(0.01.um)
met1_vpp           = met1.interacting(met1_pin).and(vpp)#.and(vpp_met_sized)
met2_vpp           = met2.interacting(met2_pin).and(vpp)#.and(vpp_met_sized)
met3_vpp           = met3.interacting(met3_pin).and(vpp)#.and(vpp_met_sized)
met4_vpp           = met4.interacting(met4_pin).and(vpp)#.and(vpp_met_sized)
met5_vpp           = met5.interacting(met5_pin).and(vpp)#.and(vpp_met_sized)
ngate_5p0v_nvt_vpp = ngate.not(hvtp).not(ncm).and(hvi).and(lvtn).not(nwell).not(dnwell).not(areaid_le).not_interacting(areaid_ed).interacting(vpp)


#===== DIMENSIONS ======

# VPP capacitor with dimensions of 2.4um x 4.6um
vpp_dim_02p4x04p6 = vpp_sized.with_area(10.6925.um, 11.3925.um).interacting(vpp_sized.edges.with_length(4.55.um, 4.65.um)).not_covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)

# VPP capacitor with dimensions of 2.7um x 6.1um
vpp_dim_02p7x06p1_fingercap = vpp_sized.with_area(16.0325.um, 16.9125.um).interacting(vpp_sized.edges.with_length(6.05.um, 6.15.um)).not_covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)

# VPP capacitor with dimensions of 2.7um x 11.1um
vpp_dim_02p7x11p1_fingercap = vpp_sized.with_area(29.2825.um, 30.6625.um).interacting(vpp_sized.edges.with_length(11.05.um, 11.15.um)).not_covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)

# VPP capacitor with dimensions of 2.7um x 21.1um
vpp_dim_02p7x21p1_fingercap = vpp_sized.with_area(55.7825.um, 58.1625.um).interacting(vpp_sized.edges.with_length(21.05.um, 21.15.um)).not_covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)

# VPP capacitor with dimensions of 2.7um x 41.1um
vpp_dim_02p7x41p1_fingercap = vpp_sized.with_area(108.7825.um, 113.1625.um).interacting(vpp_sized.edges.with_length(41.05.um, 41.15.um)).not_covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)

# VPP capacitor with dimensions of 2.9um x 6.1um
vpp_dim_02p9x06p1_fingercap2 = vpp_sized.with_area(17.2425.um, 18.1425.um).interacting(vpp_sized.edges.with_length(6.05.um, 6.15.um)).not_covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)

# VPP capacitor with dimensions of 3.9um x 3.9um
vpp_dim_03p9x03p9_floatm3 = vpp_sized.with_area(14.8225.um, 15.6025.um).interacting(vpp_sized.edges.with_length(3.85.um, 3.95.um)).or(met3.with_area(14.8225.um, 15.6025.um).interacting(met3.edges.with_length(3.85.um, 3.95.um))).not_covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)

# VPP capacitor with dimensions of 4.4um x 4.6um
vpp_dim_04p4x04p6 = vpp_sized.with_area(19.7925.um, 20.6925.um).interacting(vpp_sized.edges.with_length(4.55.um, 4.65.um)).not_covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)
vpp_dim_04p4x04p6_o2subcell = vpp.with_area(19.7925.um, 20.6925.um).interacting(vpp.edges.with_length(4.55.um, 4.65.um)).not_covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)
vpp_dim_04p4x04p6_floatm3 = vpp_sized.with_area(19.7925.um, 20.6925.um).interacting(vpp_sized.edges.with_length(4.55.um, 4.65.um)).or(met3.with_area(19.7925.um, 20.6925.um).interacting(met3.edges.with_length(4.55.um, 4.65.um))).not_covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)
vpp_dim_04p4x04p6_floatm4 = vpp_sized.with_area(19.7925.um, 20.6925.um).interacting(vpp_sized.edges.with_length(4.55.um, 4.65.um)).not_covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)
vpp_dim_04p4x04p6_floatm4_top = vpp_sized.with_area(74.0921.um, 75.8241.um).interacting(vpp_sized.edges.with_length(8.81.um, 8.91.um)).not_covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)
vpp_dim_04p4x04p6_o2 = vpp_sized.with_area(19.7925.um, 20.6925.um).interacting(vpp_sized.edges.with_length(4.55.um, 4.65.um)).not_covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)

# VPP capacitor with dimensions of 5.9um x 5.9um
vpp_dim_05p9x05p9_wafflecap = vpp_sized.with_area(34.2225.um, 35.4025.um).interacting(vpp_sized.edges.with_length(5.85.um, 5.95.um)).not_covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)

# VPP capacitor with dimensions of 6.8um x 6.1um
vpp_dim_06p8x06p1 = vpp_sized.with_area(40.8375.um, 42.1275.um).interacting(vpp_sized.edges.with_length(6.05.um, 6.15.um)).not_covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)
vpp_dim_06p8x06p1_top = vpp_sized.with_area(156.0101.um, 158.5221.um).interacting(vpp_sized.edges.with_length(11.81.um, 11.91.um)).not_covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)

# VPP capacitor with dimensions of 8.6um x 7.8um
vpp_dim_08p6x07p8 = vpp_sized.with_area(66.2625.um, 67.9025.um).interacting(vpp_sized.edges.with_length(7.75.um, 7.85.um)).not_covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)
vpp_dim_08p6x07p8_o2subcell = vpp.with_area(66.2625.um, 67.9025.um).interacting(vpp.edges.with_length(7.75.um, 7.85.um)).not_covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)
vpp_dim_08p6x07p8_floatm3 = vpp_sized.with_area(66.2625.um, 67.9025.um).interacting(vpp_sized.edges.with_length(7.75.um, 7.85.um)).or(met3.with_area(66.2625.um, 67.9025.um).interacting(met3.edges.with_length(7.75.um, 7.85.um))).not_covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)
vpp_dim_08p6x07p8_floatm4 = vpp_sized.with_area(66.2625.um, 67.9025.um).interacting(vpp_sized.edges.with_length(7.75.um, 7.85.um)).not_covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)
vpp_dim_08p6x07p8_floatm4_top = vpp_sized.with_area(255.6801.um, 258.8921.um).interacting(vpp_sized.edges.with_length(15.21.um, 15.31.um)).not_covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)

# VPP capacitor with dimensions of 11.3um x 11.3um
vpp_dim_11p3x11p3_wafflecap = vpp_sized.with_area(126.5625.um, 128.8225.um).interacting(vpp_sized.edges.with_length(11.25.um, 11.35.um)).not_covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)

# VPP capacitor with dimensions of 11.3um x 11.8um
vpp_dim_11p3x11p8_nhv = vpp_sized.with_area(127.6275.um, 139.1775.um).interacting(vpp_sized.edges.with_length(11.55.um, 12.05.um)).not_covering(met5.extents).interacting(ngate_5p0v_nvt_vpp)
vpp_dim_11p3x11p8_nhvtop = vpp_sized.with_area(506.4501.um, 529.2101.um).interacting(vpp_sized.edges.with_length(23.01.um, 23.51.um)).not_covering(met5.extents).interacting(ngate_5p0v_nvt_vpp)

# VPP capacitor with dimensions of 11.5um x 11.7um
vpp_dim_11p5x11p7 = vpp_sized.with_area(133.3925.um, 135.7125.um).interacting(vpp_sized.edges.with_length(11.65.um, 11.75.um)).not_covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)
vpp_dim_11p5x11p7_top = vpp_sized.with_area(520.2561.um, 524.8281.um).interacting(vpp_sized.edges.with_length(23.01.um, 23.11.um)).not_covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)
vpp_dim_11p5x11p7_x6 = vpp_sized.with_area(133.3925.um, 135.7125.um).interacting(vpp_sized.edges.with_length(11.65.um, 11.75.um)).covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)
vpp_dim_11p5x11p7_x7 = vpp_sized.with_area(133.3925.um, 135.7125.um).interacting(vpp_sized.edges.with_length(11.65.um, 11.75.um)).covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)
vpp_dim_11p5x11p7_x8 = vpp_sized.with_area(133.3925.um, 135.7125.um).interacting(vpp_sized.edges.with_length(11.65.um, 11.75.um)).covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)
vpp_dim_11p5x11p7_x9 = vpp_sized.with_area(133.3925.um, 135.7125.um).interacting(vpp_sized.edges.with_length(11.65.um, 11.75.um)).covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)
vpp_dim_11p5x11p7_x = vpp_sized.with_area(133.3925.um, 135.7125.um).interacting(vpp_sized.edges.with_length(11.65.um, 11.75.um)).covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)
vpp_dim_11p5x11p7_xtop = vpp_sized.with_area(520.2561.um, 524.8281.um).interacting(vpp_sized.edges.with_length(23.01.um, 23.11.um)).covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)
vpp_dim_11p5x11p7 = vpp_sized.with_area(133.3925.um, 135.7125.um).interacting(vpp_sized.edges.with_length(11.65.um, 11.75.um)).or(met3.with_area(133.3925.um, 135.7125.um).interacting(met3.edges.with_length(11.65.um, 11.75.um))).not_covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)
vpp_dim_11p5x11p7_top = vpp_sized.with_area(520.2561.um, 524.8281.um).interacting(vpp_sized.edges.with_length(23.01.um, 23.11.um)).or(met3.with_area(133.3925.um, 135.7125.um).interacting(met3.edges.with_length(11.65.um, 11.75.um))).not_covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)
vpp_dim_11p5x11p7_floatm4 = vpp_sized.with_area(133.3925.um, 135.7125.um).interacting(vpp_sized.edges.with_length(11.65.um, 11.75.um)).not_covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)
vpp_dim_11p5x11p7_floatm4_top = vpp_sized.with_area(520.2561.um, 524.8281.um).interacting(vpp_sized.edges.with_length(23.01.um, 23.11.um)).not_covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)

# VPP capacitor with dimensions of 11.5um x 23.1um
vpp_dim_11p5x23p1 = vpp_sized.with_area(263.9225.um, 267.3825.um).interacting(vpp_sized.edges.with_length(23.05.um, 23.15.um)).not_covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)

# VPP capacitor with dimensions of 22.5um x 11.7um
vpp_dim_22p5x11p7 = vpp_sized.with_area(261.5425.um, 264.9625.um).interacting(vpp_sized.edges.with_length(11.65.um, 11.75.um)).not_covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)

# VPP capacitor with dimensions of 22.5um x 23.1um
vpp_dim_22p5x23p1 = vpp_sized.with_area(517.4725.um, 522.0325.um).interacting(vpp_sized.edges.with_length(23.05.um, 23.15.um)).not_covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)

# VPP capacitor with dimensions of 33.6um x 11.7um
vpp_dim_33p6x11p7 = vpp_sized.with_area(390.8575.um, 395.3875.um).interacting(vpp_sized.edges.with_length(11.65.um, 11.75.um)).not_covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)

# VPP capacitor with dimensions of 33.6um x 23.1um
vpp_dim_33p6x23p1 = vpp_sized.with_area(773.3275.um, 778.9975.um).interacting(vpp_sized.edges.with_length(23.05.um, 23.15.um)).not_covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)

# VPP capacitor with dimensions of 44.7um x 11.7um
vpp_dim_44p7x11p7 = vpp_sized.with_area(520.1725.um, 525.8125.um).interacting(vpp_sized.edges.with_length(11.65.um, 11.75.um)).not_covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)

# VPP capacitor with dimensions of 44.7um x 23.1um
vpp_dim_44p7x23p1 = vpp_sized.with_area(1029.1825.um, 1035.9625.um).interacting(vpp_sized.edges.with_length(23.05.um, 23.15.um)).not_covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)

# VPP capacitor with dimensions of 55.8um x 11.7um
vpp_dim_55p8x11p7 = vpp_sized.with_area(649.4875.um, 656.2375.um).interacting(vpp_sized.edges.with_length(11.65.um, 11.75.um)).not_covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)
vpp_dim_55p8x11p7_m5pullin = vpp_sized.with_area(649.4875.um, 656.2375.um).interacting(vpp_sized.edges.with_length(11.65.um, 11.75.um)).covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)

# VPP capacitor with dimensions of 55.8um x 23.1um
vpp_dim_55p8x23p1 = vpp_sized.with_area(1285.0375.um, 1292.9275.um).interacting(vpp_sized.edges.with_length(23.05.um, 23.15.um)).not_covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)
vpp_dim_55p8x23p1_m5pullin = vpp_sized.with_area(1285.0375.um, 1292.9275.um).interacting(vpp_sized.edges.with_length(23.05.um, 23.15.um)).covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)
vpp_dim_55p8x23p1_test = vpp_sized.with_area(1285.0375.um, 1292.9275.um).interacting(vpp_sized.edges.with_length(23.05.um, 23.15.um)).not_covering(met5.extents).not_interacting(ngate_5p0v_nvt_vpp)


#===== LAYERS ======

# VPP capacitor with layers of m1m2 and noshield 
vpp_m1m2_noshield_metals = vpp.not_interacting(poly).not_interacting(li).interacting(met1).interacting(met2).not_interacting(met3).not_interacting(met4).not_interacting(met5)
vpp_m1m2_noshield_vias = vpp.not_interacting(licon).not_interacting(mcon).interacting(via1).not_interacting(via2).not_interacting(via3).not_interacting(via4)

# VPP capacitor with layers of m1m2m3m4 and shieldl1 
vpp_m1m2m3m4_shieldl1_metals = vpp.not_interacting(poly).interacting(li).interacting(met1).interacting(met2).interacting(met3).interacting(met4).not_interacting(met5)
vpp_m1m2m3m4_shieldl1_vias = vpp.not_interacting(licon).not_interacting(mcon).interacting(via1).interacting(via2).interacting(via3).not_interacting(via4)

# VPP capacitor with layers of m1m2 and shieldl1 with floatm3 
vpp_m1m2_shieldl1_metals_with_floatm3 = vpp.not_interacting(poly).interacting(li).interacting(met1).interacting(met2).interacting(met3).not_interacting(met4).not_interacting(met5)
vpp_m1m2_shieldl1_vias = vpp.not_interacting(licon).not_interacting(mcon).interacting(via1).not_interacting(via2).not_interacting(via3).not_interacting(via4)

# VPP capacitor with layers of l1m1m2 and noshield 
vpp_l1m1m2_noshield_metals = vpp.not_interacting(poly).interacting(li).interacting(met1).interacting(met2).not_interacting(met3).not_interacting(met4).not_interacting(met5)
vpp_l1m1m2_noshield_vias = vpp.not_interacting(licon).interacting(mcon).interacting(via1).not_interacting(via2).not_interacting(via3).not_interacting(via4)

# VPP capacitor with layers of l1m1m2 and shieldpo with floatm3 
vpp_l1m1m2_shieldpo_metals_with_floatm3 = vpp.interacting(poly).interacting(li).interacting(met1).interacting(met2).interacting(met3).not_interacting(met4).not_interacting(met5)
vpp_l1m1m2_shieldpo_vias = vpp.not_interacting(licon).interacting(mcon).interacting(via1).not_interacting(via2).not_interacting(via3).not_interacting(via4)

# VPP capacitor with layers of m1m2m3 and shieldl1 
vpp_m1m2m3_shieldl1_metals = vpp.not_interacting(poly).interacting(li).interacting(met1).interacting(met2).interacting(met3).not_interacting(met4).not_interacting(met5)
vpp_m1m2m3_shieldl1_vias = vpp.not_interacting(licon).not_interacting(mcon).interacting(via1).interacting(via2).not_interacting(via3).not_interacting(via4)

# VPP capacitor with layers of m1m2m3 and shieldl1m5 with floatm4 
vpp_m1m2m3_shieldl1m5_metals_with_floatm4 = vpp.not_interacting(poly).interacting(li).interacting(met1).interacting(met2).interacting(met3).interacting(met4).interacting(met5)
vpp_m1m2m3_shieldl1m5_vias = vpp.not_interacting(licon).not_interacting(mcon).interacting(via1).interacting(via2).not_interacting(via3).not_interacting(via4)

# VPP capacitor with layers of m1m2 and shieldl1 
vpp_m1m2_shieldl1_metals = vpp.not_interacting(poly).interacting(li).interacting(met1).interacting(met2).not_interacting(met3).not_interacting(met4).not_interacting(met5)

# VPP capacitor with layers of l1m1m2m3 and shieldpom4 
vpp_l1m1m2m3_shieldpom4_metals = vpp.interacting(poly).interacting(li).interacting(met1).interacting(met2).interacting(met3).interacting(met4).not_interacting(met5)
vpp_l1m1m2m3_shieldpom4_vias = vpp.not_interacting(licon).interacting(mcon).interacting(via1).interacting(via2).not_interacting(via3).not_interacting(via4)

# VPP capacitor with layers of m1m2m3 and shieldl1m4 
vpp_m1m2m3_shieldl1m4_metals = vpp.not_interacting(poly).interacting(li).interacting(met1).interacting(met2).interacting(met3).interacting(met4).not_interacting(met5)
vpp_m1m2m3_shieldl1m4_vias = vpp.not_interacting(licon).not_interacting(mcon).interacting(via1).interacting(via2).not_interacting(via3).not_interacting(via4)

# VPP capacitor with layers of l1m1m2m3m4 and shieldm5 
vpp_l1m1m2m3m4_shieldm5_metals = vpp.not_interacting(poly).interacting(li).interacting(met1).interacting(met2).interacting(met3).interacting(met4).interacting(met5)
vpp_l1m1m2m3m4_shieldm5_vias = vpp.not_interacting(licon).interacting(mcon).interacting(via1).interacting(via2).interacting(via3).not_interacting(via4)

# VPP capacitor with layers of l1m1m2m3m4 and shieldpom5 
vpp_l1m1m2m3m4_shieldpom5_metals = vpp.interacting(poly).interacting(li).interacting(met1).interacting(met2).interacting(met3).interacting(met4).interacting(met5)
vpp_l1m1m2m3m4_shieldpom5_vias = vpp.not_interacting(licon).interacting(mcon).interacting(via1).interacting(via2).interacting(via3).not_interacting(via4)

# VPP capacitor with layers of l1m1m2m3 and shieldm4 
vpp_l1m1m2m3_shieldm4_metals = vpp.not_interacting(poly).interacting(li).interacting(met1).interacting(met2).interacting(met3).interacting(met4).not_interacting(met5)
vpp_l1m1m2m3_shieldm4_vias = vpp.not_interacting(licon).interacting(mcon).interacting(via1).interacting(via2).not_interacting(via3).not_interacting(via4)

# VPP capacitor with layers of l1m1m2 and shieldpom3 
vpp_l1m1m2_shieldpom3_metals = vpp.interacting(poly).interacting(li).interacting(met1).interacting(met2).interacting(met3).not_interacting(met4).not_interacting(met5)
vpp_l1m1m2_shieldpom3_vias = vpp.not_interacting(licon).interacting(mcon).interacting(via1).not_interacting(via2).not_interacting(via3).not_interacting(via4)

# VPP capacitor with layers of m1m2m3m4 and shieldl1m5 
vpp_m1m2m3m4_shieldl1m5_metals = vpp.not_interacting(poly).interacting(li).interacting(met1).interacting(met2).interacting(met3).interacting(met4).interacting(met5)
vpp_m1m2m3m4_shieldl1m5_vias = vpp.not_interacting(licon).not_interacting(mcon).interacting(via1).interacting(via2).interacting(via3).not_interacting(via4)

# VPP capacitor with layers of m1m2m3m4 and shieldm5 
vpp_m1m2m3m4_shieldm5_metals = vpp.not_interacting(poly).not_interacting(li).interacting(met1).interacting(met2).interacting(met3).interacting(met4).interacting(met5)
vpp_m1m2m3m4_shieldm5_vias = vpp.not_interacting(licon).not_interacting(mcon).interacting(via1).interacting(via2).interacting(via3).not_interacting(via4)

# VPP capacitor with layers of m1m4 and noshield 
vpp_m1m4_noshield_metals = vpp.not_interacting(poly).not_interacting(li).interacting(met1).not_interacting(met2).not_interacting(met3).interacting(met4).not_interacting(met5)
vpp_m1m4_noshield_vias = vpp.not_interacting(licon).not_interacting(mcon).interacting(via1).interacting(via2).interacting(via3).not_interacting(via4)

# VPP capacitor with layers of pol1m1m2m3m4m5 and noshield 
vpp_pol1m1m2m3m4m5_noshield_metals = vpp.interacting(poly).interacting(li).interacting(met1).interacting(met2).interacting(met3).interacting(met4).interacting(met5)
vpp_pol1m1m2m3m4m5_noshield_vias = vpp.interacting(licon).interacting(mcon).interacting(via1).interacting(via2).interacting(via3).interacting(via4)


#===== DEVICES ======

# VPP capacitor with dimensions of 2.4um x 4.6um and with layers of m1m2 and noshield
vpp_02p4x04p6_m1m2_noshield_mk = vpp.not_covering(vpp_dim_02p4x04p6).interacting(vpp_dim_02p4x04p6).interacting(vpp_m1m2_noshield_metals).interacting(vpp_m1m2_noshield_vias)

# VPP capacitor with dimensions of 2.7um x 6.1um and with layers of m1m2m3m4 and shieldl1
vpp_02p7x06p1_m1m2m3m4_shieldl1_fingercap_mk = vpp.not_covering(vpp_dim_02p7x06p1_fingercap).interacting(vpp_dim_02p7x06p1_fingercap).interacting(vpp_m1m2m3m4_shieldl1_metals).interacting(vpp_m1m2m3m4_shieldl1_vias)

# VPP capacitor with dimensions of 2.7um x 11.1um and with layers of m1m2m3m4 and shieldl1
vpp_02p7x11p1_m1m2m3m4_shieldl1_fingercap_mk = vpp.not_covering(vpp_dim_02p7x11p1_fingercap).interacting(vpp_dim_02p7x11p1_fingercap).interacting(vpp_m1m2m3m4_shieldl1_metals).interacting(vpp_m1m2m3m4_shieldl1_vias)

# VPP capacitor with dimensions of 2.7um x 21.1um and with layers of m1m2m3m4 and shieldl1
vpp_02p7x21p1_m1m2m3m4_shieldl1_fingercap_mk = vpp.not_covering(vpp_dim_02p7x21p1_fingercap).interacting(vpp_dim_02p7x21p1_fingercap).interacting(vpp_m1m2m3m4_shieldl1_metals).interacting(vpp_m1m2m3m4_shieldl1_vias)

# VPP capacitor with dimensions of 2.7um x 41.1um and with layers of m1m2m3m4 and shieldl1
vpp_02p7x41p1_m1m2m3m4_shieldl1_fingercap_mk = vpp.not_covering(vpp_dim_02p7x41p1_fingercap).interacting(vpp_dim_02p7x41p1_fingercap).interacting(vpp_m1m2m3m4_shieldl1_metals).interacting(vpp_m1m2m3m4_shieldl1_vias)

# VPP capacitor with dimensions of 2.9um x 6.1um and with layers of m1m2m3m4 and shieldl1
vpp_02p9x06p1_m1m2m3m4_shieldl1_fingercap2_mk = vpp.not_covering(vpp_dim_02p9x06p1_fingercap2).interacting(vpp_dim_02p9x06p1_fingercap2).interacting(vpp_m1m2m3m4_shieldl1_metals).interacting(vpp_m1m2m3m4_shieldl1_vias)

# VPP capacitor with dimensions of 3.9um x 3.9um and with layers of m1m2 and shieldl1 with floatm3
vpp_03p9x03p9_m1m2_shieldl1_floatm3_mk = vpp.not_covering(vpp_dim_03p9x03p9_floatm3).interacting(vpp_dim_03p9x03p9_floatm3).interacting(vpp_m1m2_shieldl1_metals_with_floatm3).interacting(vpp_m1m2_shieldl1_vias)

# VPP capacitor with dimensions of 4.4um x 4.6um and with layers of l1m1m2 and noshield
vpp_04p4x04p6_l1m1m2_noshield_mk = vpp.not_covering(vpp_dim_04p4x04p6).interacting(vpp_dim_04p4x04p6).interacting(vpp_l1m1m2_noshield_metals).interacting(vpp_l1m1m2_noshield_vias)
vpp_04p4x04p6_l1m1m2_noshield_o2subcell_mk = vpp.covering(vpp_dim_04p4x04p6_o2subcell).sized(-0.17.um).interacting(vpp_dim_04p4x04p6_o2subcell).interacting(vpp_l1m1m2_noshield_metals).interacting(vpp_l1m1m2_noshield_vias)

# VPP capacitor with dimensions of 4.4um x 4.6um and with layers of l1m1m2 and shieldpo with floatm3
vpp_04p4x04p6_l1m1m2_shieldpo_floatm3_mk = vpp.not_covering(vpp_dim_04p4x04p6_floatm3).interacting(vpp_dim_04p4x04p6_floatm3).interacting(vpp_l1m1m2_shieldpo_metals_with_floatm3).interacting(vpp_l1m1m2_shieldpo_vias)

# VPP capacitor with dimensions of 4.4um x 4.6um and with layers of m1m2m3 and shieldl1
vpp_04p4x04p6_m1m2m3_shieldl1_mk = vpp.not_covering(vpp_dim_04p4x04p6).interacting(vpp_dim_04p4x04p6).interacting(vpp_m1m2m3_shieldl1_metals).interacting(vpp_m1m2m3_shieldl1_vias)

# VPP capacitor with dimensions of 4.4um x 4.6um and with layers of m1m2m3 and shieldl1m5 with floatm4
vpp_04p4x04p6_m1m2m3_shieldl1m5_floatm4_mk = vpp.not_covering(vpp_dim_04p4x04p6_floatm4).interacting(vpp_dim_04p4x04p6_floatm4).interacting(vpp_m1m2m3_shieldl1m5_metals_with_floatm4).interacting(vpp_m1m2m3_shieldl1m5_vias)
vpp_04p4x04p6_m1m2m3_shieldl1m5_floatm4_top_mk = vpp.not_covering(vpp_dim_04p4x04p6_floatm4_top).interacting(vpp_dim_04p4x04p6_floatm4_top).interacting(vpp_m1m2m3_shieldl1m5_metals_with_floatm4).interacting(vpp_m1m2m3_shieldl1m5_vias)

# VPP capacitor with dimensions of 4.4um x 4.6um and with layers of m1m2 and noshield
vpp_04p4x04p6_m1m2_noshield_mk = vpp.not_covering(vpp_dim_04p4x04p6).interacting(vpp_dim_04p4x04p6).interacting(vpp_m1m2_noshield_metals).interacting(vpp_m1m2_noshield_vias)
vpp_04p4x04p6_m1m2_noshield_o2_mk = vpp.not_covering(vpp_dim_04p4x04p6_o2).interacting(vpp_dim_04p4x04p6_o2).interacting(vpp_m1m2_noshield_metals).interacting(vpp_m1m2_noshield_vias)

# VPP capacitor with dimensions of 4.4um x 4.6um and with layers of m1m2 and shieldl1
vpp_04p4x04p6_m1m2_shieldl1_mk = vpp.not_covering(vpp_dim_04p4x04p6).interacting(vpp_dim_04p4x04p6).interacting(vpp_m1m2_shieldl1_metals).interacting(vpp_m1m2_shieldl1_vias)

# VPP capacitor with dimensions of 5.9um x 5.9um and with layers of m1m2m3m4 and shieldl1
vpp_05p9x05p9_m1m2m3m4_shieldl1_wafflecap_mk = vpp.not_covering(vpp_dim_05p9x05p9_wafflecap).interacting(vpp_dim_05p9x05p9_wafflecap).interacting(vpp_m1m2m3m4_shieldl1_metals).interacting(vpp_m1m2m3m4_shieldl1_vias)

# VPP capacitor with dimensions of 6.8um x 6.1um and with layers of l1m1m2m3 and shieldpom4
vpp_06p8x06p1_l1m1m2m3_shieldpom4_mk = vpp.not_covering(vpp_dim_06p8x06p1).interacting(vpp_dim_06p8x06p1).interacting(vpp_l1m1m2m3_shieldpom4_metals).interacting(vpp_l1m1m2m3_shieldpom4_vias)
vpp_06p8x06p1_l1m1m2m3_shieldpom4_top_mk = vpp.not_covering(vpp_dim_06p8x06p1_top).interacting(vpp_dim_06p8x06p1_top).interacting(vpp_l1m1m2m3_shieldpom4_metals).interacting(vpp_l1m1m2m3_shieldpom4_vias)

# VPP capacitor with dimensions of 6.8um x 6.1um and with layers of m1m2m3 and shieldl1m4
vpp_06p8x06p1_m1m2m3_shieldl1m4_mk = vpp.not_covering(vpp_dim_06p8x06p1).interacting(vpp_dim_06p8x06p1).interacting(vpp_m1m2m3_shieldl1m4_metals).interacting(vpp_m1m2m3_shieldl1m4_vias)
vpp_06p8x06p1_m1m2m3_shieldl1m4_top_mk = vpp.not_covering(vpp_dim_06p8x06p1_top).interacting(vpp_dim_06p8x06p1_top).interacting(vpp_m1m2m3_shieldl1m4_metals).interacting(vpp_m1m2m3_shieldl1m4_vias)

# VPP capacitor with dimensions of 8.6um x 7.8um and with layers of l1m1m2 and noshield
vpp_08p6x07p8_l1m1m2_noshield_mk = vpp.not_covering(vpp_dim_08p6x07p8).interacting(vpp_dim_08p6x07p8).interacting(vpp_l1m1m2_noshield_metals).interacting(vpp_l1m1m2_noshield_vias)
vpp_08p6x07p8_l1m1m2_noshield_o2subcell_mk = vpp.covering(vpp_dim_08p6x07p8_o2subcell).sized(-0.17.um).interacting(vpp_dim_08p6x07p8_o2subcell).interacting(vpp_l1m1m2_noshield_metals).interacting(vpp_l1m1m2_noshield_vias)

# VPP capacitor with dimensions of 8.6um x 7.8um and with layers of l1m1m2 and shieldpo with floatm3
vpp_08p6x07p8_l1m1m2_shieldpo_floatm3_mk = vpp.not_covering(vpp_dim_08p6x07p8_floatm3).interacting(vpp_dim_08p6x07p8_floatm3).interacting(vpp_l1m1m2_shieldpo_metals_with_floatm3).interacting(vpp_l1m1m2_shieldpo_vias)

# VPP capacitor with dimensions of 8.6um x 7.8um and with layers of m1m2m3 and shieldl1
vpp_08p6x07p8_m1m2m3_shieldl1_mk = vpp.not_covering(vpp_dim_08p6x07p8).interacting(vpp_dim_08p6x07p8).interacting(vpp_m1m2m3_shieldl1_metals).interacting(vpp_m1m2m3_shieldl1_vias)

# VPP capacitor with dimensions of 8.6um x 7.8um and with layers of m1m2m3 and shieldl1m5 with floatm4
vpp_08p6x07p8_m1m2m3_shieldl1m5_floatm4_mk = vpp.not_covering(vpp_dim_08p6x07p8_floatm4).interacting(vpp_dim_08p6x07p8_floatm4).interacting(vpp_m1m2m3_shieldl1m5_metals_with_floatm4).interacting(vpp_m1m2m3_shieldl1m5_vias)
vpp_08p6x07p8_m1m2m3_shieldl1m5_floatm4_top_mk = vpp.not_covering(vpp_dim_08p6x07p8_floatm4_top).interacting(vpp_dim_08p6x07p8_floatm4_top).interacting(vpp_m1m2m3_shieldl1m5_metals_with_floatm4).interacting(vpp_m1m2m3_shieldl1m5_vias)

# VPP capacitor with dimensions of 8.6um x 7.8um and with layers of m1m2 and noshield
vpp_08p6x07p8_m1m2_noshield_mk = vpp.not_covering(vpp_dim_08p6x07p8).interacting(vpp_dim_08p6x07p8).interacting(vpp_m1m2_noshield_metals).interacting(vpp_m1m2_noshield_vias)

# VPP capacitor with dimensions of 8.6um x 7.8um and with layers of m1m2 and shieldl1
vpp_08p6x07p8_m1m2_shieldl1_mk = vpp.not_covering(vpp_dim_08p6x07p8).interacting(vpp_dim_08p6x07p8).interacting(vpp_m1m2_shieldl1_metals).interacting(vpp_m1m2_shieldl1_vias)

# VPP capacitor with dimensions of 11.3um x 11.3um and with layers of m1m2m3m4 and shieldl1
vpp_11p3x11p3_m1m2m3m4_shieldl1_wafflecap_mk = vpp.not_covering(vpp_dim_11p3x11p3_wafflecap).interacting(vpp_dim_11p3x11p3_wafflecap).interacting(vpp_m1m2m3m4_shieldl1_metals).interacting(vpp_m1m2m3m4_shieldl1_vias)

# VPP capacitor with dimensions of 11.3um x 11.8um and with layers of l1m1m2m3m4 and shieldm5
vpp_11p3x11p8_l1m1m2m3m4_shieldm5_nhv_mk = vpp.not_covering(vpp_dim_11p3x11p8_nhv).interacting(vpp_dim_11p3x11p8_nhv).interacting(vpp_l1m1m2m3m4_shieldm5_metals).interacting(vpp_l1m1m2m3m4_shieldm5_vias)
vpp_11p3x11p8_l1m1m2m3m4_shieldm5_nhvtop_mk = vpp.not_covering(vpp_dim_11p3x11p8_nhvtop).interacting(vpp_dim_11p3x11p8_nhvtop).interacting(vpp_l1m1m2m3m4_shieldm5_metals).interacting(vpp_l1m1m2m3m4_shieldm5_vias)

# VPP capacitor with dimensions of 11.5um x 11.7um and with layers of l1m1m2m3m4 and shieldm5
vpp_11p5x11p7_l1m1m2m3m4_shieldm5_mk = vpp.not_covering(vpp_dim_11p5x11p7).interacting(vpp_dim_11p5x11p7).interacting(vpp_l1m1m2m3m4_shieldm5_metals).interacting(vpp_l1m1m2m3m4_shieldm5_vias)
vpp_11p5x11p7_l1m1m2m3m4_shieldm5_top_mk = vpp.not_covering(vpp_dim_11p5x11p7_top).interacting(vpp_dim_11p5x11p7_top).interacting(vpp_l1m1m2m3m4_shieldm5_metals).interacting(vpp_l1m1m2m3m4_shieldm5_vias)

# VPP capacitor with dimensions of 11.5um x 11.7um and with layers of l1m1m2m3m4 and shieldpom5
vpp_11p5x11p7_l1m1m2m3m4_shieldpom5_mk = vpp.not_covering(vpp_dim_11p5x11p7).interacting(vpp_dim_11p5x11p7).interacting(vpp_l1m1m2m3m4_shieldpom5_metals).interacting(vpp_l1m1m2m3m4_shieldpom5_vias)
vpp_11p5x11p7_l1m1m2m3m4_shieldpom5_top_mk = vpp.not_covering(vpp_dim_11p5x11p7_top).interacting(vpp_dim_11p5x11p7_top).interacting(vpp_l1m1m2m3m4_shieldpom5_metals).interacting(vpp_l1m1m2m3m4_shieldpom5_vias)
vpp_11p5x11p7_l1m1m2m3m4_shieldpom5_x6_mk = vpp.not_covering(vpp_dim_11p5x11p7_x6).interacting(vpp_dim_11p5x11p7_x6).interacting(vpp_l1m1m2m3m4_shieldpom5_metals).interacting(vpp_l1m1m2m3m4_shieldpom5_vias)
vpp_11p5x11p7_l1m1m2m3m4_shieldpom5_x7_mk = vpp.not_covering(vpp_dim_11p5x11p7_x7).interacting(vpp_dim_11p5x11p7_x7).interacting(vpp_l1m1m2m3m4_shieldpom5_metals).interacting(vpp_l1m1m2m3m4_shieldpom5_vias)
vpp_11p5x11p7_l1m1m2m3m4_shieldpom5_x8_mk = vpp.not_covering(vpp_dim_11p5x11p7_x8).interacting(vpp_dim_11p5x11p7_x8).interacting(vpp_l1m1m2m3m4_shieldpom5_metals).interacting(vpp_l1m1m2m3m4_shieldpom5_vias)
vpp_11p5x11p7_l1m1m2m3m4_shieldpom5_x9_mk = vpp.not_covering(vpp_dim_11p5x11p7_x9).interacting(vpp_dim_11p5x11p7_x9).interacting(vpp_l1m1m2m3m4_shieldpom5_metals).interacting(vpp_l1m1m2m3m4_shieldpom5_vias)
vpp_11p5x11p7_l1m1m2m3m4_shieldpom5_x_mk = vpp.not_covering(vpp_dim_11p5x11p7_x).interacting(vpp_dim_11p5x11p7_x).interacting(vpp_l1m1m2m3m4_shieldpom5_metals).interacting(vpp_l1m1m2m3m4_shieldpom5_vias)
vpp_11p5x11p7_l1m1m2m3m4_shieldpom5_xtop_mk = vpp.not_covering(vpp_dim_11p5x11p7_xtop).interacting(vpp_dim_11p5x11p7_xtop).interacting(vpp_l1m1m2m3m4_shieldpom5_metals).interacting(vpp_l1m1m2m3m4_shieldpom5_vias)

# VPP capacitor with dimensions of 11.5um x 11.7um and with layers of l1m1m2m3 and shieldm4
vpp_11p5x11p7_l1m1m2m3_shieldm4_mk = vpp.not_covering(vpp_dim_11p5x11p7).interacting(vpp_dim_11p5x11p7).interacting(vpp_l1m1m2m3_shieldm4_metals).interacting(vpp_l1m1m2m3_shieldm4_vias)
vpp_11p5x11p7_l1m1m2m3_shieldm4_top_mk = vpp.not_covering(vpp_dim_11p5x11p7_top).interacting(vpp_dim_11p5x11p7_top).interacting(vpp_l1m1m2m3_shieldm4_metals).interacting(vpp_l1m1m2m3_shieldm4_vias)

# VPP capacitor with dimensions of 11.5um x 11.7um and with layers of l1m1m2m3 and shieldpom4
vpp_11p5x11p7_l1m1m2m3_shieldpom4_mk = vpp.not_covering(vpp_dim_11p5x11p7).interacting(vpp_dim_11p5x11p7).interacting(vpp_l1m1m2m3_shieldpom4_metals).interacting(vpp_l1m1m2m3_shieldpom4_vias)
vpp_11p5x11p7_l1m1m2m3_shieldpom4_top_mk = vpp.not_covering(vpp_dim_11p5x11p7_top).interacting(vpp_dim_11p5x11p7_top).interacting(vpp_l1m1m2m3_shieldpom4_metals).interacting(vpp_l1m1m2m3_shieldpom4_vias)

# VPP capacitor with dimensions of 11.5um x 11.7um and with layers of l1m1m2 and noshield
vpp_11p5x11p7_l1m1m2_noshield_mk = vpp.not_covering(vpp_dim_11p5x11p7).interacting(vpp_dim_11p5x11p7).interacting(vpp_l1m1m2_noshield_metals).interacting(vpp_l1m1m2_noshield_vias)

# VPP capacitor with dimensions of 11.5um x 11.7um and with layers of l1m1m2 and shieldpom3
vpp_11p5x11p7_l1m1m2_shieldpom3_mk = vpp.not_covering(vpp_dim_11p5x11p7).interacting(vpp_dim_11p5x11p7).interacting(vpp_l1m1m2_shieldpom3_metals).interacting(vpp_l1m1m2_shieldpom3_vias)

# VPP capacitor with dimensions of 11.5um x 11.7um and with layers of m1m2m3m4 and shieldl1m5
vpp_11p5x11p7_m1m2m3m4_shieldl1m5_mk = vpp.not_covering(vpp_dim_11p5x11p7).interacting(vpp_dim_11p5x11p7).interacting(vpp_m1m2m3m4_shieldl1m5_metals).interacting(vpp_m1m2m3m4_shieldl1m5_vias)
vpp_11p5x11p7_m1m2m3m4_shieldl1m5_top_mk = vpp.not_covering(vpp_dim_11p5x11p7_top).interacting(vpp_dim_11p5x11p7_top).interacting(vpp_m1m2m3m4_shieldl1m5_metals).interacting(vpp_m1m2m3m4_shieldl1m5_vias)

# VPP capacitor with dimensions of 11.5um x 11.7um and with layers of m1m2m3m4 and shieldm5
vpp_11p5x11p7_m1m2m3m4_shieldm5_mk = vpp.not_covering(vpp_dim_11p5x11p7).interacting(vpp_dim_11p5x11p7).interacting(vpp_m1m2m3m4_shieldm5_metals).interacting(vpp_m1m2m3m4_shieldm5_vias)

# VPP capacitor with dimensions of 11.5um x 11.7um and with layers of m1m2m3 and shieldl1
vpp_11p5x11p7_m1m2m3_shieldl1_mk = vpp.not_covering(vpp_dim_11p5x11p7).interacting(vpp_dim_11p5x11p7).interacting(vpp_m1m2m3_shieldl1_metals).interacting(vpp_m1m2m3_shieldl1_vias)

# VPP capacitor with dimensions of 11.5um x 11.7um and with layers of m1m2m3 and shieldl1m5 with floatm4
vpp_11p5x11p7_m1m2m3_shieldl1m5_floatm4_mk = vpp.not_covering(vpp_dim_11p5x11p7_floatm4).interacting(vpp_dim_11p5x11p7_floatm4).interacting(vpp_m1m2m3_shieldl1m5_metals_with_floatm4).interacting(vpp_m1m2m3_shieldl1m5_vias)
vpp_11p5x11p7_m1m2m3_shieldl1m5_floatm4_top_mk = vpp.not_covering(vpp_dim_11p5x11p7_floatm4_top).interacting(vpp_dim_11p5x11p7_floatm4_top).interacting(vpp_m1m2m3_shieldl1m5_metals_with_floatm4).interacting(vpp_m1m2m3_shieldl1m5_vias)

# VPP capacitor with dimensions of 11.5um x 11.7um and with layers of m1m2 and noshield
vpp_11p5x11p7_m1m2_noshield_mk = vpp.not_covering(vpp_dim_11p5x11p7).interacting(vpp_dim_11p5x11p7).interacting(vpp_m1m2_noshield_metals).interacting(vpp_m1m2_noshield_vias)

# VPP capacitor with dimensions of 11.5um x 11.7um and with layers of m1m2 and shieldl1
vpp_11p5x11p7_m1m2_shieldl1_mk = vpp.not_covering(vpp_dim_11p5x11p7).interacting(vpp_dim_11p5x11p7).interacting(vpp_m1m2_shieldl1_metals).interacting(vpp_m1m2_shieldl1_vias)

# VPP capacitor with dimensions of 11.5um x 11.7um and with layers of m1m4 and noshield
vpp_11p5x11p7_m1m4_noshield_mk = vpp.not_covering(vpp_dim_11p5x11p7).interacting(vpp_dim_11p5x11p7).interacting(vpp_m1m4_noshield_metals).interacting(vpp_m1m4_noshield_vias)

# VPP capacitor with dimensions of 11.5um x 11.7um and with layers of pol1m1m2m3m4m5 and noshield
vpp_11p5x11p7_pol1m1m2m3m4m5_noshield_mk = vpp.not_covering(vpp_dim_11p5x11p7).interacting(vpp_dim_11p5x11p7).interacting(vpp_pol1m1m2m3m4m5_noshield_metals).interacting(vpp_pol1m1m2m3m4m5_noshield_vias)

# VPP capacitor with dimensions of 11.5um x 23.1um and with layers of pol1m1m2m3m4m5 and noshield
vpp_11p5x23p1_pol1m1m2m3m4m5_noshield_mk = vpp.not_covering(vpp_dim_11p5x23p1).interacting(vpp_dim_11p5x23p1).interacting(vpp_pol1m1m2m3m4m5_noshield_metals).interacting(vpp_pol1m1m2m3m4m5_noshield_vias)

# VPP capacitor with dimensions of 22.5um x 11.7um and with layers of pol1m1m2m3m4m5 and noshield
vpp_22p5x11p7_pol1m1m2m3m4m5_noshield_mk = vpp.not_covering(vpp_dim_22p5x11p7).interacting(vpp_dim_22p5x11p7).interacting(vpp_pol1m1m2m3m4m5_noshield_metals).interacting(vpp_pol1m1m2m3m4m5_noshield_vias)

# VPP capacitor with dimensions of 22.5um x 23.1um and with layers of pol1m1m2m3m4m5 and noshield
vpp_22p5x23p1_pol1m1m2m3m4m5_noshield_mk = vpp.not_covering(vpp_dim_22p5x23p1).interacting(vpp_dim_22p5x23p1).interacting(vpp_pol1m1m2m3m4m5_noshield_metals).interacting(vpp_pol1m1m2m3m4m5_noshield_vias)

# VPP capacitor with dimensions of 33.6um x 11.7um and with layers of pol1m1m2m3m4m5 and noshield
vpp_33p6x11p7_pol1m1m2m3m4m5_noshield_mk = vpp.not_covering(vpp_dim_33p6x11p7).interacting(vpp_dim_33p6x11p7).interacting(vpp_pol1m1m2m3m4m5_noshield_metals).interacting(vpp_pol1m1m2m3m4m5_noshield_vias)

# VPP capacitor with dimensions of 33.6um x 23.1um and with layers of pol1m1m2m3m4m5 and noshield
vpp_33p6x23p1_pol1m1m2m3m4m5_noshield_mk = vpp.not_covering(vpp_dim_33p6x23p1).interacting(vpp_dim_33p6x23p1).interacting(vpp_pol1m1m2m3m4m5_noshield_metals).interacting(vpp_pol1m1m2m3m4m5_noshield_vias)

# VPP capacitor with dimensions of 44.7um x 11.7um and with layers of pol1m1m2m3m4m5 and noshield
vpp_44p7x11p7_pol1m1m2m3m4m5_noshield_mk = vpp.not_covering(vpp_dim_44p7x11p7).interacting(vpp_dim_44p7x11p7).interacting(vpp_pol1m1m2m3m4m5_noshield_metals).interacting(vpp_pol1m1m2m3m4m5_noshield_vias)

# VPP capacitor with dimensions of 44.7um x 23.1um and with layers of pol1m1m2m3m4m5 and noshield
vpp_44p7x23p1_pol1m1m2m3m4m5_noshield_mk = vpp.not_covering(vpp_dim_44p7x23p1).interacting(vpp_dim_44p7x23p1).interacting(vpp_pol1m1m2m3m4m5_noshield_metals).interacting(vpp_pol1m1m2m3m4m5_noshield_vias)

# VPP capacitor with dimensions of 55.8um x 11.7um and with layers of pol1m1m2m3m4m5 and noshield
vpp_55p8x11p7_pol1m1m2m3m4m5_noshield_mk = vpp.not_covering(vpp_dim_55p8x11p7).interacting(vpp_dim_55p8x11p7).interacting(vpp_pol1m1m2m3m4m5_noshield_metals).interacting(vpp_pol1m1m2m3m4m5_noshield_vias)
vpp_55p8x11p7_pol1m1m2m3m4m5_noshield_m5pullin_mk = vpp.not_covering(vpp_dim_55p8x11p7_m5pullin).interacting(vpp_dim_55p8x11p7_m5pullin).interacting(vpp_pol1m1m2m3m4m5_noshield_metals).interacting(vpp_pol1m1m2m3m4m5_noshield_vias)

# VPP capacitor with dimensions of 55.8um x 23.1um and with layers of pol1m1m2m3m4m5 and noshield
vpp_55p8x23p1_pol1m1m2m3m4m5_noshield_mk = vpp.not_covering(vpp_dim_55p8x23p1).interacting(vpp_dim_55p8x23p1).interacting(vpp_pol1m1m2m3m4m5_noshield_metals).interacting(vpp_pol1m1m2m3m4m5_noshield_vias)
vpp_55p8x23p1_pol1m1m2m3m4m5_noshield_m5pullin_mk = vpp.not_covering(vpp_dim_55p8x23p1_m5pullin).interacting(vpp_dim_55p8x23p1_m5pullin).interacting(vpp_pol1m1m2m3m4m5_noshield_metals).interacting(vpp_pol1m1m2m3m4m5_noshield_vias)
vpp_55p8x23p1_pol1m1m2m3m4m5_noshield_test_mk = vpp.not_covering(vpp_dim_55p8x23p1_test).interacting(vpp_dim_55p8x23p1_test).interacting(vpp_pol1m1m2m3m4m5_noshield_metals).interacting(vpp_pol1m1m2m3m4m5_noshield_vias)


#==================================
# ----- INDUCTOR DERIVATIONS ------
#==================================

logger.info("Starting INDUCTOR DERIVATIONS")

# RF Inductor with 3 turns and internal diameter of 90um
coil_1 = inductor.interacting(met3.or(met2).and(inductor.covering(met2.and(inductor), 3, 3)).holes.width(100.um, projection).with_distance(89.um, 91.um).polygons)

# RF Inductor with 5 turns and internal diameter of 125um
coil_2 = inductor.interacting(met3.or(met2).and(inductor.covering(met2.and(inductor), 5, 5)).holes.width(135.um, projection).with_distance(124.um, 126.um).polygons)

# RF Inductor with 5 turns and internal diameter of 220um
coil_3 = inductor.interacting(met3.or(met2).and(inductor.covering(met2.and(inductor), 5, 5)).holes.width(230.um, projection).with_distance(219.um, 221.um).polygons)


#==================================
# ------- SONOS DERIVATIONS -------
#==================================

logger.info("Starting SONOS DERIVATIONS")

# Build space flash special SONOSFET original/star
sonos = ngate.not(hvtp).not(ncm).not(hvi).and(lvtn).not(nwell).and(dnwell).and(tunm).and(ldntm).interacting(areaid_ce)


#================================
#---- RF MOSFET DERIVATIONS -----
#================================

logger.info("Starting RF MOSFET DERIVATIONS")

#===== FLAVORS ======

# 1.8V NMOS transistor standard
gate_01v8 = tgate.not(hvtp).not(ncm).not(hvi).not(lvtn).not(dnwell).not_interacting(areaid_ed).not_interacting(areaid_ce).not_interacting(txt_label.texts("dummy_poly"))

# 1.8V NMOS transistor low threshold voltage
gate_01v8_lvt = tgate.not(hvtp).not(ncm).not(hvi).and(lvtn).not(dnwell).not_interacting(areaid_ce).not_interacting(txt_label.texts("dummy_poly"))

# 5V gate 10.5V drain NMOS transistor
gate_g5v0d10v5 = tgate.not(hvtp).not(ncm).and(hvi).not(lvtn).not(dnwell).not(ldntm).not_interacting(areaid_ce).not_interacting(areaid_ed).not_interacting(areaid_en).not_interacting(txt_label.texts("dummy_poly"))


#===== LENGTHS ======

# RF MOS gate with length of 0.15um
gate_0p15 = tgate.edges.and(diff).with_length(0.149.um, 0.151.um)

# RF MOS gate with length of 0.18um
gate_0p18 = tgate.edges.and(diff).with_length(0.179.um, 0.181.um)

# RF MOS gate with length of 0.25um
gate_0p25 = tgate.edges.and(diff).with_length(0.249.um, 0.251.um)

# RF MOS gate with length of 0.5um
gate_0p50 = tgate.edges.and(diff).with_length(0.499.um, 0.501.um)

# RF MOS gate with length of 0.35um
gate_0p35 = tgate.edges.and(diff).with_length(0.349.um, 0.351.um)


#===== WIDTHS ======

# RF MOS gate with width of 1.65um
gate_1p65 = tgate.edges.inside_part(diff).with_length(1.649.um, 1.651.um)

# RF MOS gate with width of 3.0um
gate_3p00 = tgate.edges.inside_part(diff).with_length(2.999.um, 3.001.um)

# RF MOS gate with width of 5.0um
gate_5p00 = tgate.edges.inside_part(diff).with_length(4.999.um, 5.001.um)

# RF MOS gate with width of 0.42um
gate_0p42 = tgate.edges.inside_part(diff).with_length(0.419.um, 0.421.um)

# RF MOS gate with width of 0.84um
gate_0p84 = tgate.edges.inside_part(diff).with_length(0.839.um, 0.841.um)

# RF MOS gate with width of 7.0um
gate_7p00 = tgate.edges.inside_part(diff).with_length(6.999.um, 7.001.um)

# RF MOS gate with width of 1.68um
gate_1p68 = tgate.edges.inside_part(diff).with_length(1.679.um, 1.681.um)

# RF MOS gate with width of 2.0um
gate_2p00 = tgate.edges.inside_part(diff).with_length(1.999.um, 2.001.um)


#===== DIFFUSIONS ======

# RF MOS gate with multiplier of 2 width of 1.65um and length of 0.15um
diff_02W1p65L0p15 = diff.covering(tgate.interacting(gate_0p15).interacting(gate_1p65).not_interacting(txt_label.texts("dummy_poly")), 2, 2)

# RF MOS gate with multiplier of 2 width of 1.65um and length of 0.18um
diff_02W1p65L0p18 = diff.covering(tgate.interacting(gate_0p18).interacting(gate_1p65).not_interacting(txt_label.texts("dummy_poly")), 2, 2)

# RF MOS gate with multiplier of 2 width of 1.65um and length of 0.25um
diff_02W1p65L0p25 = diff.covering(tgate.interacting(gate_0p25).interacting(gate_1p65).not_interacting(txt_label.texts("dummy_poly")), 2, 2)

# RF MOS gate with multiplier of 2 width of 3.0um and length of 0.15um
diff_02W3p00L0p15 = diff.covering(tgate.interacting(gate_0p15).interacting(gate_3p00).not_interacting(txt_label.texts("dummy_poly")), 2, 2)

# RF MOS gate with multiplier of 2 width of 3.0um and length of 0.18um
diff_02W3p00L0p18 = diff.covering(tgate.interacting(gate_0p18).interacting(gate_3p00).not_interacting(txt_label.texts("dummy_poly")), 2, 2)

# RF MOS gate with multiplier of 2 width of 3.0um and length of 0.25um
diff_02W3p00L0p25 = diff.covering(tgate.interacting(gate_0p25).interacting(gate_3p00).not_interacting(txt_label.texts("dummy_poly")), 2, 2)

# RF MOS gate with multiplier of 2 width of 5.0um and length of 0.15um
diff_02W5p00L0p15 = diff.covering(tgate.interacting(gate_0p15).interacting(gate_5p00).not_interacting(txt_label.texts("dummy_poly")), 2, 2)

# RF MOS gate with multiplier of 2 width of 5.0um and length of 0.18um
diff_02W5p00L0p18 = diff.covering(tgate.interacting(gate_0p18).interacting(gate_5p00).not_interacting(txt_label.texts("dummy_poly")), 2, 2)

# RF MOS gate with multiplier of 2 width of 5.0um and length of 0.25um
diff_02W5p00L0p25 = diff.covering(tgate.interacting(gate_0p25).interacting(gate_5p00).not_interacting(txt_label.texts("dummy_poly")), 2, 2)

# RF MOS gate with multiplier of 4 width of 1.65um and length of 0.15um
diff_04W1p65L0p15 = diff.covering(tgate.interacting(gate_0p15).interacting(gate_1p65).not_interacting(txt_label.texts("dummy_poly")), 4, 4)

# RF MOS gate with multiplier of 4 width of 1.65um and length of 0.18um
diff_04W1p65L0p18 = diff.covering(tgate.interacting(gate_0p18).interacting(gate_1p65).not_interacting(txt_label.texts("dummy_poly")), 4, 4)

# RF MOS gate with multiplier of 4 width of 1.65um and length of 0.25um
diff_04W1p65L0p25 = diff.covering(tgate.interacting(gate_0p25).interacting(gate_1p65).not_interacting(txt_label.texts("dummy_poly")), 4, 4)

# RF MOS gate with multiplier of 4 width of 3.0um and length of 0.15um
diff_04W3p00L0p15 = diff.covering(tgate.interacting(gate_0p15).interacting(gate_3p00).not_interacting(txt_label.texts("dummy_poly")), 4, 4)

# RF MOS gate with multiplier of 4 width of 3.0um and length of 0.18um
diff_04W3p00L0p18 = diff.covering(tgate.interacting(gate_0p18).interacting(gate_3p00).not_interacting(txt_label.texts("dummy_poly")), 4, 4)

# RF MOS gate with multiplier of 4 width of 3.0um and length of 0.25um
diff_04W3p00L0p25 = diff.covering(tgate.interacting(gate_0p25).interacting(gate_3p00).not_interacting(txt_label.texts("dummy_poly")), 4, 4)

# RF MOS gate with multiplier of 4 width of 5.0um and length of 0.15um
diff_04W5p00L0p15 = diff.covering(tgate.interacting(gate_0p15).interacting(gate_5p00).not_interacting(txt_label.texts("dummy_poly")), 4, 4)

# RF MOS gate with multiplier of 4 width of 5.0um and length of 0.18um
diff_04W5p00L0p18 = diff.covering(tgate.interacting(gate_0p18).interacting(gate_5p00).not_interacting(txt_label.texts("dummy_poly")), 4, 4)

# RF MOS gate with multiplier of 4 width of 5.0um and length of 0.25um
diff_04W5p00L0p25 = diff.covering(tgate.interacting(gate_0p25).interacting(gate_5p00).not_interacting(txt_label.texts("dummy_poly")), 4, 4)

# RF MOS gate with multiplier of 2 width of 0.42um and length of 0.15um
diff_02W0p42L0p15 = diff.covering(tgate.interacting(gate_0p15).interacting(gate_0p42).not_interacting(txt_label.texts("dummy_poly")), 2, 2)

# RF MOS gate with multiplier of 2 width of 0.84um and length of 0.15um
diff_02W0p84L0p15 = diff.covering(tgate.interacting(gate_0p15).interacting(gate_0p84).not_interacting(txt_label.texts("dummy_poly")), 2, 2)

# RF MOS gate with multiplier of 4 width of 0.42um and length of 0.15um
diff_04W0p42L0p15 = diff.covering(tgate.interacting(gate_0p15).interacting(gate_0p42).not_interacting(txt_label.texts("dummy_poly")), 4, 4)

# RF MOS gate with multiplier of 4 width of 0.84um and length of 0.15um
diff_04W0p84L0p15 = diff.covering(tgate.interacting(gate_0p15).interacting(gate_0p84).not_interacting(txt_label.texts("dummy_poly")), 4, 4)

# RF MOS gate with multiplier of 6 width of 0.42um and length of 0.15um
diff_06W0p42L0p15 = diff.covering(tgate.interacting(gate_0p15).interacting(gate_0p42).not_interacting(txt_label.texts("dummy_poly")), 6, 6)

# RF MOS gate with multiplier of 6 width of 0.84um and length of 0.15um
diff_06W0p84L0p15 = diff.covering(tgate.interacting(gate_0p15).interacting(gate_0p84).not_interacting(txt_label.texts("dummy_poly")), 6, 6)

# RF MOS gate with multiplier of 6 width of 1.65um and length of 0.15um
diff_06W1p65L0p15 = diff.covering(tgate.interacting(gate_0p15).interacting(gate_1p65).not_interacting(txt_label.texts("dummy_poly")), 6, 6)

# RF MOS gate with multiplier of 6 width of 3.0um and length of 0.15um
diff_06W3p00L0p15 = diff.covering(tgate.interacting(gate_0p15).interacting(gate_3p00).not_interacting(txt_label.texts("dummy_poly")), 6, 6)

# RF MOS gate with multiplier of 8 width of 0.42um and length of 0.15um
diff_08W0p42L0p15 = diff.covering(tgate.interacting(gate_0p15).interacting(gate_0p42).not_interacting(txt_label.texts("dummy_poly")), 8, 8)

# RF MOS gate with multiplier of 8 width of 0.84um and length of 0.15um
diff_08W0p84L0p15 = diff.covering(tgate.interacting(gate_0p15).interacting(gate_0p84).not_interacting(txt_label.texts("dummy_poly")), 8, 8)

# RF MOS gate with multiplier of 8 width of 1.65um and length of 0.15um
diff_08W1p65L0p15 = diff.covering(tgate.interacting(gate_0p15).interacting(gate_1p65).not_interacting(txt_label.texts("dummy_poly")), 8, 8)

# RF MOS gate with multiplier of 8 width of 3.0um and length of 0.15um
diff_08W3p00L0p15 = diff.covering(tgate.interacting(gate_0p15).interacting(gate_3p00).not_interacting(txt_label.texts("dummy_poly")), 8, 8)

# RF MOS gate with multiplier of 4 width of 3.0um and length of 0.5um
diff_04W3p00L0p50 = diff.covering(tgate.interacting(gate_0p50).interacting(gate_3p00).not_interacting(txt_label.texts("dummy_poly")), 4, 4)

# RF MOS gate with multiplier of 4 width of 5.0um and length of 0.5um
diff_04W5p00L0p50 = diff.covering(tgate.interacting(gate_0p50).interacting(gate_5p00).not_interacting(txt_label.texts("dummy_poly")), 4, 4)

# RF MOS gate with multiplier of 4 width of 7.0um and length of 0.5um
diff_04W7p00L0p50 = diff.covering(tgate.interacting(gate_0p50).interacting(gate_7p00).not_interacting(txt_label.texts("dummy_poly")), 4, 4)

# RF MOS gate with multiplier of 10 width of 3.0um and length of 0.5um
diff_10W3p00L0p50 = diff.covering(tgate.interacting(gate_0p50).interacting(gate_3p00).not_interacting(txt_label.texts("dummy_poly")), 10, 10)

# RF MOS gate with multiplier of 10 width of 5.0um and length of 0.5um
diff_10W5p00L0p50 = diff.covering(tgate.interacting(gate_0p50).interacting(gate_5p00).not_interacting(txt_label.texts("dummy_poly")), 10, 10)

# RF MOS gate with multiplier of 10 width of 7.0um and length of 0.5um
diff_10W7p00L0p50 = diff.covering(tgate.interacting(gate_0p50).interacting(gate_7p00).not_interacting(txt_label.texts("dummy_poly")), 10, 10)

# RF MOS gate with multiplier of 2 width of 3.0um and length of 0.5um
diff_02W3p00L0p50 = diff.covering(tgate.interacting(gate_0p50).interacting(gate_3p00).not_interacting(txt_label.texts("dummy_poly")), 2, 2)

# RF MOS gate with multiplier of 2 width of 5.0um and length of 0.5um
diff_02W5p00L0p50 = diff.covering(tgate.interacting(gate_0p50).interacting(gate_5p00).not_interacting(txt_label.texts("dummy_poly")), 2, 2)

# RF MOS gate with multiplier of 2 width of 1.68um and length of 0.15um
diff_02W1p68L0p15 = diff.covering(tgate.interacting(gate_0p15).interacting(gate_1p68).not_interacting(txt_label.texts("dummy_poly")), 2, 2)

# RF MOS gate with multiplier of 2 width of 2.0um and length of 0.15um
diff_02W2p00L0p15 = diff.covering(tgate.interacting(gate_0p15).interacting(gate_2p00).not_interacting(txt_label.texts("dummy_poly")), 2, 2)

# RF MOS gate with multiplier of 4 width of 1.68um and length of 0.15um
diff_04W1p68L0p15 = diff.covering(tgate.interacting(gate_0p15).interacting(gate_1p68).not_interacting(txt_label.texts("dummy_poly")), 4, 4)

# RF MOS gate with multiplier of 4 width of 2.0um and length of 0.15um
diff_04W2p00L0p15 = diff.covering(tgate.interacting(gate_0p15).interacting(gate_2p00).not_interacting(txt_label.texts("dummy_poly")), 4, 4)

# RF MOS gate with multiplier of 6 width of 1.68um and length of 0.15um
diff_06W1p68L0p15 = diff.covering(tgate.interacting(gate_0p15).interacting(gate_1p68).not_interacting(txt_label.texts("dummy_poly")), 6, 6)

# RF MOS gate with multiplier of 6 width of 2.0um and length of 0.15um
diff_06W2p00L0p15 = diff.covering(tgate.interacting(gate_0p15).interacting(gate_2p00).not_interacting(txt_label.texts("dummy_poly")), 6, 6)

# RF MOS gate with multiplier of 8 width of 1.68um and length of 0.15um
diff_08W1p68L0p15 = diff.covering(tgate.interacting(gate_0p15).interacting(gate_1p68).not_interacting(txt_label.texts("dummy_poly")), 8, 8)

# RF MOS gate with multiplier of 2 width of 3.0um and length of 0.35um
diff_02W3p00L0p35 = diff.covering(tgate.interacting(gate_0p35).interacting(gate_3p00).not_interacting(txt_label.texts("dummy_poly")), 2, 2)

# RF MOS gate with multiplier of 2 width of 5.0um and length of 0.35um
diff_02W5p00L0p35 = diff.covering(tgate.interacting(gate_0p35).interacting(gate_5p00).not_interacting(txt_label.texts("dummy_poly")), 2, 2)

# RF MOS gate with multiplier of 4 width of 3.0um and length of 0.35um
diff_04W3p00L0p35 = diff.covering(tgate.interacting(gate_0p35).interacting(gate_3p00).not_interacting(txt_label.texts("dummy_poly")), 4, 4)

# RF MOS gate with multiplier of 4 width of 5.0um and length of 0.35um
diff_04W5p00L0p35 = diff.covering(tgate.interacting(gate_0p35).interacting(gate_5p00).not_interacting(txt_label.texts("dummy_poly")), 4, 4)


#===== TYPES ======

# RF MOS diffusion with type aM
diff_aM = diff.not_interacting(tap).interacting(diff.not(tgate).edges.not(tgate).not_interacting(diff.corners).with_length(nil, 0.62.um))

# RF MOS diffusion with type bM
diff_bM = diff.interacting(tap).not_covering(licon.interacting(licon.edges.without_length(0.17.um))).interacting(txt_label.texts("dummy_poly"))

# RF MOS diffusion with type hcM
diff_hcM = diff.not_interacting(tap).interacting(diff.not(tgate).edges.not(tgate).not_interacting(diff.corners).with_length(0.62.um, nil)).not_covering(diff.not(met2).rectangles)

# RF MOS diffusion with type aF
diff_aF = diff.not_interacting(tap)

# RF MOS diffusion with type cM
diff_cM = diff.interacting(tap).covering(licon.interacting(licon.edges.without_length(0.17.um)))

# RF MOS diffusion with type mcM
diff_mcM = diff.not_interacting(tap).interacting(diff.not(tgate).edges.not(tgate).not_interacting(diff.corners).with_length(0.62.um, nil)).covering(diff.not(met2).rectangles)


#===== DEVICES ======

# 1.8V RF NMOS transistor with multiplier of 2 width of 1.65um and length of 0.15um type aM
ngate_01v8_aM02W1p65L0p15 = ngate.interacting(gate_01v8).interacting(diff_aM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W1p65L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor with multiplier of 2 width of 1.65um and length of 0.18um type aM
ngate_01v8_aM02W1p65L0p18 = ngate.interacting(gate_01v8).interacting(diff_aM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W1p65L0p18).interacting(poly_model)

# 1.8V RF NMOS transistor with multiplier of 2 width of 1.65um and length of 0.25um type aM
ngate_01v8_aM02W1p65L0p25 = ngate.interacting(gate_01v8).interacting(diff_aM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W1p65L0p25).interacting(poly_model)

# 1.8V RF NMOS transistor with multiplier of 2 width of 3.0um and length of 0.15um type aM
ngate_01v8_aM02W3p00L0p15 = ngate.interacting(gate_01v8).interacting(diff_aM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W3p00L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor with multiplier of 2 width of 3.0um and length of 0.18um type aM
ngate_01v8_aM02W3p00L0p18 = ngate.interacting(gate_01v8).interacting(diff_aM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W3p00L0p18).interacting(poly_model)

# 1.8V RF NMOS transistor with multiplier of 2 width of 3.0um and length of 0.25um type aM
ngate_01v8_aM02W3p00L0p25 = ngate.interacting(gate_01v8).interacting(diff_aM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W3p00L0p25).interacting(poly_model)

# 1.8V RF NMOS transistor with multiplier of 2 width of 5.0um and length of 0.15um type aM
ngate_01v8_aM02W5p00L0p15 = ngate.interacting(gate_01v8).interacting(diff_aM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W5p00L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor with multiplier of 2 width of 5.0um and length of 0.18um type aM
ngate_01v8_aM02W5p00L0p18 = ngate.interacting(gate_01v8).interacting(diff_aM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W5p00L0p18).interacting(poly_model)

# 1.8V RF NMOS transistor with multiplier of 2 width of 5.0um and length of 0.25um type aM
ngate_01v8_aM02W5p00L0p25 = ngate.interacting(gate_01v8).interacting(diff_aM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W5p00L0p25).interacting(poly_model)

# 1.8V RF NMOS transistor with multiplier of 4 width of 1.65um and length of 0.15um type aM
ngate_01v8_aM04W1p65L0p15 = ngate.interacting(gate_01v8).interacting(diff_aM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W1p65L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor with multiplier of 4 width of 1.65um and length of 0.18um type aM
ngate_01v8_aM04W1p65L0p18 = ngate.interacting(gate_01v8).interacting(diff_aM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W1p65L0p18).interacting(poly_model)

# 1.8V RF NMOS transistor with multiplier of 4 width of 1.65um and length of 0.25um type aM
ngate_01v8_aM04W1p65L0p25 = ngate.interacting(gate_01v8).interacting(diff_aM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W1p65L0p25).interacting(poly_model)

# 1.8V RF NMOS transistor with multiplier of 4 width of 3.0um and length of 0.15um type aM
ngate_01v8_aM04W3p00L0p15 = ngate.interacting(gate_01v8).interacting(diff_aM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W3p00L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor with multiplier of 4 width of 3.0um and length of 0.18um type aM
ngate_01v8_aM04W3p00L0p18 = ngate.interacting(gate_01v8).interacting(diff_aM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W3p00L0p18).interacting(poly_model)

# 1.8V RF NMOS transistor with multiplier of 4 width of 3.0um and length of 0.25um type aM
ngate_01v8_aM04W3p00L0p25 = ngate.interacting(gate_01v8).interacting(diff_aM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W3p00L0p25).interacting(poly_model)

# 1.8V RF NMOS transistor with multiplier of 4 width of 5.0um and length of 0.15um type aM
ngate_01v8_aM04W5p00L0p15 = ngate.interacting(gate_01v8).interacting(diff_aM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W5p00L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor with multiplier of 4 width of 5.0um and length of 0.18um type aM
ngate_01v8_aM04W5p00L0p18 = ngate.interacting(gate_01v8).interacting(diff_aM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W5p00L0p18).interacting(poly_model)

# 1.8V RF NMOS transistor with multiplier of 4 width of 5.0um and length of 0.25um type aM
ngate_01v8_aM04W5p00L0p25 = ngate.interacting(gate_01v8).interacting(diff_aM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W5p00L0p25).interacting(poly_model)

# 1.8V RF NMOS transistor with multiplier of 2 width of 1.65um and length of 0.15um type bM
ngate_01v8_bM02W1p65L0p15 = ngate.interacting(gate_01v8).interacting(diff_bM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W1p65L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor with multiplier of 2 width of 1.65um and length of 0.18um type bM
ngate_01v8_bM02W1p65L0p18 = ngate.interacting(gate_01v8).interacting(diff_bM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W1p65L0p18).interacting(poly_model)

# 1.8V RF NMOS transistor with multiplier of 2 width of 1.65um and length of 0.25um type bM
ngate_01v8_bM02W1p65L0p25 = ngate.interacting(gate_01v8).interacting(diff_bM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W1p65L0p25).interacting(poly_model)

# 1.8V RF NMOS transistor with multiplier of 2 width of 3.0um and length of 0.15um type bM
ngate_01v8_bM02W3p00L0p15 = ngate.interacting(gate_01v8).interacting(diff_bM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W3p00L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor with multiplier of 2 width of 3.0um and length of 0.18um type bM
ngate_01v8_bM02W3p00L0p18 = ngate.interacting(gate_01v8).interacting(diff_bM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W3p00L0p18).interacting(poly_model)

# 1.8V RF NMOS transistor with multiplier of 2 width of 3.0um and length of 0.25um type bM
ngate_01v8_bM02W3p00L0p25 = ngate.interacting(gate_01v8).interacting(diff_bM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W3p00L0p25).interacting(poly_model)

# 1.8V RF NMOS transistor with multiplier of 2 width of 5.0um and length of 0.15um type bM
ngate_01v8_bM02W5p00L0p15 = ngate.interacting(gate_01v8).interacting(diff_bM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W5p00L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor with multiplier of 2 width of 5.0um and length of 0.18um type bM
ngate_01v8_bM02W5p00L0p18 = ngate.interacting(gate_01v8).interacting(diff_bM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W5p00L0p18).interacting(poly_model)

# 1.8V RF NMOS transistor with multiplier of 2 width of 5.0um and length of 0.25um type bM
ngate_01v8_bM02W5p00L0p25 = ngate.interacting(gate_01v8).interacting(diff_bM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W5p00L0p25).interacting(poly_model)

# 1.8V RF NMOS transistor with multiplier of 4 width of 1.65um and length of 0.15um type bM
ngate_01v8_bM04W1p65L0p15 = ngate.interacting(gate_01v8).interacting(diff_bM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W1p65L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor with multiplier of 4 width of 1.65um and length of 0.18um type bM
ngate_01v8_bM04W1p65L0p18 = ngate.interacting(gate_01v8).interacting(diff_bM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W1p65L0p18).interacting(poly_model)

# 1.8V RF NMOS transistor with multiplier of 4 width of 1.65um and length of 0.25um type bM
ngate_01v8_bM04W1p65L0p25 = ngate.interacting(gate_01v8).interacting(diff_bM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W1p65L0p25).interacting(poly_model)

# 1.8V RF NMOS transistor with multiplier of 4 width of 3.0um and length of 0.15um type bM
ngate_01v8_bM04W3p00L0p15 = ngate.interacting(gate_01v8).interacting(diff_bM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W3p00L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor with multiplier of 4 width of 3.0um and length of 0.18um type bM
ngate_01v8_bM04W3p00L0p18 = ngate.interacting(gate_01v8).interacting(diff_bM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W3p00L0p18).interacting(poly_model)

# 1.8V RF NMOS transistor with multiplier of 4 width of 3.0um and length of 0.25um type bM
ngate_01v8_bM04W3p00L0p25 = ngate.interacting(gate_01v8).interacting(diff_bM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W3p00L0p25).interacting(poly_model)

# 1.8V RF NMOS transistor with multiplier of 4 width of 5.0um and length of 0.15um type bM
ngate_01v8_bM04W5p00L0p15 = ngate.interacting(gate_01v8).interacting(diff_bM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W5p00L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor with multiplier of 4 width of 5.0um and length of 0.18um type bM
ngate_01v8_bM04W5p00L0p18 = ngate.interacting(gate_01v8).interacting(diff_bM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W5p00L0p18).interacting(poly_model)

# 1.8V RF NMOS transistor with multiplier of 4 width of 5.0um and length of 0.25um type bM
ngate_01v8_bM04W5p00L0p25 = ngate.interacting(gate_01v8).interacting(diff_bM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W5p00L0p25).interacting(poly_model)

# 1.8V RF NMOS transistor with multiplier of 4 width of 3.0um and length of 0.15um type hcM
ngate_01v8_hcM04W3p00L0p15 = ngate.interacting(gate_01v8).interacting(diff_hcM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W3p00L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor with multiplier of 4 width of 5.0um and length of 0.15um type hcM
ngate_01v8_hcM04W5p00L0p15 = ngate.interacting(gate_01v8).interacting(diff_hcM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W5p00L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 0.42um and length of 0.15um type aF
ngate_01v8_lvt_aF02W0p42L0p15 = ngate.interacting(gate_01v8_lvt).interacting(diff_aF.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W0p42L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 0.84um and length of 0.15um type aF
ngate_01v8_lvt_aF02W0p84L0p15 = ngate.interacting(gate_01v8_lvt).interacting(diff_aF.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W0p84L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 1.65um and length of 0.15um type aF
ngate_01v8_lvt_aF02W1p65L0p15 = ngate.interacting(gate_01v8_lvt).interacting(diff_aF.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W1p65L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 3.0um and length of 0.15um type aF
ngate_01v8_lvt_aF02W3p00L0p15 = ngate.interacting(gate_01v8_lvt).interacting(diff_aF.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W3p00L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 0.42um and length of 0.15um type aF
ngate_01v8_lvt_aF04W0p42L0p15 = ngate.interacting(gate_01v8_lvt).interacting(diff_aF.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W0p42L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 0.84um and length of 0.15um type aF
ngate_01v8_lvt_aF04W0p84L0p15 = ngate.interacting(gate_01v8_lvt).interacting(diff_aF.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W0p84L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 1.65um and length of 0.15um type aF
ngate_01v8_lvt_aF04W1p65L0p15 = ngate.interacting(gate_01v8_lvt).interacting(diff_aF.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W1p65L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 3.0um and length of 0.15um type aF
ngate_01v8_lvt_aF04W3p00L0p15 = ngate.interacting(gate_01v8_lvt).interacting(diff_aF.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W3p00L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 6 width of 0.42um and length of 0.15um type aF
ngate_01v8_lvt_aF06W0p42L0p15 = ngate.interacting(gate_01v8_lvt).interacting(diff_aF.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_06W0p42L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 6 width of 0.84um and length of 0.15um type aF
ngate_01v8_lvt_aF06W0p84L0p15 = ngate.interacting(gate_01v8_lvt).interacting(diff_aF.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_06W0p84L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 6 width of 1.65um and length of 0.15um type aF
ngate_01v8_lvt_aF06W1p65L0p15 = ngate.interacting(gate_01v8_lvt).interacting(diff_aF.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_06W1p65L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 6 width of 3.0um and length of 0.15um type aF
ngate_01v8_lvt_aF06W3p00L0p15 = ngate.interacting(gate_01v8_lvt).interacting(diff_aF.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_06W3p00L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 8 width of 0.42um and length of 0.15um type aF
ngate_01v8_lvt_aF08W0p42L0p15 = ngate.interacting(gate_01v8_lvt).interacting(diff_aF.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_08W0p42L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 8 width of 0.84um and length of 0.15um type aF
ngate_01v8_lvt_aF08W0p84L0p15 = ngate.interacting(gate_01v8_lvt).interacting(diff_aF.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_08W0p84L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 8 width of 1.65um and length of 0.15um type aF
ngate_01v8_lvt_aF08W1p65L0p15 = ngate.interacting(gate_01v8_lvt).interacting(diff_aF.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_08W1p65L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 8 width of 3.0um and length of 0.15um type aF
ngate_01v8_lvt_aF08W3p00L0p15 = ngate.interacting(gate_01v8_lvt).interacting(diff_aF.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_08W3p00L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 1.65um and length of 0.15um type aM
ngate_01v8_lvt_aM02W1p65L0p15 = ngate.interacting(gate_01v8_lvt).interacting(diff_aM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W1p65L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 1.65um and length of 0.18um type aM
ngate_01v8_lvt_aM02W1p65L0p18 = ngate.interacting(gate_01v8_lvt).interacting(diff_aM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W1p65L0p18).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 1.65um and length of 0.25um type aM
ngate_01v8_lvt_aM02W1p65L0p25 = ngate.interacting(gate_01v8_lvt).interacting(diff_aM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W1p65L0p25).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 3.0um and length of 0.15um type aM
ngate_01v8_lvt_aM02W3p00L0p15 = ngate.interacting(gate_01v8_lvt).interacting(diff_aM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W3p00L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 3.0um and length of 0.18um type aM
ngate_01v8_lvt_aM02W3p00L0p18 = ngate.interacting(gate_01v8_lvt).interacting(diff_aM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W3p00L0p18).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 3.0um and length of 0.25um type aM
ngate_01v8_lvt_aM02W3p00L0p25 = ngate.interacting(gate_01v8_lvt).interacting(diff_aM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W3p00L0p25).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 5.0um and length of 0.15um type aM
ngate_01v8_lvt_aM02W5p00L0p15 = ngate.interacting(gate_01v8_lvt).interacting(diff_aM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W5p00L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 5.0um and length of 0.18um type aM
ngate_01v8_lvt_aM02W5p00L0p18 = ngate.interacting(gate_01v8_lvt).interacting(diff_aM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W5p00L0p18).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 5.0um and length of 0.25um type aM
ngate_01v8_lvt_aM02W5p00L0p25 = ngate.interacting(gate_01v8_lvt).interacting(diff_aM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W5p00L0p25).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 1.65um and length of 0.15um type aM
ngate_01v8_lvt_aM04W1p65L0p15 = ngate.interacting(gate_01v8_lvt).interacting(diff_aM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W1p65L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 1.65um and length of 0.18um type aM
ngate_01v8_lvt_aM04W1p65L0p18 = ngate.interacting(gate_01v8_lvt).interacting(diff_aM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W1p65L0p18).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 1.65um and length of 0.25um type aM
ngate_01v8_lvt_aM04W1p65L0p25 = ngate.interacting(gate_01v8_lvt).interacting(diff_aM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W1p65L0p25).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 3.0um and length of 0.15um type aM
ngate_01v8_lvt_aM04W3p00L0p15 = ngate.interacting(gate_01v8_lvt).interacting(diff_aM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W3p00L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 3.0um and length of 0.18um type aM
ngate_01v8_lvt_aM04W3p00L0p18 = ngate.interacting(gate_01v8_lvt).interacting(diff_aM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W3p00L0p18).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 3.0um and length of 0.25um type aM
ngate_01v8_lvt_aM04W3p00L0p25 = ngate.interacting(gate_01v8_lvt).interacting(diff_aM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W3p00L0p25).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 5.0um and length of 0.15um type aM
ngate_01v8_lvt_aM04W5p00L0p15 = ngate.interacting(gate_01v8_lvt).interacting(diff_aM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W5p00L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 5.0um and length of 0.18um type aM
ngate_01v8_lvt_aM04W5p00L0p18 = ngate.interacting(gate_01v8_lvt).interacting(diff_aM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W5p00L0p18).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 5.0um and length of 0.25um type aM
ngate_01v8_lvt_aM04W5p00L0p25 = ngate.interacting(gate_01v8_lvt).interacting(diff_aM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W5p00L0p25).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 1.65um and length of 0.15um type bM
ngate_01v8_lvt_bM02W1p65L0p15 = ngate.interacting(gate_01v8_lvt).interacting(diff_bM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W1p65L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 1.65um and length of 0.18um type bM
ngate_01v8_lvt_bM02W1p65L0p18 = ngate.interacting(gate_01v8_lvt).interacting(diff_bM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W1p65L0p18).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 1.65um and length of 0.25um type bM
ngate_01v8_lvt_bM02W1p65L0p25 = ngate.interacting(gate_01v8_lvt).interacting(diff_bM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W1p65L0p25).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 3.0um and length of 0.15um type bM
ngate_01v8_lvt_bM02W3p00L0p15 = ngate.interacting(gate_01v8_lvt).interacting(diff_bM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W3p00L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 3.0um and length of 0.18um type bM
ngate_01v8_lvt_bM02W3p00L0p18 = ngate.interacting(gate_01v8_lvt).interacting(diff_bM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W3p00L0p18).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 3.0um and length of 0.25um type bM
ngate_01v8_lvt_bM02W3p00L0p25 = ngate.interacting(gate_01v8_lvt).interacting(diff_bM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W3p00L0p25).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 5.0um and length of 0.15um type bM
ngate_01v8_lvt_bM02W5p00L0p15 = ngate.interacting(gate_01v8_lvt).interacting(diff_bM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W5p00L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 5.0um and length of 0.18um type bM
ngate_01v8_lvt_bM02W5p00L0p18 = ngate.interacting(gate_01v8_lvt).interacting(diff_bM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W5p00L0p18).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 5.0um and length of 0.25um type bM
ngate_01v8_lvt_bM02W5p00L0p25 = ngate.interacting(gate_01v8_lvt).interacting(diff_bM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W5p00L0p25).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 1.65um and length of 0.15um type bM
ngate_01v8_lvt_bM04W1p65L0p15 = ngate.interacting(gate_01v8_lvt).interacting(diff_bM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W1p65L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 1.65um and length of 0.18um type bM
ngate_01v8_lvt_bM04W1p65L0p18 = ngate.interacting(gate_01v8_lvt).interacting(diff_bM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W1p65L0p18).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 1.65um and length of 0.25um type bM
ngate_01v8_lvt_bM04W1p65L0p25 = ngate.interacting(gate_01v8_lvt).interacting(diff_bM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W1p65L0p25).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 3.0um and length of 0.15um type bM
ngate_01v8_lvt_bM04W3p00L0p15 = ngate.interacting(gate_01v8_lvt).interacting(diff_bM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W3p00L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 3.0um and length of 0.18um type bM
ngate_01v8_lvt_bM04W3p00L0p18 = ngate.interacting(gate_01v8_lvt).interacting(diff_bM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W3p00L0p18).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 3.0um and length of 0.25um type bM
ngate_01v8_lvt_bM04W3p00L0p25 = ngate.interacting(gate_01v8_lvt).interacting(diff_bM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W3p00L0p25).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 5.0um and length of 0.15um type bM
ngate_01v8_lvt_bM04W5p00L0p15 = ngate.interacting(gate_01v8_lvt).interacting(diff_bM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W5p00L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 5.0um and length of 0.18um type bM
ngate_01v8_lvt_bM04W5p00L0p18 = ngate.interacting(gate_01v8_lvt).interacting(diff_bM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W5p00L0p18).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 5.0um and length of 0.25um type bM
ngate_01v8_lvt_bM04W5p00L0p25 = ngate.interacting(gate_01v8_lvt).interacting(diff_bM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W5p00L0p25).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 1.65um and length of 0.15um type cM
ngate_01v8_lvt_cM02W1p65L0p15 = ngate.interacting(gate_01v8_lvt).interacting(diff_cM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W1p65L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 1.65um and length of 0.18um type cM
ngate_01v8_lvt_cM02W1p65L0p18 = ngate.interacting(gate_01v8_lvt).interacting(diff_cM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W1p65L0p18).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 1.65um and length of 0.25um type cM
ngate_01v8_lvt_cM02W1p65L0p25 = ngate.interacting(gate_01v8_lvt).interacting(diff_cM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W1p65L0p25).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 3.0um and length of 0.15um type cM
ngate_01v8_lvt_cM02W3p00L0p15 = ngate.interacting(gate_01v8_lvt).interacting(diff_cM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W3p00L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 3.0um and length of 0.18um type cM
ngate_01v8_lvt_cM02W3p00L0p18 = ngate.interacting(gate_01v8_lvt).interacting(diff_cM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W3p00L0p18).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 3.0um and length of 0.25um type cM
ngate_01v8_lvt_cM02W3p00L0p25 = ngate.interacting(gate_01v8_lvt).interacting(diff_cM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W3p00L0p25).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 5.0um and length of 0.15um type cM
ngate_01v8_lvt_cM02W5p00L0p15 = ngate.interacting(gate_01v8_lvt).interacting(diff_cM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W5p00L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 5.0um and length of 0.18um type cM
ngate_01v8_lvt_cM02W5p00L0p18 = ngate.interacting(gate_01v8_lvt).interacting(diff_cM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W5p00L0p18).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 5.0um and length of 0.25um type cM
ngate_01v8_lvt_cM02W5p00L0p25 = ngate.interacting(gate_01v8_lvt).interacting(diff_cM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W5p00L0p25).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 1.65um and length of 0.15um type cM
ngate_01v8_lvt_cM04W1p65L0p15 = ngate.interacting(gate_01v8_lvt).interacting(diff_cM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W1p65L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 1.65um and length of 0.18um type cM
ngate_01v8_lvt_cM04W1p65L0p18 = ngate.interacting(gate_01v8_lvt).interacting(diff_cM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W1p65L0p18).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 1.65um and length of 0.25um type cM
ngate_01v8_lvt_cM04W1p65L0p25 = ngate.interacting(gate_01v8_lvt).interacting(diff_cM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W1p65L0p25).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 3.0um and length of 0.15um type cM
ngate_01v8_lvt_cM04W3p00L0p15 = ngate.interacting(gate_01v8_lvt).interacting(diff_cM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W3p00L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 3.0um and length of 0.18um type cM
ngate_01v8_lvt_cM04W3p00L0p18 = ngate.interacting(gate_01v8_lvt).interacting(diff_cM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W3p00L0p18).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 3.0um and length of 0.25um type cM
ngate_01v8_lvt_cM04W3p00L0p25 = ngate.interacting(gate_01v8_lvt).interacting(diff_cM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W3p00L0p25).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 5.0um and length of 0.15um type cM
ngate_01v8_lvt_cM04W5p00L0p15 = ngate.interacting(gate_01v8_lvt).interacting(diff_cM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W5p00L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 5.0um and length of 0.18um type cM
ngate_01v8_lvt_cM04W5p00L0p18 = ngate.interacting(gate_01v8_lvt).interacting(diff_cM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W5p00L0p18).interacting(poly_model)

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 5.0um and length of 0.25um type cM
ngate_01v8_lvt_cM04W5p00L0p25 = ngate.interacting(gate_01v8_lvt).interacting(diff_cM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W5p00L0p25).interacting(poly_model)

# 1.8V RF NMOS transistor with multiplier of 4 width of 3.0um and length of 0.15um type mcM
ngate_01v8_mcM04W3p00L0p15 = ngate.interacting(gate_01v8).interacting(diff_mcM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W3p00L0p15).interacting(poly_model)

# 1.8V RF NMOS transistor with multiplier of 4 width of 5.0um and length of 0.15um type mcM
ngate_01v8_mcM04W5p00L0p15 = ngate.interacting(gate_01v8).interacting(diff_mcM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W5p00L0p15).interacting(poly_model)

# 5V gate 10.5V drain RF NMOS transistor with multiplier of 4 width of 3.0um and length of 0.5um type aM
ngate_g5v0d10v5_aM04W3p00L0p50 = ngate.interacting(gate_g5v0d10v5).interacting(diff_aM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W3p00L0p50).interacting(poly_model)

# 5V gate 10.5V drain RF NMOS transistor with multiplier of 4 width of 5.0um and length of 0.5um type aM
ngate_g5v0d10v5_aM04W5p00L0p50 = ngate.interacting(gate_g5v0d10v5).interacting(diff_aM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W5p00L0p50).interacting(poly_model)

# 5V gate 10.5V drain RF NMOS transistor with multiplier of 4 width of 7.0um and length of 0.5um type aM
ngate_g5v0d10v5_aM04W7p00L0p50 = ngate.interacting(gate_g5v0d10v5).interacting(diff_aM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W7p00L0p50).interacting(poly_model)

# 5V gate 10.5V drain RF NMOS transistor with multiplier of 10 width of 3.0um and length of 0.5um type aM
ngate_g5v0d10v5_aM10W3p00L0p50 = ngate.interacting(gate_g5v0d10v5).interacting(diff_aM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_10W3p00L0p50).interacting(poly_model)

# 5V gate 10.5V drain RF NMOS transistor with multiplier of 10 width of 5.0um and length of 0.5um type aM
ngate_g5v0d10v5_aM10W5p00L0p50 = ngate.interacting(gate_g5v0d10v5).interacting(diff_aM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_10W5p00L0p50).interacting(poly_model)

# 5V gate 10.5V drain RF NMOS transistor with multiplier of 10 width of 7.0um and length of 0.5um type aM
ngate_g5v0d10v5_aM10W7p00L0p50 = ngate.interacting(gate_g5v0d10v5).interacting(diff_aM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_10W7p00L0p50).interacting(poly_model)

# 5V gate 10.5V drain RF NMOS transistor with multiplier of 2 width of 3.0um and length of 0.5um type bM
ngate_g5v0d10v5_bM02W3p00L0p50 = ngate.interacting(gate_g5v0d10v5).interacting(diff_bM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W3p00L0p50).interacting(poly_model)

# 5V gate 10.5V drain RF NMOS transistor with multiplier of 2 width of 5.0um and length of 0.5um type bM
ngate_g5v0d10v5_bM02W5p00L0p50 = ngate.interacting(gate_g5v0d10v5).interacting(diff_bM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_02W5p00L0p50).interacting(poly_model)

# 5V gate 10.5V drain RF NMOS transistor with multiplier of 4 width of 3.0um and length of 0.5um type bM
ngate_g5v0d10v5_bM04W3p00L0p50 = ngate.interacting(gate_g5v0d10v5).interacting(diff_bM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W3p00L0p50).interacting(poly_model)

# 5V gate 10.5V drain RF NMOS transistor with multiplier of 4 width of 5.0um and length of 0.5um type bM
ngate_g5v0d10v5_bM04W5p00L0p50 = ngate.interacting(gate_g5v0d10v5).interacting(diff_bM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W5p00L0p50).interacting(poly_model)

# 5V gate 10.5V drain RF NMOS transistor with multiplier of 4 width of 7.0um and length of 0.5um type bM
ngate_g5v0d10v5_bM04W7p00L0p50 = ngate.interacting(gate_g5v0d10v5).interacting(diff_bM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_04W7p00L0p50).interacting(poly_model)

# 5V gate 10.5V drain RF NMOS transistor with multiplier of 10 width of 3.0um and length of 0.5um type bM
ngate_g5v0d10v5_bM10W3p00L0p50 = ngate.interacting(gate_g5v0d10v5).interacting(diff_bM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_10W3p00L0p50).interacting(poly_model)

# 5V gate 10.5V drain RF NMOS transistor with multiplier of 10 width of 5.0um and length of 0.5um type bM
ngate_g5v0d10v5_bM10W5p00L0p50 = ngate.interacting(gate_g5v0d10v5).interacting(diff_bM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_10W5p00L0p50).interacting(poly_model)

# 5V gate 10.5V drain RF NMOS transistor with multiplier of 10 width of 7.0um and length of 0.5um type bM
ngate_g5v0d10v5_bM10W7p00L0p50 = ngate.interacting(gate_g5v0d10v5).interacting(diff_bM.and(nsdm).outside(nwell).interacting(ngate).not(diff_res)).interacting(diff_10W7p00L0p50).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 2 width of 0.84um and length of 0.15um type aF
pgate_01v8_aF02W0p84L0p15 = pgate.interacting(gate_01v8).interacting(diff_aF.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_02W0p84L0p15).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 2 width of 1.68um and length of 0.15um type aF
pgate_01v8_aF02W1p68L0p15 = pgate.interacting(gate_01v8).interacting(diff_aF.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_02W1p68L0p15).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 2 width of 2.0um and length of 0.15um type aF
pgate_01v8_aF02W2p00L0p15 = pgate.interacting(gate_01v8).interacting(diff_aF.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_02W2p00L0p15).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 2 width of 3.0um and length of 0.15um type aF
pgate_01v8_aF02W3p00L0p15 = pgate.interacting(gate_01v8).interacting(diff_aF.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_02W3p00L0p15).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 2 width of 5.0um and length of 0.15um type aF
pgate_01v8_aF02W5p00L0p15 = pgate.interacting(gate_01v8).interacting(diff_aF.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_02W5p00L0p15).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 4 width of 0.84um and length of 0.15um type aF
pgate_01v8_aF04W0p84L0p15 = pgate.interacting(gate_01v8).interacting(diff_aF.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_04W0p84L0p15).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 4 width of 1.68um and length of 0.15um type aF
pgate_01v8_aF04W1p68L0p15 = pgate.interacting(gate_01v8).interacting(diff_aF.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_04W1p68L0p15).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 4 width of 2.0um and length of 0.15um type aF
pgate_01v8_aF04W2p00L0p15 = pgate.interacting(gate_01v8).interacting(diff_aF.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_04W2p00L0p15).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 4 width of 3.0um and length of 0.15um type aF
pgate_01v8_aF04W3p00L0p15 = pgate.interacting(gate_01v8).interacting(diff_aF.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_04W3p00L0p15).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 4 width of 5.0um and length of 0.15um type aF
pgate_01v8_aF04W5p00L0p15 = pgate.interacting(gate_01v8).interacting(diff_aF.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_04W5p00L0p15).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 6 width of 0.84um and length of 0.15um type aF
pgate_01v8_aF06W0p84L0p15 = pgate.interacting(gate_01v8).interacting(diff_aF.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_06W0p84L0p15).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 6 width of 1.68um and length of 0.15um type aF
pgate_01v8_aF06W1p68L0p15 = pgate.interacting(gate_01v8).interacting(diff_aF.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_06W1p68L0p15).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 6 width of 2.0um and length of 0.15um type aF
pgate_01v8_aF06W2p00L0p15 = pgate.interacting(gate_01v8).interacting(diff_aF.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_06W2p00L0p15).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 6 width of 3.0um and length of 0.15um type aF
pgate_01v8_aF06W3p00L0p15 = pgate.interacting(gate_01v8).interacting(diff_aF.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_06W3p00L0p15).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 8 width of 0.84um and length of 0.15um type aF
pgate_01v8_aF08W0p84L0p15 = pgate.interacting(gate_01v8).interacting(diff_aF.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_08W0p84L0p15).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 8 width of 1.68um and length of 0.15um type aF
pgate_01v8_aF08W1p68L0p15 = pgate.interacting(gate_01v8).interacting(diff_aF.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_08W1p68L0p15).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 2 width of 1.65um and length of 0.15um type aM
pgate_01v8_aM02W1p65L0p15 = pgate.interacting(gate_01v8).interacting(diff_aM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_02W1p65L0p15).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 2 width of 1.65um and length of 0.18um type aM
pgate_01v8_aM02W1p65L0p18 = pgate.interacting(gate_01v8).interacting(diff_aM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_02W1p65L0p18).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 2 width of 1.65um and length of 0.25um type aM
pgate_01v8_aM02W1p65L0p25 = pgate.interacting(gate_01v8).interacting(diff_aM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_02W1p65L0p25).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 2 width of 3.0um and length of 0.15um type aM
pgate_01v8_aM02W3p00L0p15 = pgate.interacting(gate_01v8).interacting(diff_aM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_02W3p00L0p15).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 2 width of 3.0um and length of 0.18um type aM
pgate_01v8_aM02W3p00L0p18 = pgate.interacting(gate_01v8).interacting(diff_aM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_02W3p00L0p18).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 2 width of 3.0um and length of 0.25um type aM
pgate_01v8_aM02W3p00L0p25 = pgate.interacting(gate_01v8).interacting(diff_aM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_02W3p00L0p25).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 2 width of 5.0um and length of 0.15um type aM
pgate_01v8_aM02W5p00L0p15 = pgate.interacting(gate_01v8).interacting(diff_aM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_02W5p00L0p15).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 2 width of 5.0um and length of 0.18um type aM
pgate_01v8_aM02W5p00L0p18 = pgate.interacting(gate_01v8).interacting(diff_aM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_02W5p00L0p18).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 2 width of 5.0um and length of 0.25um type aM
pgate_01v8_aM02W5p00L0p25 = pgate.interacting(gate_01v8).interacting(diff_aM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_02W5p00L0p25).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 4 width of 1.65um and length of 0.15um type aM
pgate_01v8_aM04W1p65L0p15 = pgate.interacting(gate_01v8).interacting(diff_aM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_04W1p65L0p15).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 4 width of 1.65um and length of 0.18um type aM
pgate_01v8_aM04W1p65L0p18 = pgate.interacting(gate_01v8).interacting(diff_aM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_04W1p65L0p18).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 4 width of 1.65um and length of 0.25um type aM
pgate_01v8_aM04W1p65L0p25 = pgate.interacting(gate_01v8).interacting(diff_aM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_04W1p65L0p25).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 4 width of 3.0um and length of 0.15um type aM
pgate_01v8_aM04W3p00L0p15 = pgate.interacting(gate_01v8).interacting(diff_aM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_04W3p00L0p15).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 4 width of 3.0um and length of 0.18um type aM
pgate_01v8_aM04W3p00L0p18 = pgate.interacting(gate_01v8).interacting(diff_aM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_04W3p00L0p18).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 4 width of 3.0um and length of 0.25um type aM
pgate_01v8_aM04W3p00L0p25 = pgate.interacting(gate_01v8).interacting(diff_aM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_04W3p00L0p25).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 4 width of 5.0um and length of 0.15um type aM
pgate_01v8_aM04W5p00L0p15 = pgate.interacting(gate_01v8).interacting(diff_aM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_04W5p00L0p15).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 4 width of 5.0um and length of 0.18um type aM
pgate_01v8_aM04W5p00L0p18 = pgate.interacting(gate_01v8).interacting(diff_aM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_04W5p00L0p18).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 4 width of 5.0um and length of 0.25um type aM
pgate_01v8_aM04W5p00L0p25 = pgate.interacting(gate_01v8).interacting(diff_aM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_04W5p00L0p25).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 2 width of 1.65um and length of 0.15um type bM
pgate_01v8_bM02W1p65L0p15 = pgate.interacting(gate_01v8).interacting(diff_bM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_02W1p65L0p15).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 2 width of 1.65um and length of 0.18um type bM
pgate_01v8_bM02W1p65L0p18 = pgate.interacting(gate_01v8).interacting(diff_bM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_02W1p65L0p18).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 2 width of 1.65um and length of 0.25um type bM
pgate_01v8_bM02W1p65L0p25 = pgate.interacting(gate_01v8).interacting(diff_bM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_02W1p65L0p25).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 2 width of 3.0um and length of 0.15um type bM
pgate_01v8_bM02W3p00L0p15 = pgate.interacting(gate_01v8).interacting(diff_bM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_02W3p00L0p15).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 2 width of 3.0um and length of 0.18um type bM
pgate_01v8_bM02W3p00L0p18 = pgate.interacting(gate_01v8).interacting(diff_bM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_02W3p00L0p18).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 2 width of 3.0um and length of 0.25um type bM
pgate_01v8_bM02W3p00L0p25 = pgate.interacting(gate_01v8).interacting(diff_bM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_02W3p00L0p25).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 2 width of 5.0um and length of 0.15um type bM
pgate_01v8_bM02W5p00L0p15 = pgate.interacting(gate_01v8).interacting(diff_bM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_02W5p00L0p15).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 2 width of 5.0um and length of 0.18um type bM
pgate_01v8_bM02W5p00L0p18 = pgate.interacting(gate_01v8).interacting(diff_bM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_02W5p00L0p18).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 2 width of 5.0um and length of 0.25um type bM
pgate_01v8_bM02W5p00L0p25 = pgate.interacting(gate_01v8).interacting(diff_bM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_02W5p00L0p25).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 4 width of 1.65um and length of 0.15um type bM
pgate_01v8_bM04W1p65L0p15 = pgate.interacting(gate_01v8).interacting(diff_bM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_04W1p65L0p15).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 4 width of 1.65um and length of 0.18um type bM
pgate_01v8_bM04W1p65L0p18 = pgate.interacting(gate_01v8).interacting(diff_bM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_04W1p65L0p18).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 4 width of 1.65um and length of 0.25um type bM
pgate_01v8_bM04W1p65L0p25 = pgate.interacting(gate_01v8).interacting(diff_bM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_04W1p65L0p25).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 4 width of 3.0um and length of 0.15um type bM
pgate_01v8_bM04W3p00L0p15 = pgate.interacting(gate_01v8).interacting(diff_bM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_04W3p00L0p15).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 4 width of 3.0um and length of 0.18um type bM
pgate_01v8_bM04W3p00L0p18 = pgate.interacting(gate_01v8).interacting(diff_bM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_04W3p00L0p18).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 4 width of 3.0um and length of 0.25um type bM
pgate_01v8_bM04W3p00L0p25 = pgate.interacting(gate_01v8).interacting(diff_bM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_04W3p00L0p25).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 4 width of 5.0um and length of 0.15um type bM
pgate_01v8_bM04W5p00L0p15 = pgate.interacting(gate_01v8).interacting(diff_bM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_04W5p00L0p15).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 4 width of 5.0um and length of 0.18um type bM
pgate_01v8_bM04W5p00L0p18 = pgate.interacting(gate_01v8).interacting(diff_bM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_04W5p00L0p18).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 4 width of 5.0um and length of 0.25um type bM
pgate_01v8_bM04W5p00L0p25 = pgate.interacting(gate_01v8).interacting(diff_bM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_04W5p00L0p25).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 4 width of 3.0um and length of 0.15um type hcM
pgate_01v8_hcM04W3p00L0p15 = pgate.interacting(gate_01v8).interacting(diff_hcM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_04W3p00L0p15).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 4 width of 5.0um and length of 0.15um type hcM
pgate_01v8_hcM04W5p00L0p15 = pgate.interacting(gate_01v8).interacting(diff_hcM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_04W5p00L0p15).interacting(poly_model)

# 1.8V RF PMOS transistor low threshold voltage with multiplier of 2 width of 3.0um and length of 0.35um type aM
pgate_01v8_lvt_aM02W3p00L0p35 = pgate.interacting(gate_01v8_lvt).interacting(diff_aM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_02W3p00L0p35).interacting(poly_model)

# 1.8V RF PMOS transistor low threshold voltage with multiplier of 2 width of 3.0um and length of 0.5um type aM
pgate_01v8_lvt_aM02W3p00L0p50 = pgate.interacting(gate_01v8_lvt).interacting(diff_aM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_02W3p00L0p50).interacting(poly_model)

# 1.8V RF PMOS transistor low threshold voltage with multiplier of 2 width of 5.0um and length of 0.35um type aM
pgate_01v8_lvt_aM02W5p00L0p35 = pgate.interacting(gate_01v8_lvt).interacting(diff_aM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_02W5p00L0p35).interacting(poly_model)

# 1.8V RF PMOS transistor low threshold voltage with multiplier of 2 width of 5.0um and length of 0.5um type aM
pgate_01v8_lvt_aM02W5p00L0p50 = pgate.interacting(gate_01v8_lvt).interacting(diff_aM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_02W5p00L0p50).interacting(poly_model)

# 1.8V RF PMOS transistor low threshold voltage with multiplier of 4 width of 3.0um and length of 0.35um type aM
pgate_01v8_lvt_aM04W3p00L0p35 = pgate.interacting(gate_01v8_lvt).interacting(diff_aM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_04W3p00L0p35).interacting(poly_model)

# 1.8V RF PMOS transistor low threshold voltage with multiplier of 4 width of 3.0um and length of 0.5um type aM
pgate_01v8_lvt_aM04W3p00L0p50 = pgate.interacting(gate_01v8_lvt).interacting(diff_aM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_04W3p00L0p50).interacting(poly_model)

# 1.8V RF PMOS transistor low threshold voltage with multiplier of 4 width of 5.0um and length of 0.35um type aM
pgate_01v8_lvt_aM04W5p00L0p35 = pgate.interacting(gate_01v8_lvt).interacting(diff_aM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_04W5p00L0p35).interacting(poly_model)

# 1.8V RF PMOS transistor low threshold voltage with multiplier of 4 width of 5.0um and length of 0.5um type aM
pgate_01v8_lvt_aM04W5p00L0p50 = pgate.interacting(gate_01v8_lvt).interacting(diff_aM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_04W5p00L0p50).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 4 width of 3.0um and length of 0.15um type mcM
pgate_01v8_mcM04W3p00L0p15 = pgate.interacting(gate_01v8).interacting(diff_mcM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_04W3p00L0p15).interacting(poly_model)

# 1.8V RF PMOS transistor with multiplier of 4 width of 5.0um and length of 0.15um type mcM
pgate_01v8_mcM04W5p00L0p15 = pgate.interacting(gate_01v8).interacting(diff_mcM.and(psdm).inside(nwell).interacting(pgate).not(diff_res)).interacting(diff_04W5p00L0p15).interacting(poly_model)

# 5V gate 20V drain RF PMOS transistor with ptap
pgate_5p0v_uhv_withptap = pgate_5p0v_uhv.inside(ptap.holes).with_area(11.96.um, 18.06.um).interacting(pgate_5p0v_uhv.edges.with_length(0.4.um, 0.6.um))
pd_5p0v_uhv_withptap    = pd_5p0v_uhv.inside(ptap.holes)
ps_5p0v_uhv_withptap    = ps_5p0v_uhv.inside(ptap.holes)
psd_5p0v_uhv_withptap   = psd_5p0v_uhv.inside(ptap.holes).interacting(pgate_5p0v_uhv_withptap, 2, 2)

# 5V gate 20V drain RF NMOS transistor AUP
ngate_5p0v_uhv_aup = ngate_5p0v_uhv.inside(ptap.holes).with_area(41.86.um, 48.16.um).interacting(ngate_5p0v_uhv.edges.with_length(1.4.um, 1.6.um))
nd_5p0v_uhv_aup    = nd_5p0v_uhv.inside(ptap.holes)
ns_5p0v_uhv_aup    = ns_5p0v_uhv.inside(ptap.holes)
nsd_5p0v_uhv_aup   = nsd_5p0v_uhv.inside(ptap.holes).interacting(ngate_5p0v_uhv_aup, 2, 2).interacting(met1.extents.not_covering(ngate_5p0v_uhv_aup).not_covering(nsd_5p0v_uhv).not_covering(ptap))

# 5V gate 20V drain RF NMOS transistor with ptap
ngate_5p0v_uhv_withptap = ngate_5p0v_uhv.inside(ptap.holes).with_area(41.86.um, 48.16.um).interacting(ngate_5p0v_uhv.edges.with_length(1.4.um, 1.6.um))
nd_5p0v_uhv_withptap    = nd_5p0v_uhv.inside(ptap.holes)
ns_5p0v_uhv_withptap    = ns_5p0v_uhv.inside(ptap.holes)
nsd_5p0v_uhv_withptap   = nsd_5p0v_uhv.inside(ptap.holes).interacting(ngate_5p0v_uhv_withptap, 2, 2).interacting(met1.extents.covering(ngate_5p0v_uhv_withptap).covering(nsd_5p0v_uhv).covering(ptap))

# 5V gate 20V drain RF NMOS transistor isolated without ptap
ngate_5p0v_uhv_iso_noptap = ngate_5p0v_uhv_iso.not_inside(ptap.holes).with_area(41.86.um, 48.16.um).interacting(ngate_5p0v_uhv_iso.edges.with_length(1.4.um, 1.6.um))
nd_5p0v_uhv_iso_noptap    = nd_5p0v_uhv_iso.not_inside(ptap.holes)
ns_5p0v_uhv_iso_noptap    = ns_5p0v_uhv_iso.not_inside(ptap.holes)
nsd_5p0v_uhv_iso_noptap   = nsd_5p0v_uhv_iso.not_inside(ptap.holes).interacting(ngate_5p0v_uhv_iso_noptap, 2, 2)

# 5V gate 20V drain RF NMOS transistor isolated with ptap
ngate_5p0v_uhv_iso_withptap = ngate_5p0v_uhv_iso.inside(ptap.holes).with_area(41.86.um, 48.16.um).interacting(ngate_5p0v_uhv_iso.edges.with_length(1.4.um, 1.6.um))
nd_5p0v_uhv_iso_withptap    = nd_5p0v_uhv_iso.inside(ptap.holes)
ns_5p0v_uhv_iso_withptap    = ns_5p0v_uhv_iso.inside(ptap.holes)
nsd_5p0v_uhv_iso_withptap   = nsd_5p0v_uhv_iso.inside(ptap.holes).interacting(ngate_5p0v_uhv_iso_withptap, 2, 2).interacting(met1.extents.covering(ngate_5p0v_uhv_iso_withptap).covering(nsd_5p0v_uhv_iso).covering(ptap))

# 5V gate 20V drain RF NMOS transistor native voltage AUP
ngate_5p0v_uhv_nvt_aup = ngate_5p0v_uhv_nvt.inside(ptap.holes).with_area(41.86.um, 48.16.um).interacting(ngate_5p0v_uhv_nvt.edges.with_length(1.4.um, 1.6.um))
nd_5p0v_uhv_nvt_aup    = nd_5p0v_uhv_nvt.inside(ptap.holes)
ns_5p0v_uhv_nvt_aup    = ns_5p0v_uhv_nvt.inside(ptap.holes)
nsd_5p0v_uhv_nvt_aup   = nsd_5p0v_uhv_nvt.inside(ptap.holes).interacting(ngate_5p0v_uhv_nvt_aup, 2, 2).interacting(met1.extents.not_covering(ngate_5p0v_uhv_nvt_aup).not_covering(nsd_5p0v_uhv_nvt).not_covering(ptap))

# 5V gate 20V drain RF NMOS transistor native voltage with ptap
ngate_5p0v_uhv_nvt_withptap = ngate_5p0v_uhv_nvt.inside(ptap.holes).with_area(41.86.um, 48.16.um).interacting(ngate_5p0v_uhv_nvt.edges.with_length(1.4.um, 1.6.um))
nd_5p0v_uhv_nvt_withptap    = nd_5p0v_uhv_nvt.inside(ptap.holes)
ns_5p0v_uhv_nvt_withptap    = ns_5p0v_uhv_nvt.inside(ptap.holes)
nsd_5p0v_uhv_nvt_withptap   = nsd_5p0v_uhv_nvt.inside(ptap.holes).interacting(ngate_5p0v_uhv_nvt_withptap, 2, 2).interacting(met1.extents.covering(ngate_5p0v_uhv_nvt_withptap).covering(nsd_5p0v_uhv_nvt).covering(ptap))

# 5V gate 20V drain RF NMOS transistor native voltage isolated without ptap
ngate_5p0v_uhv_nvt_iso_noptap = ngate_5p0v_uhv_nvt_iso.not_inside(ptap.holes).with_area(41.86.um, 48.16.um).interacting(ngate_5p0v_uhv_nvt_iso.edges.with_length(1.4.um, 1.6.um))
nd_5p0v_uhv_nvt_iso_noptap    = nd_5p0v_uhv_nvt_iso.not_inside(ptap.holes)
ns_5p0v_uhv_nvt_iso_noptap    = ns_5p0v_uhv_nvt_iso.not_inside(ptap.holes)
nsd_5p0v_uhv_nvt_iso_noptap   = nsd_5p0v_uhv_nvt_iso.not_inside(ptap.holes).interacting(ngate_5p0v_uhv_nvt_iso_noptap, 2, 2)

# 5V gate 20V drain RF NMOS transistor native voltage isolated with ptap
ngate_5p0v_uhv_nvt_iso_withptap = ngate_5p0v_uhv_nvt_iso.inside(ptap.holes).with_area(41.86.um, 48.16.um).interacting(ngate_5p0v_uhv_nvt_iso.edges.with_length(1.4.um, 1.6.um))
nd_5p0v_uhv_nvt_iso_withptap    = nd_5p0v_uhv_nvt_iso.inside(ptap.holes)
ns_5p0v_uhv_nvt_iso_withptap    = ns_5p0v_uhv_nvt_iso.inside(ptap.holes)
nsd_5p0v_uhv_nvt_iso_withptap   = nsd_5p0v_uhv_nvt_iso.inside(ptap.holes).interacting(ngate_5p0v_uhv_nvt_iso_withptap, 2, 2).interacting(met1.extents.covering(ngate_5p0v_uhv_nvt_iso_withptap).covering(nsd_5p0v_uhv_nvt_iso).covering(ptap))

# 5V gate 20V drain RF NMOS transistor zero threshold voltage
ngate_5p0v_uhv_zvt_rf = ngate_5p0v_uhv_zvt.inside(ptap.holes).with_area(176.41.um, 183.61.um).interacting(ngate_5p0v_uhv_zvt.edges.with_length(5.9.um, 6.1.um))
nd_5p0v_uhv_zvt_rf    = nd_5p0v_uhv_zvt.inside(ptap.holes)
ns_5p0v_uhv_zvt_rf    = ns_5p0v_uhv_zvt.inside(ptap.holes)
nsd_5p0v_uhv_zvt_rf   = nsd_5p0v_uhv_zvt.inside(ptap.holes).interacting(ngate_5p0v_uhv_zvt_rf, 2, 2)


#================================
# ----- RF BJT DERIVATIONS ------
#================================

logger.info("Starting RF BJT DERIVATIONS")

# 5V NPN with emitter size of 1umx4um nodes DERIVATIONS
npn_5v0_1x4_e = npn_e.with_area(3.51.um, 4.51.um).interacting(npn_e.edges.with_length(3.9.um, 4.1.um)).not_interacting(poly)
npn_5v0_1x4_b = npn_b.interacting(npn_b.extents.interacting(npn_5v0_1x4_e))
npn_5v0_1x4_c = npn_c.interacting(npn_c.extents.interacting(npn_5v0_1x4_e))  

# 5V NPN with emitter size of 1umx8um DERIVATIONS
npn_5v0_1x8_e = npn_e.with_area(7.11.um, 8.91.um).interacting(npn_e.edges.with_length(7.9.um, 8.1.um)).not_interacting(poly)
npn_5v0_1x8_b = npn_b.interacting(npn_b.extents.interacting(npn_5v0_1x8_e))
npn_5v0_1x8_c = npn_c.interacting(npn_c.extents.interacting(npn_5v0_1x8_e))                       

# 5V NPN with emitter size of 2umx2um nodes DERIVATIONS
npn_5v0_2x2_e = npn_e.with_area(3.61.um, 4.41.um).interacting(npn_e.edges.with_length(1.9.um, 2.1.um)).not_interacting(poly)
npn_5v0_2x2_b = npn_b.interacting(npn_b.extents.interacting(npn_5v0_2x2_e))
npn_5v0_2x2_c = npn_c.interacting(npn_c.extents.interacting(npn_5v0_2x2_e))  

# 5V NPN with emitter size of 2umx4um DERIVATIONS
npn_5v0_2x4_e = npn_e.with_area(7.41.um, 8.61.um).interacting(npn_e.edges.with_length(3.9.um, 4.1.um)).not_interacting(poly)
npn_5v0_2x4_b = npn_b.interacting(npn_b.extents.interacting(npn_5v0_2x4_e))
npn_5v0_2x4_c = npn_c.interacting(npn_c.extents.interacting(npn_5v0_2x4_e))                       

# 5V NPN with emitter size of 2umx8um nodes DERIVATIONS
npn_5v0_2x8_e = npn_e.with_area(15.01.um, 17.01.um).interacting(npn_e.edges.with_length(7.9.um, 8.1.um)).not_interacting(poly)
npn_5v0_2x8_b = npn_b.interacting(npn_b.extents.interacting(npn_5v0_2x8_e))
npn_5v0_2x8_c = npn_c.interacting(npn_c.extents.interacting(npn_5v0_2x8_e))  

# 5V NPN with emitter size of 5umx5um DERIVATIONS
npn_5v0_5x5_e = npn_e.with_area(24.01.um, 26.01.um).interacting(npn_e.edges.with_length(4.9.um, 5.1.um)).not_interacting(poly)
npn_5v0_5x5_b = npn_b.interacting(npn_b.extents.interacting(npn_5v0_5x5_e))
npn_5v0_5x5_c = npn_c.interacting(npn_c.extents.interacting(npn_5v0_5x5_e))                       


#================================================
#------------ DEVICES CONNECTIVITY --------------
#================================================

logger.info("Starting SKY130 LVS connectivity setup")

#================================
# ----- GENERAL CONNECTIONS -----
#================================

logger.info("Starting SKY130 LVS connectivity setup (Inter-layer)")

# Inter-layer
connect(sub         ,          ptap)
connect(dnwell      ,          ntap)
connect(nwell       ,          ntap)
connect(ptap        ,         licon)
connect(ntap        ,         licon)
connect(psd         ,         licon)
connect(nsd         ,         licon)
connect(poly_con    ,         licon)
connect(licon       ,        li_con)
connect(li_con      ,          mcon)
connect(mcon        ,      met1_con)
connect(met1_con    ,          via1)
connect(via1        ,      met2_con)
connect(met2_con    ,          via2)
connect(via2        ,     met3_ncap)
connect(met3_ncap   ,          via3)
connect(via3        ,     met4_ncap)
connect(met4_ncap   ,          via4)
connect(via4        ,      met5_con)

logger.info("Starting SKY130 LVS connectivity setup (Attaching labels)")

# Attaching labels
connect(sub         ,      sub_label)
connect(nwell       ,    nwell_label)
connect(tap         ,      tap_label)
connect(diff        ,     diff_label)
connect(poly_con    ,     poly_label)
connect(li_con      ,       li_label)
connect(met1_con    ,     met1_label)
connect(met2_con    ,     met2_label)
connect(met3_ncap   ,     met3_label)
connect(met4_ncap   ,     met4_label)
connect(met5_con    ,     met5_label)
connect(rdl         ,      rdl_label)
connect(pad         ,      pad_label)

# Attaching pins
connect(sub         ,        sub_pin)
connect(nwell       ,      nwell_pin)
connect(poly_con    ,       poly_pin)
connect(li_con      ,         li_pin)
connect(met1_con    ,       met1_pin)
connect(met2_con    ,       met2_pin)
connect(met3_ncap   ,       met3_pin)
connect(met4_ncap   ,       met4_pin)
connect(met5_con    ,       met5_pin)
connect(rdl         ,        rdl_pin)

# Attaching pins & labels
connect(sub_label   ,        sub_pin)
connect(pwell_label ,      pwell_pin)
connect(nwell_label ,      nwell_pin)
connect(poly_label  ,       poly_pin)
connect(li_label    ,         li_pin)
connect(met1_label  ,       met1_pin)
connect(met2_label  ,       met2_pin)
connect(met3_label  ,       met3_pin)
connect(met4_label  ,       met4_pin)
connect(met5_label  ,       met5_pin)
connect(rdl_label   ,        rdl_pin)

logger.info("Starting SKY130 LVS connectivity setup (Global connections)")

# Global
connect_global(sub  , substrate_name)

logger.info("Starting SKY130 LVS connectivity setup (Multifinger Devices)")

# Multifinger Devices
connect_implicit("*")


#================================
# ----- MOSFET CONNECTIONS ------
#================================

logger.info("Starting LVS MOSFET CONNECTIONS")

# ==============
# ---- PMOS ----
# ==============

# 5V gate 16V drain PMOS transistor
connect(pd_5p0v_vhv, licon)
connect(ps_5p0v_vhv, licon)

# 5V gate 20V drain PMOS transistor with ptap
connect(pd_5p0v_uhv, licon)
connect(ps_5p0v_uhv, licon)

# ==============
# ---- NMOS ----
# ==============

# 5V gate 16V drain NMOS transistor
connect(nd_5p0v_vhv, licon)
connect(ns_5p0v_vhv, licon)

# 5V gate 20V drain NMOS transistor
connect(nd_5p0v_uhv, licon)
connect(ns_5p0v_uhv, licon)

# 5V gate 20V drain NMOS transistor isolated
connect(nd_5p0v_uhv_iso, licon)
connect(ns_5p0v_uhv_iso, licon)

# 5V gate 20V drain NMOS transistor native voltage
connect(nd_5p0v_uhv_nvt, licon)
connect(ns_5p0v_uhv_nvt, licon)

# 5V gate 20V drain NMOS transistor zero threshold voltage
connect(nd_5p0v_uhv_zvt, licon)
connect(ns_5p0v_uhv_zvt, licon)


#================================
# ----- MOS ESD CONNECTIONS -----
#================================

logger.info("Starting LVS MOS ESD CONNECTIONS")

#


#================================
# ------ BJT CONNECTIONS --------
#================================

logger.info("Starting LVS BJT CONNECTIONS")

# ==============
# ---- npn ----
# ==============

# npn_5v0_1x1 nodes connections
connect(npn_5v0_1x1_e,licon)
connect(npn_5v0_1x1_b,licon)
connect(npn_5v0_1x1_c,licon)

# npn_5v0_1x2 nodes connections
connect(npn_5v0_1x2_e,licon)
connect(npn_5v0_1x2_b,licon)
connect(npn_5v0_1x2_c,licon)

# npn_11v0_1x1 nodes connections
connect(npn_11v0_1x1_e,licon)
connect(npn_11v0_1x1_b,licon)
connect(npn_11v0_1x1_c,licon)

# ==============
# ---- pnp ----
# ==============

# pnp_5v0_0p68x0p68 connections
connect(pnp_5v0_0p68x0p68_e,licon)
connect(pnp_5v0_0p68x0p68_b,licon)
connect(pnp_5v0_0p68x0p68_c,licon)

# pnp_5v0_3p4x3p4 nodes
connect(pnp_5v0_3p4x3p4_e,licon)
connect(pnp_5v0_3p4x3p4_b,licon)
connect(pnp_5v0_3p4x3p4_c,licon)


#================================
# ----- DIODE CONNECTIONS -------
#================================

logger.info("Starting LVS DIODE CONNECTIONS")

# 5V N+ diffusion diode
connect(ndiff_5v0_terminal_n, licon)
connect(ndiff_5v0_terminal_p, ptap)

# 5V N+ diffusion diode low threshold voltage
connect(ndiff_5v0_lvt_terminal_n, licon)
connect(ndiff_5v0_lvt_terminal_p, ptap)

# 5V N+ diffusion diode native threshold voltage
connect(ndiff_5v0_nvt_terminal_n, licon)
connect(ndiff_5v0_nvt_terminal_p, ptap)

# 11V N+ diffusion diode
connect(ndiff_11v0_terminal_n, licon)
connect(ndiff_11v0_terminal_p, ptap)

# 5V P+ diffusion diode
connect(pdiff_5v0_terminal_n, licon)

# 5V P+ diffusion diode low threshold voltage
connect(pdiff_5v0_lvt_terminal_n, licon)

# 5V P+ diffusion diode high threshold voltage
connect(pdiff_5v0_hvt_terminal_n, licon)

# 11V P+ diffusion diode
connect(pdiff_11v0_terminal_n, licon)


#================================
# ---- ESD DIODE CONNECTIONS ----
#================================

logger.info("Starting LVS ESD DIODE CONNECTIONS")

# ESD 11V N+ diffusion diode
connect(ndiff_11v0_esd_terminal_n, licon)

# ESD 11V N+ diffusion in deep dnwell diode
connect(ndiff_11v0_esd_dnwell_terminal_n, licon)

# ESD 11V P+ diffusion diode
connect(pdiff_11v0_esd_terminal_n, licon)


#================================
# --- PHOTODIODE CONNECTIONS ----
#================================

logger.info("Starting LVS PHOTODIODE CONNECTIONS")

# Photodiode
connect(photodiode_n, licon)
connect(photodiode_p, ptap)


#================================
# ---- RESISTOR DERIVATIONS -----
#================================

logger.info("Starting LVS RESISTOR CONNECTIONS")

# Diffusions and Wells
connect(nplus_cont    , licon)
connect(nplus_hv_cont , licon)
connect(pplus_cont    , licon)
connect(pplus_hv_cont , licon)
connect(pwell_cont    , licon)


#================================
# ---- FUSE DERIVATIONS -----
#================================

logger.info("Starting LVS FUSE CONNECTIONS")
'''
if FUSE == "m2"

  # Metal2 fuse
  connect(met2_con    , via2)

elsif FUSE == "m3"

  # Metal3 fuse
  connect(met3_ncap    , via3)

else

  # Metal4 fuse
  connect(met4_ncap    , via4)

end
'''

#==================================
# ------ MIMCAP CONNECTIONS -------
#==================================

logger.info("Starting LVS MIMCAP CONNECTIONS")

# mim on metal3
connect(capm , via3)
connect(met3_ncap , met3_con)

# mim on metal4
connect(capm2, via4)
connect(met4_ncap , met4_con)


#================================
# ---- VARACTOR CONNECTIONS -----
#================================

logger.info("Starting LVS VARACTOR CONNECTIONS")

# Low threshold voltage varactor
connect(varactor_bulk_lvt, ptap)

# High threshold voltage varactor
connect(varactor_bulk_hvt, ptap)

# High voltage varactor
connect(varactor_bulk_hv, ptap)


#================================
# ----- VPP CAP CONNECTIONS -----
#================================

logger.info("Starting LVS VPP CAP CONNECTIONS")

# General VPP capacitor connections
connect(met1_vpp     ,   met1_con)
connect(met1_vpp     ,   met1_pin)
connect(met1_vpp     , met1_label)

connect(met2_vpp     ,   met2_con)
connect(met2_vpp     ,   met2_pin)
connect(met2_vpp     , met2_label)

connect(met3_vpp     ,  met3_ncap)
connect(met3_vpp     ,   met3_pin)
connect(met3_vpp     , met3_label)

connect(met4_vpp     ,  met4_ncap)
connect(met4_vpp     ,   met4_pin)
connect(met4_vpp     , met4_label)

connect(met5_vpp     ,   met5_con)
connect(met5_vpp     ,   met5_pin)
connect(met5_vpp     , met5_label)


#================================
# ---- RF MOSFET CONNECTIONS ----
#================================

logger.info("Starting LVS RF MOSFET CONNECTIONS")

# 5V gate 20V drain PMOS transistor with ptap
connect(pd_5p0v_uhv_withptap, licon)
connect(ps_5p0v_uhv_withptap, licon)

# 5V gate 20V drain NMOS transistor AUP
connect(nd_5p0v_uhv_aup, licon)
connect(ns_5p0v_uhv_aup, licon)

# 5V gate 20V drain NMOS transistor with ptap
connect(nd_5p0v_uhv_withptap, licon)
connect(ns_5p0v_uhv_withptap, licon)

# 5V gate 20V drain NMOS transistor isolated without ptap
connect(nd_5p0v_uhv_iso_noptap, licon)
connect(ns_5p0v_uhv_iso_noptap, licon)

# 5V gate 20V drain NMOS transistor isolated with ptap
connect(nd_5p0v_uhv_iso_withptap, licon)
connect(ns_5p0v_uhv_iso_withptap, licon)

# 5V gate 20V drain NMOS transistor native voltage AUP
connect(nd_5p0v_uhv_nvt_aup, licon)
connect(ns_5p0v_uhv_nvt_aup, licon)

# 5V gate 20V drain NMOS transistor native voltage with ptap
connect(nd_5p0v_uhv_nvt_withptap, licon)
connect(ns_5p0v_uhv_nvt_withptap, licon)

# 5V gate 20V drain NMOS transistor native voltage isolated without ptap
connect(nd_5p0v_uhv_nvt_iso_noptap, licon)
connect(ns_5p0v_uhv_nvt_iso_noptap, licon)

# 5V gate 20V drain NMOS transistor native voltage isolated with ptap
connect(nd_5p0v_uhv_nvt_iso_withptap, licon)
connect(ns_5p0v_uhv_nvt_iso_withptap, licon)

# 5V gate 20V drain NMOS transistor zero threshold voltage
connect(nd_5p0v_uhv_zvt_rf, licon)
connect(ns_5p0v_uhv_zvt_rf, licon)


#================================
# ----- RF BJT CONNECTIONS ------
#================================

logger.info("Starting LVS RF BJT CONNECTIONS")

# npn_5v0_1x4 nodes connections
connect(npn_5v0_1x4_e,licon)
connect(npn_5v0_1x4_b,licon)
connect(npn_5v0_1x4_c,licon)

# npn_5v0_1x8 nodes connections
connect(npn_5v0_1x8_e,licon)
connect(npn_5v0_1x8_b,licon)
connect(npn_5v0_1x8_c,licon)

# npn_5v0_2x2 nodes connections
connect(npn_5v0_2x2_e,licon)
connect(npn_5v0_2x2_b,licon)
connect(npn_5v0_2x2_c,licon)

# npn_5v0_2x4 nodes connections
connect(npn_5v0_2x4_e,licon)
connect(npn_5v0_2x4_b,licon)
connect(npn_5v0_2x4_c,licon)

# npn_5v0_2x8 nodes connections
connect(npn_5v0_2x8_e,licon)
connect(npn_5v0_2x8_b,licon)
connect(npn_5v0_2x8_c,licon)

# npn_5v0_5x5 nodes connections
connect(npn_5v0_5x5_e,licon)
connect(npn_5v0_5x5_b,licon)
connect(npn_5v0_5x5_c,licon)


#================================================
#------------- DEVICES EXTRACTION ---------------
#================================================

logger.info("Starting SKY130 LVS DEVICES EXTRACTION")

#================================
# ----- MOSFET EXTRACTION -------
#================================

logger.info("Starting MOSFET EXTRACTION")

# ==============
# ---- PMOS ----
# ==============

logger.info("Starting PMOS EXTRACTION")

# 1.8V PMOS transistor standard
logger.info("Extracting 1.8V PMOS transistor standard")
extract_devices(mos4("sky130_fd_pr__pfet_01v8"), { "SD" => psd, "G" => pgate_1p8v, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell })

# 1.8V PMOS transistor low threshold voltage
logger.info("Extracting 1.8V PMOS transistor low threshold voltage")
extract_devices(mos4("sky130_fd_pr__pfet_01v8_lvt"), { "SD" => psd, "G" => pgate_1p8v_lvt,   "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell })

# 1.8V PMOS transistor high threshold voltage
logger.info("Extracting 1.8V PMOS transistor high threshold voltage")
extract_devices(mos4("sky130_fd_pr__pfet_01v8_hvt"), { "SD" => psd, "G" => pgate_1p8v_hvt,   "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell })

# 5V gate 10.5V drain PMOS transistor
logger.info("Extracting 5V gate 10.5V drain PMOS transistor")
extract_devices(mos4("sky130_fd_pr__pfet_g5v0d10v5"), { "SD" => psd, "G" => pgate_5p0v_hv,   "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell })

# 5V gate 16V drain PMOS transistor
logger.info("Extracting 5V gate 16V drain PMOS transistor")
extract_devices(mos4("sky130_fd_pr__pfet_g5v0d16v0"), { "SD" => psd_5p0v_vhv, "G" => pgate_5p0v_vhv, "tS" => ps_5p0v_vhv, "tD" => pd_5p0v_vhv, "tG" => poly_con, "W" => dnwell, "tW" => ntap })

# 5V gate 20V drain PMOS transistor
logger.info("Extracting 5V gate 20V drain PMOS transistor")
extract_devices(mos4("sky130_fd_pr__pfet_20v0"), { "SD" => psd_5p0v_uhv, "G" => pgate_5p0v_uhv, "tS" => ps_5p0v_uhv, "tD" => pd_5p0v_uhv, "tG" => poly_con, "W" => dnwell, "tW" => ntap })

# Pass PMOS transistor
logger.info("Extracting Pass PMOS transistor")
extract_devices(mos4("sky130_fd_pr__special_pfet_pass"), { "SD" => psd, "G" => pgate_pass,   "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell })

# Pass PMOS transistor low leakage
logger.info("Extracting Pass PMOS transistor low leakage")
extract_devices(mos4("sky130_fd_pr__special_pfet_pass_lowleakage"), { "SD" => psd, "G" => pgate_pass_ll,   "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell })

# ==============
# ---- NMOS ----
# ==============

logger.info("Starting NMOS EXTRACTION")

# 1.8V NMOS transistor standard
logger.info("Extracting 1.8V NMOS transistor standard")
extract_devices(mos4("sky130_fd_pr__nfet_01v8"), { "SD" => nsd, "G" => ngate_1p8v, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub })

# 1.8V NMOS transistor low threshold voltage
logger.info("Extracting 1.8V NMOS transistor low threshold voltage")
extract_devices(mos4("sky130_fd_pr__nfet_01v8_lvt"), { "SD" => nsd, "G" => ngate_1p8v_lvt, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub })

# 5V gate 10.5V drain NMOS transistor
logger.info("Extracting 5V gate 10.5V drain NMOS transistor")
extract_devices(mos4("sky130_fd_pr__nfet_g5v0d10v5"), { "SD" => nsd, "G" => ngate_5p0v_hv, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub })

# 5V gate 16V drain NMOS transistor
logger.info("Extracting 5V gate 16V drain NMOS transistor")
extract_devices(mos4("sky130_fd_pr__nfet_g5v0d16v0"), { "SD" => nsd_5p0v_vhv, "G" => ngate_5p0v_vhv, "tS" => ns_5p0v_vhv, "tD" => nd_5p0v_vhv, "tG" => poly_con, "W" => sub, "tW" => ptap })

# 5V gate 20V drain NMOS transistor
logger.info("Extracting 5V gate 20V drain NMOS transistor")
extract_devices(mos4("sky130_fd_pr__nfet_20v0"), { "SD" => nsd_5p0v_uhv, "G" => ngate_5p0v_uhv, "tS" => ns_5p0v_uhv, "tD" => nd_5p0v_uhv, "tG" => poly_con, "W" => sub, "tW" => ptap  })

# 5V gate 20V drain NMOS transistor isolated
logger.info("Extracting 5V gate 20V drain NMOS transistor isolated")
extract_devices(mos4("sky130_fd_pr__nfet_20v0_iso"), { "SD" => nsd_5p0v_uhv_iso, "G" => ngate_5p0v_uhv_iso, "tS" => ns_5p0v_uhv_iso, "tD" => nd_5p0v_uhv_iso, "tG" => poly_con, "W" => sub, "tW" => ptap })

# 5V gate 20V drain NMOS transistor native voltage
logger.info("Extracting 5V gate 20V drain NMOS transistor native voltage")
extract_devices(mos4("sky130_fd_pr__nfet_20v0_nvt"), { "SD" => nsd_5p0v_uhv_nvt, "G" => ngate_5p0v_uhv_nvt, "tS" => ns_5p0v_uhv_nvt, "tD" => nd_5p0v_uhv_nvt, "tG" => poly_con, "W" => sub, "tW" => ptap })

# 5V gate 20V drain NMOS transistor native voltage isolated
logger.info("Extracting 5V gate 20V drain NMOS transistor native voltage isolated")
extract_devices(mos4("sky130_fd_pr__nfet_20v0_nvt_iso"), { "SD" => nsd_5p0v_uhv_nvt_iso, "G" => ngate_5p0v_uhv_nvt_iso, "tS" => ns_5p0v_uhv_nvt_iso, "tD" => nd_5p0v_uhv_nvt_iso, "tG" => poly_con, "W" => sub, "tW" => ptap })

# 5V gate 20V drain NMOS transistor zero threshold voltage
logger.info("Extracting 5V gate 20V drain NMOS transistor zero threshold voltage")
extract_devices(mos4("sky130_fd_pr__nfet_20v0_zvt"), { "SD" => nsd_5p0v_uhv_zvt, "G" => ngate_5p0v_uhv_zvt, "tS" => ns_5p0v_uhv_zvt, "tD" => nd_5p0v_uhv_zvt, "tG" => poly_con, "W" => sub, "tW" => ptap })

# Pass NMOS transistor
logger.info("Extracting Pass NMOS transistor")
extract_devices(mos4("sky130_fd_pr__special_nfet_pass"), { "SD" => nsd, "G" => ngate_pass, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub })

# Pass NMOS transistor low threshold voltage
logger.info("Extracting Pass NMOS transistor low threshold voltage")
extract_devices(mos4("sky130_fd_pr__special_nfet_pass_lvt"), { "SD" => nsd, "G" => ngate_pass_lvt, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub })

# Pass NMOS transistor low leakage
logger.info("Extracting Pass NMOS transistor low leakage")
extract_devices(mos4("sky130_fd_pr__special_nfet_pass_lowleakage"), { "SD" => nsd, "G" => ngate_pass_ll, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub })

# Latch NMOS transistor
logger.info("Extracting Latch NMOS transistor")
extract_devices(mos4("sky130_fd_pr__special_nfet_latch"), { "SD" => nsd, "G" => ngate_latch, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub })

# Latch NMOS transistor low leakage
logger.info("Extracting Latch NMOS transistor low leakage")
extract_devices(mos4("sky130_fd_pr__special_nfet_latch_lowleakage"), { "SD" => nsd, "G" => ngate_latch_ll, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub })

# Flash pass NMOS transistor
logger.info("Extracting Flash pass NMOS transistor")
extract_devices(mos4("sky130_fd_pr__special_nfet_pass_flash"), { "SD" => nsd, "G" => ngate_flash_pass, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub })

# Flash pass NMOS transistor low leakage
logger.info("Extracting Flash pass NMOS transistor low leakage")
extract_devices(mos4("sky130_fd_pr__special_nfet_pass_flash_ll"), { "SD" => nsd, "G" => ngate_flash_pass_ll, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub })

# 3.3V NMOS transistor native voltage
logger.info("Extracting 3.3V NMOS transistor native voltage")
extract_devices(mos4("sky130_fd_pr__nfet_03v3_nvt"), { "SD" => nsd, "G" => ngate_3p0v_nvt, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub })

# 5V NMOS transistor native voltage
logger.info("Extracting 5V NMOS transistor native voltage")
extract_devices(mos4("sky130_fd_pr__nfet_05v0_nvt"), { "SD" => nsd, "G" => ngate_5p0v_nvt, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub })


#================================
# ----- MOS ESD EXTRACTION ------
#================================

logger.info("Starting MOS ESD EXTRACTION")

# ==============
# ---- PMOS ----
# ==============

logger.info("Starting PMOS ESD EXTRACTION")

# 5V gate 10.5V drain ESD PMOS transistor
logger.info("Extracting 5V gate 10.5V drain ESD PMOS transistor")
extract_devices(mos4("sky130_fd_pr__esd_pfet_g5v0d10v5"), { "SD" => psd, "G" => pgate_5p0v_hv_esd, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell })

# ==============
# ---- NMOS ----
# ==============

logger.info("Starting NMOS ESD EXTRACTION")

# 1.8V ESD NMOS transistor standard
logger.info("Extracting 1.8V ESD NMOS transistor standard")
extract_devices(mos4("sky130_fd_pr__esd_nfet_01v8"), { "SD" => nsd, "G" => ngate_1p8v_esd, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub })

# 5V gate 10.5V drain NMOS transistor
logger.info("Extracting 5V gate 10.5V drain ESD NMOS transistor")
extract_devices(mos4("sky130_fd_pr__esd_nfet_g5v0d10v5"), { "SD" => nsd, "G" => ngate_5p0v_hv_esd, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub })

# 5V gate 10.5V drain NMOS transistor native voltage
logger.info("Extracting 5V gate 10.5V drain ESD NMOS transistor native voltage")
extract_devices(mos4("sky130_fd_pr__esd_nfet_g5v0d10v5_nvt"), { "SD" => nsd, "G" => ngate_5p0v_hv_esd_nvt, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub })

# 5V NMOS transistor native voltage
logger.info("Extracting 5V ESD NMOS transistor native voltage")
extract_devices(mos4("sky130_fd_pr__nfet_05v0_nvt"), { "SD" => nsd, "G" => ngate_5p0v_nvt_esd, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub })



#================================
# ------- BJT EXTRACTION --------
#================================

logger.info("Starting BJT EXTRACTION")

# ====================
# ------ NPN --------
# ====================

logger.info("Starting NPN BJT EXTRACTION")

# sky130_fd_pr__npn_05v5_W1p00L1p00 BJT
ignore_parameter("sky130_fd_pr__npn_05v5_W1p00L1p00","AE")
logger.info("Extracting sky130_fd_pr__npn_05v5_W1p00L1p00 BJT")
extract_devices(bjt4("sky130_fd_pr__npn_05v5_W1p00L1p00"), { "C" => npn_5v0_1x1_c.extents , "B" => npn_5v0_1x1_b.extents , "E" => npn_5v0_1x1_e,"S" => sub.extents,
                                  "tC" => npn_5v0_1x1_c , "tB" => npn_5v0_1x1_b, "tE" => npn_5v0_1x1_e, "tS" => sub })

# sky130_fd_pr__npn_05v5_W1p00L2p00 BJT
ignore_parameter("sky130_fd_pr__npn_05v5_W1p00L2p00","AE")
logger.info("Extracting sky130_fd_pr__npn_05v5_W1p00L2p00 BJT")
extract_devices(bjt4("sky130_fd_pr__npn_05v5_W1p00L2p00"), { "C" => npn_5v0_1x2_c.extents , "B" => npn_5v0_1x2_b.extents , "E" => npn_5v0_1x2_e,"S" => sub.extents,
                                "tC" => npn_5v0_1x2_c , "tB" => npn_5v0_1x2_b, "tE" => npn_5v0_1x2_e, "tS" => sub })

# sky130_fd_pr__npn_11v0_W1p00L1p00 BJT
ignore_parameter("sky130_fd_pr__npn_11v0_W1p00L1p00","AE")
logger.info("Extracting sky130_fd_pr__npn_11v0_W1p00L1p00 BJT")
extract_devices(bjt4("sky130_fd_pr__npn_11v0_W1p00L1p00"), { "C" => npn_11v0_1x1_c.extents , "B" => npn_11v0_1x1_b.extents , "E" => npn_11v0_1x1_e,"S" => sub.extents,
                                  "tC" => npn_11v0_1x1_c , "tB" => npn_11v0_1x1_b, "tE" => npn_11v0_1x1_e, "tS" => sub })

# ====================
# ------- PNP --------
# ====================

logger.info("Starting PNP BJT EXTRACTION")

# sky130_fd_pr__pnp_05v5_W0p68L0p68 BJT
ignore_parameter("sky130_fd_pr__pnp_05v5_W0p68L0p68","AE")
logger.info("Extracting sky130_fd_pr__pnp_05v5_W0p68L0p68 BJT")
extract_devices(bjt4("sky130_fd_pr__pnp_05v5_W0p68L0p68"), { "C" => pnp_5v0_0p68x0p68_c.extents , "B" => pnp_5v0_0p68x0p68_b.extents , "E" => pnp_5v0_0p68x0p68_e,"S" => sub.extents,
                                  "tC" => pnp_5v0_0p68x0p68_c , "tB" => pnp_5v0_0p68x0p68_b, "tE" => pnp_5v0_0p68x0p68_e, "tS" => sub })

# sky130_fd_pr__pnp_05v5_W3p40L3p40 BJT
ignore_parameter("sky130_fd_pr__pnp_05v5_W3p40L3p40","AE")
logger.info("Extracting sky130_fd_pr__pnp_05v5_W3p40L3p40 BJT")
extract_devices(bjt4("sky130_fd_pr__pnp_05v5_W3p40L3p40"), { "C" => pnp_5v0_3p4x3p4_c.extents , "B" => pnp_5v0_3p4x3p4_b.extents , "E" => pnp_5v0_3p4x3p4_e,"S" => sub.extents,
                                "tC" => pnp_5v0_3p4x3p4_c , "tB" => pnp_5v0_3p4x3p4_b, "tE" => pnp_5v0_3p4x3p4_e, "tS" => sub })

                                
#================================
# ------ DIODE EXTRACTION -------
#================================

logger.info("Starting DIODE EXTRACTION")

# 5V N+ diffusion diode
logger.info("Extracting 5V N+ diffusion diode")
extract_devices(diode("sky130_fd_pr__diode_pw2nd_05v5", Diode), { "N" => ndiff_5v0_terminal_n , "P" => ndiff_5v0_terminal_p})

# 5V N+ diffusion diode low threshold voltage
logger.info("Extracting 5V N+ diffusion diode low threshold voltage")
extract_devices(diode("sky130_fd_pr__diode_pw2nd_05v5_lvt", Diode), { "N" => ndiff_5v0_lvt_terminal_n , "P" => ndiff_5v0_lvt_terminal_p})

# 5V N+ diffusion diode native threshold voltage
logger.info("Extracting 5V N+ diffusion diode native threshold voltage")
extract_devices(diode("sky130_fd_pr__diode_pw2nd_05v5_nvt", Diode), { "N" => ndiff_5v0_nvt_terminal_n , "P" => ndiff_5v0_nvt_terminal_p})

# 11V N+ diffusion diode
logger.info("Extracting 11V N+ diffusion diode")
extract_devices(diode("sky130_fd_pr__diode_pw2nd_11v0", Diode), { "N" => ndiff_11v0_terminal_n , "P" => ndiff_11v0_terminal_p})

# 5V P+ diffusion diode
logger.info("Extracting 5V P+ diffusion diode")
extract_devices(diode("sky130_fd_pr__diode_pd2nw_05v5", Diode), { "N" => pdiff_5v0_terminal_n , "P" => nwell})

# 5V P+ diffusion diode low threshold voltage
logger.info("Extracting5V P+ diffusion diode low threshold voltage")
extract_devices(diode("sky130_fd_pr__diode_pd2nw_05v5_lvt", Diode), { "N" => pdiff_5v0_lvt_terminal_n , "P" => nwell})

# 5V P+ diffusion diode high threshold voltage
logger.info("Extracting 5V P+ diffusion diode high threshold voltage")
extract_devices(diode("sky130_fd_pr__diode_pd2nw_05v5_hvt", Diode), { "N" => pdiff_5v0_hvt_terminal_n , "P" => nwell})

# 11V P+ diffusion diode
logger.info("Extracting 11V P+ diffusion diode")
extract_devices(diode("sky130_fd_pr__diode_pd2nw_11v0", Diode), { "N" => pdiff_11v0_terminal_n , "P" => nwell})


#================================
# ---- ESD DIODE EXTRACTIONS ----
#================================

logger.info("Starting ESD DIODE EXTRACTION")

# ESD 11V N+ diffusion diode
logger.info("Extracting 11V N+ diffusion diode")
extract_devices(diode("sky130_fd_pr__esd_diode_pw2nd_11v0", Diode), { "N" => ndiff_11v0_esd_terminal_n , "P" => sub})

# ESD 11V N+ diffusion in deep dnwell diode
logger.info("Extracting 11V N+ diffusion in deep dnwell diode")
extract_devices(diode("sky130_fd_pr__esd_diode_dw_pw2nd_11v0", Diode), { "N" => ndiff_11v0_esd_dnwell_terminal_n , "P" => dnwell})

# ESD 11V P+ diffusion diode
logger.info("Extracting ESD 11V P+ diffusion diode")
extract_devices(diode("sky130_fd_pr__esd_diode_pd2nw_11v0", Diode), { "N" => pdiff_11v0_esd_terminal_n , "P" => nwell})


#================================
#---- PHOTODIODE EXTRACTIONS ----
#================================

logger.info("Starting PHOTODIODE EXTRACTION")

# Photodiode
logger.info("Extracting Photodiode")
extract_devices(diode("sky130_fd_pr__photodiode"), { "N" => photodiode_n , "P" => photodiode_p})
ignore_parameter("sky130_fd_pr__photodiode","A")
ignore_parameter("sky130_fd_pr__photodiode","p")


#================================
# ---- RESISTOR EXTRACTIONS -----
#================================

logger.info("Starting RESISTOR EXTRACTION")

# ===============
# --DIFF & WELL--
# ===============

# sky130_fd_pr__res_generic_nd
logger.info("Extracting sky130_fd_pr__res_generic_nd device")
extract_devices(resistor_with_bulk("sky130_fd_pr__res_generic_nd", 120, BResistor), { "R" => nplus_layer, "C" => nplus_cont, "W" => sub})

# sky130_fd_pr__res_generic_nd
logger.info("Extracting sky130_fd_pr__res_generic_nd device")
extract_devices(resistor_with_bulk("sky130_fd_pr__res_generic_nd_hv", 120, BResistor), { "R" => nplus_hv_layer, "C" => nplus_hv_cont, "W" => sub})

# sky130_fd_pr__res_generic_pd
logger.info("Extracting sky130_fd_pr__res_generic_pd device")
extract_devices(resistor_with_bulk("sky130_fd_pr__res_generic_pd", 197, BResistor), { "R" => pplus_layer, "C" => pplus_cont, "W" => nwell})

# sky130_fd_pr__res_generic_pd
logger.info("Extracting sky130_fd_pr__res_generic_pd device")
extract_devices(resistor_with_bulk("sky130_fd_pr__res_generic_pd_hv", 197, BResistor), { "R" => pplus_hv_layer, "C" => pplus_hv_cont, "W" => nwell})

# sky130_fd_pr__res_iso_pw
logger.info("Extracting sky130_fd_pr__res_iso_pw device")
extract_devices(resistor_with_bulk("sky130_fd_pr__res_iso_pw", 3050, BResistor), { "R" => pwell_layer, "C" => pwell_cont, "W" => dnwell})

# ==============
# ---- POLY ----
# ==============

# sky130_fd_pr__res_generic_po
logger.info("Extracting sky130_fd_pr__res_generic_po device")
extract_devices(resistor_with_bulk("sky130_fd_pr__res_generic_po", 48.2, BResistor), { "R" => poly_layer, "C" => poly_con, "W" => sub})

# sky130_fd_pr__res_high_po_0p35
logger.info("Extracting sky130_fd_pr__res_high_po_0p35 device")
extract_devices(resistor_with_bulk("sky130_fd_pr__res_high_po_0p35", 319.8, BResistor), { "R" => poly_high_0p35, "C" => poly_con, "W" => sub})

# sky130_fd_pr__res_high_po_0p69
logger.info("Extracting sky130_fd_pr__res_high_po_0p69 device")
extract_devices(resistor_with_bulk("sky130_fd_pr__res_high_po_0p69", 319.8, BResistor), { "R" => poly_high_0p69, "C" => poly_con, "W" => sub})

# sky130_fd_pr__res_high_po_1p41
logger.info("Extracting sky130_fd_pr__res_high_po_1p41 device")
extract_devices(resistor_with_bulk("sky130_fd_pr__res_high_po_1p41", 319.8, BResistor), { "R" => poly_high_1p41, "C" => poly_con, "W" => sub})

# sky130_fd_pr__res_high_po_2p85
logger.info("Extracting sky130_fd_pr__res_high_po_2p85 device")
extract_devices(resistor_with_bulk("sky130_fd_pr__res_high_po_2p85", 319.8, BResistor), { "R" => poly_high_2p85, "C" => poly_con, "W" => sub})

# sky130_fd_pr__res_high_po_5p73
logger.info("Extracting sky130_fd_pr__res_high_po_5p73 device")
extract_devices(resistor_with_bulk("sky130_fd_pr__res_high_po_5p73", 319.8, BResistor), { "R" => poly_high_5p73, "C" => poly_con, "W" => sub})

# sky130_fd_pr__res_xhigh_po_0p35
logger.info("Extracting sky130_fd_pr__res_xhigh_po_0p35 device")
extract_devices(resistor_with_bulk("sky130_fd_pr__res_xhigh_po_0p35", 2000, BResistor), { "R" => poly_xhigh_0p35, "C" => poly_con, "W" => sub})

# sky130_fd_pr__res_xhigh_po_0p69
logger.info("Extracting sky130_fd_pr__res_xhigh_po_0p69 device")
extract_devices(resistor_with_bulk("sky130_fd_pr__res_xhigh_po_0p69", 2000, BResistor), { "R" => poly_xhigh_0p69, "C" => poly_con, "W" => sub})

# sky130_fd_pr__res_xhigh_po_1p41
logger.info("Extracting sky130_fd_pr__res_xhigh_po_1p41 device")
extract_devices(resistor_with_bulk("sky130_fd_pr__res_xhigh_po_1p41", 2000, BResistor), { "R" => poly_xhigh_1p41, "C" => poly_con, "W" => sub})

# sky130_fd_pr__res_xhigh_po_2p85
logger.info("Extracting sky130_fd_pr__res_xhigh_po_2p85 device")
extract_devices(resistor_with_bulk("sky130_fd_pr__res_xhigh_po_2p85", 2000, BResistor), { "R" => poly_xhigh_2p85, "C" => poly_con, "W" => sub})

# sky130_fd_pr__res_xhigh_po_5p73
logger.info("Extracting sky130_fd_pr__res_xhigh_po_5p73 device")
extract_devices(resistor_with_bulk("sky130_fd_pr__res_xhigh_po_5p73", 2000, BResistor), { "R" => poly_xhigh_5p73, "C" => poly_con, "W" => sub})

# ===============
# ---- METAL ----
# ===============

# sky130_fd_pr__res_generic_l1
logger.info("Extracting sky130_fd_pr__res_generic_l1 device")
extract_devices(resistor("sky130_fd_pr__res_generic_l1", 12.2, NResistor), { "R" => li_res_layer, "C" => li_con })

# sky130_fd_pr__res_generic_m1
logger.info("Extracting sky130_fd_pr__res_generic_m1 device")
extract_devices(resistor("sky130_fd_pr__res_generic_m1", 120, NResistor), { "R" => met1_res_layer, "C" => met1_con })

# sky130_fd_pr__res_generic_m2
logger.info("Extracting sky130_fd_pr__res_generic_m2 device")
extract_devices(resistor("sky130_fd_pr__res_generic_m2", 120, NResistor), { "R" => met2_res_layer, "C" => met2_con })

# sky130_fd_pr__res_generic_m3
logger.info("Extracting sky130_fd_pr__res_generic_m3 device")
extract_devices(resistor("sky130_fd_pr__res_generic_m3", 47, NResistor), { "R" => met3_res_layer, "C" => met3_ncap })

# sky130_fd_pr__res_generic_m4
logger.info("Extracting sky130_fd_pr__res_generic_m4 device")
extract_devices(resistor("sky130_fd_pr__res_generic_m4", 47, NResistor), { "R" => met4_res_layer, "C" => met4_ncap })

# sky130_fd_pr__res_generic_m5
logger.info("Extracting sky130_fd_pr__res_generic_m5 device")
extract_devices(resistor("sky130_fd_pr__res_generic_m5", 29, NResistor), { "R" => met5_res_layer, "C" => met5_con })


#==================================
# ------- FUSE EXTRACTION -------
#==================================

logger.info("Starting FUSE EXTRACTION")

if FUSE == "m2"

  # sky130_fd_pr__fuse_m2
  logger.info("Extracting sky130_fd_pr__fuse_m2 device")
  extract_devices(resistor("sky130_fd_pr__fuse_m2", 120, NResistor), { "R" => met2_fuse_res_layer, "C" => met2_con })

elsif FUSE == "m3"

  # sky130_fd_pr__fuse_m3
  logger.info("Extracting sky130_fd_pr__fuse_m3 device")
  extract_devices(resistor("sky130_fd_pr__fuse_m3", 47, NResistor), { "R" => met3_fuse_res_layer, "C" => met3_ncap })

else

  # sky130_fd_pr__fuse_m4
  logger.info("Extracting sky130_fd_pr__fuse_m4 device")
  extract_devices(resistor("sky130_fd_pr__fuse_m4", 47, NResistor), { "R" => met4_fuse_res_layer, "C" => met4_ncap })

end

#==================================
# ------- MIMCAP EXTRACTION -------
#==================================

logger.info("Starting MIMCAP EXTRACTION")

# sky130_fd_pr__model__cap_mim capacitor
logger.info("Extracting sky130_fd_pr__model__cap_mim device")
extract_devices(capacitor("sky130_fd_pr__model__cap_mim", 2e-15, MIMCap), { "P1" => met3_con, "P2" => capm })


# sky130_fd_pr__model__cap_mim_m4 capacitor
logger.info("Extracting sky130_fd_pr__model__cap_mim_m4 device")
extract_devices(capacitor("sky130_fd_pr__model__cap_mim_m4", 2e-15, MIMCap), { "P1" => met4_con, "P2" => capm2 })



#==================================
# ------- VARACTOR EXTRACTION -------
#==================================

logger.info("Starting VARACTOR EXTRACTION")

# Low threshold voltage varactor
logger.info("Extracting low threshold voltage varactor")
extract_devices(capacitor_with_bulk("sky130_fd_pr__cap_var_lvt", 4.4e-15, VarCap), { "P1" => varactor_gate_lvt, "P2" => varactor_nsd_lvt, "W" => varactor_bulk_lvt, "tA" => poly_con, "tB" => ntap})

# High threshold voltage varactor
logger.info("Extracting high threshold voltage varactor")
extract_devices(capacitor_with_bulk("sky130_fd_pr__cap_var_hvt", 4.4e-15, VarCap), { "P1" => varactor_gate_hvt, "P2" => varactor_nsd_hvt, "W" => varactor_bulk_hvt, "tA" => poly_con, "tB" => ntap})

# High voltage varactor
logger.info("Extracting high voltage varactor")
extract_devices(capacitor_with_bulk("sky130_fd_pr__cap_var_hv", 4.4e-15, VarCap), { "P1" => varactor_gate_hv, "P2" => varactor_nsd_hv, "W" => varactor_bulk_hv, "tA" => poly_con, "tB" => ntap})


#==================================
# ------ VPP CAP EXTRACTION -------
#==================================

logger.info("Starting VPP CAP EXTRACTION")

# VPP capacitor with dimensions of 2.4um x 4.6um and with layers of m1m2 and noshield
logger.info("Extracting sky130_fd_pr__cap_vpp_02p4x04p6_m1m2_noshield")
extract_devices(Custom3TerminalExtractor::new("sky130_fd_pr__cap_vpp_02p4x04p6_m1m2_noshield"), {"C" => met2_vpp, "M" => vpp_02p4x04p6_m1m2_noshield_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 2.7um x 6.1um and with layers of m1m2m3m4 and shieldl1
logger.info("Extracting sky130_fd_pr__cap_vpp_02p7x06p1_m1m2m3m4_shieldl1_fingercap")
extract_devices(Custom3TerminalExtractor::new("sky130_fd_pr__cap_vpp_02p7x06p1_m1m2m3m4_shieldl1_fingercap"), {"C" => met2_vpp, "M" => vpp_02p7x06p1_m1m2m3m4_shieldl1_fingercap_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 2.7um x 11.1um and with layers of m1m2m3m4 and shieldl1
logger.info("Extracting sky130_fd_pr__cap_vpp_02p7x11p1_m1m2m3m4_shieldl1_fingercap")
extract_devices(Custom3TerminalExtractor::new("sky130_fd_pr__cap_vpp_02p7x11p1_m1m2m3m4_shieldl1_fingercap"), {"C" => met2_vpp, "M" => vpp_02p7x11p1_m1m2m3m4_shieldl1_fingercap_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 2.7um x 21.1um and with layers of m1m2m3m4 and shieldl1
logger.info("Extracting sky130_fd_pr__cap_vpp_02p7x21p1_m1m2m3m4_shieldl1_fingercap")
extract_devices(Custom3TerminalExtractor::new("sky130_fd_pr__cap_vpp_02p7x21p1_m1m2m3m4_shieldl1_fingercap"), {"C" => met2_vpp, "M" => vpp_02p7x21p1_m1m2m3m4_shieldl1_fingercap_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 2.7um x 41.1um and with layers of m1m2m3m4 and shieldl1
logger.info("Extracting sky130_fd_pr__cap_vpp_02p7x41p1_m1m2m3m4_shieldl1_fingercap")
extract_devices(Custom3TerminalExtractor::new("sky130_fd_pr__cap_vpp_02p7x41p1_m1m2m3m4_shieldl1_fingercap"), {"C" => met2_vpp, "M" => vpp_02p7x41p1_m1m2m3m4_shieldl1_fingercap_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 2.9um x 6.1um and with layers of m1m2m3m4 and shieldl1
logger.info("Extracting sky130_fd_pr__cap_vpp_02p9x06p1_m1m2m3m4_shieldl1_fingercap2")
extract_devices(Custom3TerminalExtractor::new("sky130_fd_pr__cap_vpp_02p9x06p1_m1m2m3m4_shieldl1_fingercap2"), {"C" => met2_vpp, "M" => vpp_02p9x06p1_m1m2m3m4_shieldl1_fingercap2_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 3.9um x 3.9um and with layers of m1m2 and shieldl1 with floatm3
logger.info("Extracting sky130_fd_pr__cap_vpp_03p9x03p9_m1m2_shieldl1_floatm3")
extract_devices(Custom4TerminalExtractor::new("sky130_fd_pr__cap_vpp_03p9x03p9_m1m2_shieldl1_floatm3"), {"C1" => met2_vpp, "C2" => met3_vpp, "M" => vpp_03p9x03p9_m1m2_shieldl1_floatm3_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 4.4um x 4.6um and with layers of l1m1m2 and noshield
logger.info("Extracting sky130_fd_pr__cap_vpp_04p4x04p6_l1m1m2_noshield")
extract_devices(Custom3TerminalExtractor::new("sky130_fd_pr__cap_vpp_04p4x04p6_l1m1m2_noshield"), {"C" => met2_vpp, "M" => vpp_04p4x04p6_l1m1m2_noshield_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 4.4um x 4.6um and with layers of l1m1m2 and noshield
logger.info("Extracting sky130_fd_pr__cap_vpp_04p4x04p6_l1m1m2_noshield_o2subcell")
extract_devices(Custom3TerminalExtractor::new("sky130_fd_pr__cap_vpp_04p4x04p6_l1m1m2_noshield_o2subcell"), {"C" => met2_vpp, "M" => vpp_04p4x04p6_l1m1m2_noshield_o2subcell_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 4.4um x 4.6um and with layers of l1m1m2 and shieldpo with floatm3
logger.info("Extracting sky130_fd_pr__cap_vpp_04p4x04p6_l1m1m2_shieldpo_floatm3")
extract_devices(Custom4TerminalExtractor::new("sky130_fd_pr__cap_vpp_04p4x04p6_l1m1m2_shieldpo_floatm3"), {"C1" => met2_vpp, "C2" => met3_vpp, "M" => vpp_04p4x04p6_l1m1m2_shieldpo_floatm3_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 4.4um x 4.6um and with layers of m1m2m3 and shieldl1
logger.info("Extracting sky130_fd_pr__cap_vpp_04p4x04p6_m1m2m3_shieldl1")
extract_devices(Custom3TerminalExtractor::new("sky130_fd_pr__cap_vpp_04p4x04p6_m1m2m3_shieldl1"), {"C" => met2_vpp, "M" => vpp_04p4x04p6_m1m2m3_shieldl1_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 4.4um x 4.6um and with layers of m1m2m3 and shieldl1m5 with floatm4
logger.info("Extracting sky130_fd_pr__cap_vpp_04p4x04p6_m1m2m3_shieldl1m5_floatm4")
extract_devices(Custom4TerminalExtractor::new("sky130_fd_pr__cap_vpp_04p4x04p6_m1m2m3_shieldl1m5_floatm4"), {"C1" => met2_vpp, "C2" => met5_vpp, "M" => vpp_04p4x04p6_m1m2m3_shieldl1m5_floatm4_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 4.4um x 4.6um and with layers of m1m2m3 and shieldl1m5 with floatm4
logger.info("Extracting sky130_fd_pr__cap_vpp_04p4x04p6_m1m2m3_shieldl1m5_floatm4_top")
extract_devices(Custom4TerminalExtractor::new("sky130_fd_pr__cap_vpp_04p4x04p6_m1m2m3_shieldl1m5_floatm4_top"), {"C1" => met2_vpp, "C2" => met5_vpp, "M" => vpp_04p4x04p6_m1m2m3_shieldl1m5_floatm4_top_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 4.4um x 4.6um and with layers of m1m2 and noshield
logger.info("Extracting sky130_fd_pr__cap_vpp_04p4x04p6_m1m2_noshield")
extract_devices(Custom3TerminalExtractor::new("sky130_fd_pr__cap_vpp_04p4x04p6_m1m2_noshield"), {"C" => met2_vpp, "M" => vpp_04p4x04p6_m1m2_noshield_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 4.4um x 4.6um and with layers of m1m2 and noshield
logger.info("Extracting sky130_fd_pr__cap_vpp_04p4x04p6_m1m2_noshield_o2")
extract_devices(Custom3TerminalExtractor::new("sky130_fd_pr__cap_vpp_04p4x04p6_m1m2_noshield_o2"), {"C" => met2_vpp, "M" => vpp_04p4x04p6_m1m2_noshield_o2_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 4.4um x 4.6um and with layers of m1m2 and shieldl1
logger.info("Extracting sky130_fd_pr__cap_vpp_04p4x04p6_m1m2_shieldl1")
extract_devices(Custom3TerminalExtractor::new("sky130_fd_pr__cap_vpp_04p4x04p6_m1m2_shieldl1"), {"C" => met2_vpp, "M" => vpp_04p4x04p6_m1m2_shieldl1_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 5.9um x 5.9um and with layers of m1m2m3m4 and shieldl1
logger.info("Extracting sky130_fd_pr__cap_vpp_05p9x05p9_m1m2m3m4_shieldl1_wafflecap")
extract_devices(Custom3TerminalExtractor::new("sky130_fd_pr__cap_vpp_05p9x05p9_m1m2m3m4_shieldl1_wafflecap"), {"C" => met2_vpp, "M" => vpp_05p9x05p9_m1m2m3m4_shieldl1_wafflecap_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 6.8um x 6.1um and with layers of l1m1m2m3 and shieldpom4
logger.info("Extracting sky130_fd_pr__cap_vpp_06p8x06p1_l1m1m2m3_shieldpom4")
extract_devices(Custom4TerminalExtractor::new("sky130_fd_pr__cap_vpp_06p8x06p1_l1m1m2m3_shieldpom4"), {"C1" => met2_vpp, "C2" => met4_vpp, "M" => vpp_06p8x06p1_l1m1m2m3_shieldpom4_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 6.8um x 6.1um and with layers of l1m1m2m3 and shieldpom4
logger.info("Extracting sky130_fd_pr__cap_vpp_06p8x06p1_l1m1m2m3_shieldpom4_top")
extract_devices(Custom4TerminalExtractor::new("sky130_fd_pr__cap_vpp_06p8x06p1_l1m1m2m3_shieldpom4_top"), {"C1" => met2_vpp, "C2" => met4_vpp, "M" => vpp_06p8x06p1_l1m1m2m3_shieldpom4_top_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 6.8um x 6.1um and with layers of m1m2m3 and shieldl1m4
logger.info("Extracting sky130_fd_pr__cap_vpp_06p8x06p1_m1m2m3_shieldl1m4")
extract_devices(Custom4TerminalExtractor::new("sky130_fd_pr__cap_vpp_06p8x06p1_m1m2m3_shieldl1m4"), {"C1" => met2_vpp, "C2" => met4_vpp, "M" => vpp_06p8x06p1_m1m2m3_shieldl1m4_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 6.8um x 6.1um and with layers of m1m2m3 and shieldl1m4
logger.info("Extracting sky130_fd_pr__cap_vpp_06p8x06p1_m1m2m3_shieldl1m4_top")
extract_devices(Custom4TerminalExtractor::new("sky130_fd_pr__cap_vpp_06p8x06p1_m1m2m3_shieldl1m4_top"), {"C1" => met2_vpp, "C2" => met4_vpp, "M" => vpp_06p8x06p1_m1m2m3_shieldl1m4_top_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 8.6um x 7.8um and with layers of l1m1m2 and noshield
logger.info("Extracting sky130_fd_pr__cap_vpp_08p6x07p8_l1m1m2_noshield")
extract_devices(Custom3TerminalExtractor::new("sky130_fd_pr__cap_vpp_08p6x07p8_l1m1m2_noshield"), {"C" => met2_vpp, "M" => vpp_08p6x07p8_l1m1m2_noshield_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 8.6um x 7.8um and with layers of l1m1m2 and noshield
logger.info("Extracting sky130_fd_pr__cap_vpp_08p6x07p8_l1m1m2_noshield_o2subcell")
extract_devices(Custom3TerminalExtractor::new("sky130_fd_pr__cap_vpp_08p6x07p8_l1m1m2_noshield_o2subcell"), {"C" => met2_vpp, "M" => vpp_08p6x07p8_l1m1m2_noshield_o2subcell_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 8.6um x 7.8um and with layers of l1m1m2 and shieldpo with floatm3
logger.info("Extracting sky130_fd_pr__cap_vpp_08p6x07p8_l1m1m2_shieldpo_floatm3")
extract_devices(Custom4TerminalExtractor::new("sky130_fd_pr__cap_vpp_08p6x07p8_l1m1m2_shieldpo_floatm3"), {"C1" => met2_vpp, "C2" => met3_vpp, "M" => vpp_08p6x07p8_l1m1m2_shieldpo_floatm3_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 8.6um x 7.8um and with layers of m1m2m3 and shieldl1
logger.info("Extracting sky130_fd_pr__cap_vpp_08p6x07p8_m1m2m3_shieldl1")
extract_devices(Custom3TerminalExtractor::new("sky130_fd_pr__cap_vpp_08p6x07p8_m1m2m3_shieldl1"), {"C" => met2_vpp, "M" => vpp_08p6x07p8_m1m2m3_shieldl1_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 8.6um x 7.8um and with layers of m1m2m3 and shieldl1m5 with floatm4
logger.info("Extracting sky130_fd_pr__cap_vpp_08p6x07p8_m1m2m3_shieldl1m5_floatm4")
extract_devices(Custom4TerminalExtractor::new("sky130_fd_pr__cap_vpp_08p6x07p8_m1m2m3_shieldl1m5_floatm4"), {"C1" => met2_vpp, "C2" => met5_vpp, "M" => vpp_08p6x07p8_m1m2m3_shieldl1m5_floatm4_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 8.6um x 7.8um and with layers of m1m2m3 and shieldl1m5 with floatm4
logger.info("Extracting sky130_fd_pr__cap_vpp_08p6x07p8_m1m2m3_shieldl1m5_floatm4_top")
extract_devices(Custom4TerminalExtractor::new("sky130_fd_pr__cap_vpp_08p6x07p8_m1m2m3_shieldl1m5_floatm4_top"), {"C1" => met2_vpp, "C2" => met5_vpp, "M" => vpp_08p6x07p8_m1m2m3_shieldl1m5_floatm4_top_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 8.6um x 7.8um and with layers of m1m2 and noshield
logger.info("Extracting sky130_fd_pr__cap_vpp_08p6x07p8_m1m2_noshield")
extract_devices(Custom3TerminalExtractor::new("sky130_fd_pr__cap_vpp_08p6x07p8_m1m2_noshield"), {"C" => met2_vpp, "M" => vpp_08p6x07p8_m1m2_noshield_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 8.6um x 7.8um and with layers of m1m2 and shieldl1
logger.info("Extracting sky130_fd_pr__cap_vpp_08p6x07p8_m1m2_shieldl1")
extract_devices(Custom3TerminalExtractor::new("sky130_fd_pr__cap_vpp_08p6x07p8_m1m2_shieldl1"), {"C" => met2_vpp, "M" => vpp_08p6x07p8_m1m2_shieldl1_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 11.3um x 11.3um and with layers of m1m2m3m4 and shieldl1
logger.info("Extracting sky130_fd_pr__cap_vpp_11p3x11p3_m1m2m3m4_shieldl1_wafflecap")
extract_devices(Custom3TerminalExtractor::new("sky130_fd_pr__cap_vpp_11p3x11p3_m1m2m3m4_shieldl1_wafflecap"), {"C" => met2_vpp, "M" => vpp_11p3x11p3_m1m2m3m4_shieldl1_wafflecap_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 11.3um x 11.8um and with layers of l1m1m2m3m4 and shieldm5
logger.info("Extracting sky130_fd_pr__cap_vpp_11p3x11p8_l1m1m2m3m4_shieldm5_nhv")
extract_devices(Custom4TerminalExtractor::new("sky130_fd_pr__cap_vpp_11p3x11p8_l1m1m2m3m4_shieldm5_nhv"), {"C1" => met1_vpp, "C2" => met2_vpp, "M" => vpp_11p3x11p8_l1m1m2m3m4_shieldm5_nhv_mk, "B" => met5_pin })

# VPP capacitor with dimensions of 11.3um x 11.8um and with layers of l1m1m2m3m4 and shieldm5
logger.info("Extracting sky130_fd_pr__cap_vpp_11p3x11p8_l1m1m2m3m4_shieldm5_nhvtop")
extract_devices(Custom4TerminalExtractor::new("sky130_fd_pr__cap_vpp_11p3x11p8_l1m1m2m3m4_shieldm5_nhvtop"), {"C1" => met1_vpp, "C2" => met2_vpp, "M" => vpp_11p3x11p8_l1m1m2m3m4_shieldm5_nhvtop_mk, "B" => met5_pin })

# VPP capacitor with dimensions of 11.5um x 11.7um and with layers of l1m1m2m3m4 and shieldm5
logger.info("Extracting sky130_fd_pr__cap_vpp_11p5x11p7_l1m1m2m3m4_shieldm5")
extract_devices(Custom4TerminalExtractor::new("sky130_fd_pr__cap_vpp_11p5x11p7_l1m1m2m3m4_shieldm5"), {"C1" => met2_vpp, "C2" => met5_vpp, "M" => vpp_11p5x11p7_l1m1m2m3m4_shieldm5_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 11.5um x 11.7um and with layers of l1m1m2m3m4 and shieldm5
logger.info("Extracting sky130_fd_pr__cap_vpp_11p5x11p7_l1m1m2m3m4_shieldm5_top")
extract_devices(Custom4TerminalExtractor::new("sky130_fd_pr__cap_vpp_11p5x11p7_l1m1m2m3m4_shieldm5_top"), {"C1" => met2_vpp, "C2" => met5_vpp, "M" => vpp_11p5x11p7_l1m1m2m3m4_shieldm5_top_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 11.5um x 11.7um and with layers of l1m1m2m3m4 and shieldpom5
logger.info("Extracting sky130_fd_pr__cap_vpp_11p5x11p7_l1m1m2m3m4_shieldpom5")
extract_devices(Custom4TerminalExtractor::new("sky130_fd_pr__cap_vpp_11p5x11p7_l1m1m2m3m4_shieldpom5"), {"C1" => met2_vpp, "C2" => met5_vpp, "M" => vpp_11p5x11p7_l1m1m2m3m4_shieldpom5_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 11.5um x 11.7um and with layers of l1m1m2m3m4 and shieldpom5
logger.info("Extracting sky130_fd_pr__cap_vpp_11p5x11p7_l1m1m2m3m4_shieldpom5_top")
extract_devices(Custom4TerminalExtractor::new("sky130_fd_pr__cap_vpp_11p5x11p7_l1m1m2m3m4_shieldpom5_top"), {"C1" => met2_vpp, "C2" => met5_vpp, "M" => vpp_11p5x11p7_l1m1m2m3m4_shieldpom5_top_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 11.5um x 11.7um and with layers of l1m1m2m3m4 and shieldpom5
logger.info("Extracting sky130_fd_pr__cap_vpp_11p5x11p7_l1m1m2m3m4_shieldpom5_x6")
extract_devices(Custom4TerminalExtractor::new("sky130_fd_pr__cap_vpp_11p5x11p7_l1m1m2m3m4_shieldpom5_x6"), {"C1" => met2_vpp, "C2" => met5_vpp, "M" => vpp_11p5x11p7_l1m1m2m3m4_shieldpom5_x6_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 11.5um x 11.7um and with layers of l1m1m2m3m4 and shieldpom5
logger.info("Extracting sky130_fd_pr__cap_vpp_11p5x11p7_l1m1m2m3m4_shieldpom5_x7")
extract_devices(Custom4TerminalExtractor::new("sky130_fd_pr__cap_vpp_11p5x11p7_l1m1m2m3m4_shieldpom5_x7"), {"C1" => met2_vpp, "C2" => met5_vpp, "M" => vpp_11p5x11p7_l1m1m2m3m4_shieldpom5_x7_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 11.5um x 11.7um and with layers of l1m1m2m3m4 and shieldpom5
logger.info("Extracting sky130_fd_pr__cap_vpp_11p5x11p7_l1m1m2m3m4_shieldpom5_x8")
extract_devices(Custom4TerminalExtractor::new("sky130_fd_pr__cap_vpp_11p5x11p7_l1m1m2m3m4_shieldpom5_x8"), {"C1" => met2_vpp, "C2" => met5_vpp, "M" => vpp_11p5x11p7_l1m1m2m3m4_shieldpom5_x8_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 11.5um x 11.7um and with layers of l1m1m2m3m4 and shieldpom5
logger.info("Extracting sky130_fd_pr__cap_vpp_11p5x11p7_l1m1m2m3m4_shieldpom5_x9")
extract_devices(Custom4TerminalExtractor::new("sky130_fd_pr__cap_vpp_11p5x11p7_l1m1m2m3m4_shieldpom5_x9"), {"C1" => met2_vpp, "C2" => met5_vpp, "M" => vpp_11p5x11p7_l1m1m2m3m4_shieldpom5_x9_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 11.5um x 11.7um and with layers of l1m1m2m3m4 and shieldpom5
logger.info("Extracting sky130_fd_pr__cap_vpp_11p5x11p7_l1m1m2m3m4_shieldpom5_x")
extract_devices(Custom4TerminalExtractor::new("sky130_fd_pr__cap_vpp_11p5x11p7_l1m1m2m3m4_shieldpom5_x"), {"C1" => met2_vpp, "C2" => met5_vpp, "M" => vpp_11p5x11p7_l1m1m2m3m4_shieldpom5_x_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 11.5um x 11.7um and with layers of l1m1m2m3m4 and shieldpom5
logger.info("Extracting sky130_fd_pr__cap_vpp_11p5x11p7_l1m1m2m3m4_shieldpom5_xtop")
extract_devices(Custom4TerminalExtractor::new("sky130_fd_pr__cap_vpp_11p5x11p7_l1m1m2m3m4_shieldpom5_xtop"), {"C1" => met2_vpp, "C2" => met5_vpp, "M" => vpp_11p5x11p7_l1m1m2m3m4_shieldpom5_xtop_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 11.5um x 11.7um and with layers of l1m1m2m3 and shieldm4
logger.info("Extracting sky130_fd_pr__cap_vpp_11p5x11p7_l1m1m2m3_shieldm4")
extract_devices(Custom4TerminalExtractor::new("sky130_fd_pr__cap_vpp_11p5x11p7_l1m1m2m3_shieldm4"), {"C1" => met2_vpp, "C2" => met4_vpp, "M" => vpp_11p5x11p7_l1m1m2m3_shieldm4_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 11.5um x 11.7um and with layers of l1m1m2m3 and shieldm4
logger.info("Extracting sky130_fd_pr__cap_vpp_11p5x11p7_l1m1m2m3_shieldm4_top")
extract_devices(Custom4TerminalExtractor::new("sky130_fd_pr__cap_vpp_11p5x11p7_l1m1m2m3_shieldm4_top"), {"C1" => met2_vpp, "C2" => met4_vpp, "M" => vpp_11p5x11p7_l1m1m2m3_shieldm4_top_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 11.5um x 11.7um and with layers of l1m1m2m3 and shieldpom4
logger.info("Extracting sky130_fd_pr__cap_vpp_11p5x11p7_l1m1m2m3_shieldpom4")
extract_devices(Custom4TerminalExtractor::new("sky130_fd_pr__cap_vpp_11p5x11p7_l1m1m2m3_shieldpom4"), {"C1" => met2_vpp, "C2" => met4_vpp, "M" => vpp_11p5x11p7_l1m1m2m3_shieldpom4_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 11.5um x 11.7um and with layers of l1m1m2m3 and shieldpom4
logger.info("Extracting sky130_fd_pr__cap_vpp_11p5x11p7_l1m1m2m3_shieldpom4_top")
extract_devices(Custom4TerminalExtractor::new("sky130_fd_pr__cap_vpp_11p5x11p7_l1m1m2m3_shieldpom4_top"), {"C1" => met2_vpp, "C2" => met4_vpp, "M" => vpp_11p5x11p7_l1m1m2m3_shieldpom4_top_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 11.5um x 11.7um and with layers of l1m1m2 and noshield
logger.info("Extracting sky130_fd_pr__cap_vpp_11p5x11p7_l1m1m2_noshield")
extract_devices(Custom3TerminalExtractor::new("sky130_fd_pr__cap_vpp_11p5x11p7_l1m1m2_noshield"), {"C" => met2_vpp, "M" => vpp_11p5x11p7_l1m1m2_noshield_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 11.5um x 11.7um and with layers of l1m1m2 and shieldpom3
logger.info("Extracting sky130_fd_pr__cap_vpp_11p5x11p7_l1m1m2_shieldpom3")
extract_devices(Custom4TerminalExtractor::new("sky130_fd_pr__cap_vpp_11p5x11p7_l1m1m2_shieldpom3"), {"C1" => met2_vpp, "C2" => met3_vpp, "M" => vpp_11p5x11p7_l1m1m2_shieldpom3_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 11.5um x 11.7um and with layers of m1m2m3m4 and shieldl1m5
logger.info("Extracting sky130_fd_pr__cap_vpp_11p5x11p7_m1m2m3m4_shieldl1m5")
extract_devices(Custom4TerminalExtractor::new("sky130_fd_pr__cap_vpp_11p5x11p7_m1m2m3m4_shieldl1m5"), {"C1" => met2_vpp, "C2" => met5_vpp, "M" => vpp_11p5x11p7_m1m2m3m4_shieldl1m5_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 11.5um x 11.7um and with layers of m1m2m3m4 and shieldl1m5
logger.info("Extracting sky130_fd_pr__cap_vpp_11p5x11p7_m1m2m3m4_shieldl1m5_top")
extract_devices(Custom4TerminalExtractor::new("sky130_fd_pr__cap_vpp_11p5x11p7_m1m2m3m4_shieldl1m5_top"), {"C1" => met2_vpp, "C2" => met5_vpp, "M" => vpp_11p5x11p7_m1m2m3m4_shieldl1m5_top_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 11.5um x 11.7um and with layers of m1m2m3m4 and shieldm5
logger.info("Extracting sky130_fd_pr__cap_vpp_11p5x11p7_m1m2m3m4_shieldm5")
extract_devices(Custom4TerminalExtractor::new("sky130_fd_pr__cap_vpp_11p5x11p7_m1m2m3m4_shieldm5"), {"C1" => met2_vpp, "C2" => met5_vpp, "M" => vpp_11p5x11p7_m1m2m3m4_shieldm5_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 11.5um x 11.7um and with layers of m1m2m3 and shieldl1
logger.info("Extracting sky130_fd_pr__cap_vpp_11p5x11p7_m1m2m3_shieldl1")
extract_devices(Custom3TerminalExtractor::new("sky130_fd_pr__cap_vpp_11p5x11p7_m1m2m3_shieldl1"), {"C" => met2_vpp, "M" => vpp_11p5x11p7_m1m2m3_shieldl1_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 11.5um x 11.7um and with layers of m1m2m3 and shieldl1m5 with floatm4
logger.info("Extracting sky130_fd_pr__cap_vpp_11p5x11p7_m1m2m3_shieldl1m5_floatm4")
extract_devices(Custom4TerminalExtractor::new("sky130_fd_pr__cap_vpp_11p5x11p7_m1m2m3_shieldl1m5_floatm4"), {"C1" => met2_vpp, "C2" => met5_vpp, "M" => vpp_11p5x11p7_m1m2m3_shieldl1m5_floatm4_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 11.5um x 11.7um and with layers of m1m2m3 and shieldl1m5 with floatm4
logger.info("Extracting sky130_fd_pr__cap_vpp_11p5x11p7_m1m2m3_shieldl1m5_floatm4_top")
extract_devices(Custom4TerminalExtractor::new("sky130_fd_pr__cap_vpp_11p5x11p7_m1m2m3_shieldl1m5_floatm4_top"), {"C1" => met2_vpp, "C2" => met5_vpp, "M" => vpp_11p5x11p7_m1m2m3_shieldl1m5_floatm4_top_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 11.5um x 11.7um and with layers of m1m2 and noshield
logger.info("Extracting sky130_fd_pr__cap_vpp_11p5x11p7_m1m2_noshield")
extract_devices(Custom3TerminalExtractor::new("sky130_fd_pr__cap_vpp_11p5x11p7_m1m2_noshield"), {"C" => met2_vpp, "M" => vpp_11p5x11p7_m1m2_noshield_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 11.5um x 11.7um and with layers of m1m2 and shieldl1
logger.info("Extracting sky130_fd_pr__cap_vpp_11p5x11p7_m1m2_shieldl1")
extract_devices(Custom3TerminalExtractor::new("sky130_fd_pr__cap_vpp_11p5x11p7_m1m2_shieldl1"), {"C" => met2_vpp, "M" => vpp_11p5x11p7_m1m2_shieldl1_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 11.5um x 11.7um and with layers of m1m4 and noshield
logger.info("Extracting sky130_fd_pr__cap_vpp_11p5x11p7_m1m4_noshield")
extract_devices(Custom3TerminalExtractor::new("sky130_fd_pr__cap_vpp_11p5x11p7_m1m4_noshield"), {"C" => met2_vpp, "M" => vpp_11p5x11p7_m1m4_noshield_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 11.5um x 11.7um and with layers of pol1m1m2m3m4m5 and noshield
logger.info("Extracting sky130_fd_pr__cap_vpp_11p5x11p7_pol1m1m2m3m4m5_noshield")
extract_devices(Custom3TerminalExtractor::new("sky130_fd_pr__cap_vpp_11p5x11p7_pol1m1m2m3m4m5_noshield"), {"C" => met2_vpp, "M" => vpp_11p5x11p7_pol1m1m2m3m4m5_noshield_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 11.5um x 23.1um and with layers of pol1m1m2m3m4m5 and noshield
logger.info("Extracting sky130_fd_pr__cap_vpp_11p5x23p1_pol1m1m2m3m4m5_noshield")
extract_devices(Custom3TerminalExtractor::new("sky130_fd_pr__cap_vpp_11p5x23p1_pol1m1m2m3m4m5_noshield"), {"C" => met2_vpp, "M" => vpp_11p5x23p1_pol1m1m2m3m4m5_noshield_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 22.5um x 11.7um and with layers of pol1m1m2m3m4m5 and noshield
logger.info("Extracting sky130_fd_pr__cap_vpp_22p5x11p7_pol1m1m2m3m4m5_noshield")
extract_devices(Custom3TerminalExtractor::new("sky130_fd_pr__cap_vpp_22p5x11p7_pol1m1m2m3m4m5_noshield"), {"C" => met2_vpp, "M" => vpp_22p5x11p7_pol1m1m2m3m4m5_noshield_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 22.5um x 23.1um and with layers of pol1m1m2m3m4m5 and noshield
logger.info("Extracting sky130_fd_pr__cap_vpp_22p5x23p1_pol1m1m2m3m4m5_noshield")
extract_devices(Custom3TerminalExtractor::new("sky130_fd_pr__cap_vpp_22p5x23p1_pol1m1m2m3m4m5_noshield"), {"C" => met2_vpp, "M" => vpp_22p5x23p1_pol1m1m2m3m4m5_noshield_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 33.6um x 11.7um and with layers of pol1m1m2m3m4m5 and noshield
logger.info("Extracting sky130_fd_pr__cap_vpp_33p6x11p7_pol1m1m2m3m4m5_noshield")
extract_devices(Custom3TerminalExtractor::new("sky130_fd_pr__cap_vpp_33p6x11p7_pol1m1m2m3m4m5_noshield"), {"C" => met2_vpp, "M" => vpp_33p6x11p7_pol1m1m2m3m4m5_noshield_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 33.6um x 23.1um and with layers of pol1m1m2m3m4m5 and noshield
logger.info("Extracting sky130_fd_pr__cap_vpp_33p6x23p1_pol1m1m2m3m4m5_noshield")
extract_devices(Custom3TerminalExtractor::new("sky130_fd_pr__cap_vpp_33p6x23p1_pol1m1m2m3m4m5_noshield"), {"C" => met2_vpp, "M" => vpp_33p6x23p1_pol1m1m2m3m4m5_noshield_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 44.7um x 11.7um and with layers of pol1m1m2m3m4m5 and noshield
logger.info("Extracting sky130_fd_pr__cap_vpp_44p7x11p7_pol1m1m2m3m4m5_noshield")
extract_devices(Custom3TerminalExtractor::new("sky130_fd_pr__cap_vpp_44p7x11p7_pol1m1m2m3m4m5_noshield"), {"C" => met2_vpp, "M" => vpp_44p7x11p7_pol1m1m2m3m4m5_noshield_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 44.7um x 23.1um and with layers of pol1m1m2m3m4m5 and noshield
logger.info("Extracting sky130_fd_pr__cap_vpp_44p7x23p1_pol1m1m2m3m4m5_noshield")
extract_devices(Custom3TerminalExtractor::new("sky130_fd_pr__cap_vpp_44p7x23p1_pol1m1m2m3m4m5_noshield"), {"C" => met2_vpp, "M" => vpp_44p7x23p1_pol1m1m2m3m4m5_noshield_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 55.8um x 11.7um and with layers of pol1m1m2m3m4m5 and noshield
logger.info("Extracting sky130_fd_pr__cap_vpp_55p8x11p7_pol1m1m2m3m4m5_noshield")
extract_devices(Custom3TerminalExtractor::new("sky130_fd_pr__cap_vpp_55p8x11p7_pol1m1m2m3m4m5_noshield"), {"C" => met2_vpp, "M" => vpp_55p8x11p7_pol1m1m2m3m4m5_noshield_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 55.8um x 11.7um and with layers of pol1m1m2m3m4m5 and noshield
logger.info("Extracting sky130_fd_pr__cap_vpp_55p8x11p7_pol1m1m2m3m4m5_noshield_m5pullin")
extract_devices(Custom3TerminalExtractor::new("sky130_fd_pr__cap_vpp_55p8x11p7_pol1m1m2m3m4m5_noshield_m5pullin"), {"C" => met2_vpp, "M" => vpp_55p8x11p7_pol1m1m2m3m4m5_noshield_m5pullin_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 55.8um x 23.1um and with layers of pol1m1m2m3m4m5 and noshield
logger.info("Extracting sky130_fd_pr__cap_vpp_55p8x23p1_pol1m1m2m3m4m5_noshield")
extract_devices(Custom3TerminalExtractor::new("sky130_fd_pr__cap_vpp_55p8x23p1_pol1m1m2m3m4m5_noshield"), {"C" => met2_vpp, "M" => vpp_55p8x23p1_pol1m1m2m3m4m5_noshield_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 55.8um x 23.1um and with layers of pol1m1m2m3m4m5 and noshield
logger.info("Extracting sky130_fd_pr__cap_vpp_55p8x23p1_pol1m1m2m3m4m5_noshield_m5pullin")
extract_devices(Custom3TerminalExtractor::new("sky130_fd_pr__cap_vpp_55p8x23p1_pol1m1m2m3m4m5_noshield_m5pullin"), {"C" => met2_vpp, "M" => vpp_55p8x23p1_pol1m1m2m3m4m5_noshield_m5pullin_mk, "B" => pwell_pin })

# VPP capacitor with dimensions of 55.8um x 23.1um and with layers of pol1m1m2m3m4m5 and noshield
logger.info("Extracting sky130_fd_pr__cap_vpp_55p8x23p1_pol1m1m2m3m4m5_noshield_test")
extract_devices(Custom3TerminalExtractor::new("sky130_fd_pr__cap_vpp_55p8x23p1_pol1m1m2m3m4m5_noshield_test"), {"C" => met2_vpp, "M" => vpp_55p8x23p1_pol1m1m2m3m4m5_noshield_test_mk, "B" => pwell_pin })


#==================================
# ------ INDUCTOR EXTRACTION ------
#==================================

logger.info("Starting INDUCTOR EXTRACTION")

# RF Inductor with 3 turns and internal diameter of 90um
logger.info("Extracting RF Inductor with 3 turns and internal diameter of 90um")
extract_devices(Custom4TerminalExtractor::new("sky130_fd_pr__rf_ind_03_90"), {"C1" => met3_ncap, "C2" => met2_con, "M" => coil_1, "B" => pwell_pin })

# RF Inductor with 5 turns and internal diameter of 125um
logger.info("Extracting RF Inductor with 5 turns and internal diameter of 125um")
extract_devices(Custom4TerminalExtractor::new("sky130_fd_pr__rf_ind_05_125"), {"C1" => met3_ncap, "C2" => met2_con, "M" => coil_2, "B" => pwell_pin })

# RF Inductor with 5 turns and internal diameter of 220um
logger.info("Extracting RF Inductor with 5 turns and internal diameter of 220um")
extract_devices(Custom4TerminalExtractor::new("sky130_fd_pr__rf_ind_05_220"), {"C1" => met3_ncap, "C2" => met2_con, "M" => coil_3, "B" => pwell_pin })


#==================================
# ------- SONOS EXTRACTION --------
#==================================

logger.info("Starting SONOS EXTRACTION")

if SONOS == "original"
  
  # Build space flash special SONOSFET original
  logger.info("Extracting Build space flash special SONOSFET original")
  extract_devices(mos4("sky130_fd_bs_flash__special_sonosfet_original"), { "SD" => nsd, "G" => sonos, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub })

else

  # Build space flash special SONOSFET star
  logger.info("Extracting Build space flash special SONOSFET star")
  extract_devices(mos4("sky130_fd_bs_flash__special_sonosfet_star"), { "SD" => nsd, "G" => sonos, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub })

end


#================================
# ---- RF MOSFET EXTRACTION -----
#================================

logger.info("Starting RF MOSFET EXTRACTION")

# 1.8V RF NMOS transistor with multiplier of 2 width of 1.65um and length of 0.15um type aM
logger.info("Extracting 1.8V RF NMOS transistor with multiplier of 2 width of 1.65um and length of 0.15um type aM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_aM02W1p65L0p15"), {"SD" => nsd, "G" => ngate_01v8_aM02W1p65L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor with multiplier of 2 width of 1.65um and length of 0.18um type aM
logger.info("Extracting 1.8V RF NMOS transistor with multiplier of 2 width of 1.65um and length of 0.18um type aM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_aM02W1p65L0p18"), {"SD" => nsd, "G" => ngate_01v8_aM02W1p65L0p18, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor with multiplier of 2 width of 1.65um and length of 0.25um type aM
logger.info("Extracting 1.8V RF NMOS transistor with multiplier of 2 width of 1.65um and length of 0.25um type aM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_aM02W1p65L0p25"), {"SD" => nsd, "G" => ngate_01v8_aM02W1p65L0p25, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor with multiplier of 2 width of 3.0um and length of 0.15um type aM
logger.info("Extracting 1.8V RF NMOS transistor with multiplier of 2 width of 3.0um and length of 0.15um type aM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_aM02W3p00L0p15"), {"SD" => nsd, "G" => ngate_01v8_aM02W3p00L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor with multiplier of 2 width of 3.0um and length of 0.18um type aM
logger.info("Extracting 1.8V RF NMOS transistor with multiplier of 2 width of 3.0um and length of 0.18um type aM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_aM02W3p00L0p18"), {"SD" => nsd, "G" => ngate_01v8_aM02W3p00L0p18, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor with multiplier of 2 width of 3.0um and length of 0.25um type aM
logger.info("Extracting 1.8V RF NMOS transistor with multiplier of 2 width of 3.0um and length of 0.25um type aM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_aM02W3p00L0p25"), {"SD" => nsd, "G" => ngate_01v8_aM02W3p00L0p25, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor with multiplier of 2 width of 5.0um and length of 0.15um type aM
logger.info("Extracting 1.8V RF NMOS transistor with multiplier of 2 width of 5.0um and length of 0.15um type aM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_aM02W5p00L0p15"), {"SD" => nsd, "G" => ngate_01v8_aM02W5p00L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor with multiplier of 2 width of 5.0um and length of 0.18um type aM
logger.info("Extracting 1.8V RF NMOS transistor with multiplier of 2 width of 5.0um and length of 0.18um type aM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_aM02W5p00L0p18"), {"SD" => nsd, "G" => ngate_01v8_aM02W5p00L0p18, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor with multiplier of 2 width of 5.0um and length of 0.25um type aM
logger.info("Extracting 1.8V RF NMOS transistor with multiplier of 2 width of 5.0um and length of 0.25um type aM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_aM02W5p00L0p25"), {"SD" => nsd, "G" => ngate_01v8_aM02W5p00L0p25, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor with multiplier of 4 width of 1.65um and length of 0.15um type aM
logger.info("Extracting 1.8V RF NMOS transistor with multiplier of 4 width of 1.65um and length of 0.15um type aM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_aM04W1p65L0p15"), {"SD" => nsd, "G" => ngate_01v8_aM04W1p65L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor with multiplier of 4 width of 1.65um and length of 0.18um type aM
logger.info("Extracting 1.8V RF NMOS transistor with multiplier of 4 width of 1.65um and length of 0.18um type aM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_aM04W1p65L0p18"), {"SD" => nsd, "G" => ngate_01v8_aM04W1p65L0p18, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor with multiplier of 4 width of 1.65um and length of 0.25um type aM
logger.info("Extracting 1.8V RF NMOS transistor with multiplier of 4 width of 1.65um and length of 0.25um type aM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_aM04W1p65L0p25"), {"SD" => nsd, "G" => ngate_01v8_aM04W1p65L0p25, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor with multiplier of 4 width of 3.0um and length of 0.15um type aM
logger.info("Extracting 1.8V RF NMOS transistor with multiplier of 4 width of 3.0um and length of 0.15um type aM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_aM04W3p00L0p15"), {"SD" => nsd, "G" => ngate_01v8_aM04W3p00L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor with multiplier of 4 width of 3.0um and length of 0.18um type aM
logger.info("Extracting 1.8V RF NMOS transistor with multiplier of 4 width of 3.0um and length of 0.18um type aM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_aM04W3p00L0p18"), {"SD" => nsd, "G" => ngate_01v8_aM04W3p00L0p18, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor with multiplier of 4 width of 3.0um and length of 0.25um type aM
logger.info("Extracting 1.8V RF NMOS transistor with multiplier of 4 width of 3.0um and length of 0.25um type aM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_aM04W3p00L0p25"), {"SD" => nsd, "G" => ngate_01v8_aM04W3p00L0p25, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor with multiplier of 4 width of 5.0um and length of 0.15um type aM
logger.info("Extracting 1.8V RF NMOS transistor with multiplier of 4 width of 5.0um and length of 0.15um type aM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_aM04W5p00L0p15"), {"SD" => nsd, "G" => ngate_01v8_aM04W5p00L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor with multiplier of 4 width of 5.0um and length of 0.18um type aM
logger.info("Extracting 1.8V RF NMOS transistor with multiplier of 4 width of 5.0um and length of 0.18um type aM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_aM04W5p00L0p18"), {"SD" => nsd, "G" => ngate_01v8_aM04W5p00L0p18, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor with multiplier of 4 width of 5.0um and length of 0.25um type aM
logger.info("Extracting 1.8V RF NMOS transistor with multiplier of 4 width of 5.0um and length of 0.25um type aM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_aM04W5p00L0p25"), {"SD" => nsd, "G" => ngate_01v8_aM04W5p00L0p25, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor with multiplier of 2 width of 1.65um and length of 0.15um type bM
logger.info("Extracting 1.8V RF NMOS transistor with multiplier of 2 width of 1.65um and length of 0.15um type bM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_bM02W1p65L0p15"), {"SD" => nsd, "G" => ngate_01v8_bM02W1p65L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor with multiplier of 2 width of 1.65um and length of 0.18um type bM
logger.info("Extracting 1.8V RF NMOS transistor with multiplier of 2 width of 1.65um and length of 0.18um type bM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_bM02W1p65L0p18"), {"SD" => nsd, "G" => ngate_01v8_bM02W1p65L0p18, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor with multiplier of 2 width of 1.65um and length of 0.25um type bM
logger.info("Extracting 1.8V RF NMOS transistor with multiplier of 2 width of 1.65um and length of 0.25um type bM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_bM02W1p65L0p25"), {"SD" => nsd, "G" => ngate_01v8_bM02W1p65L0p25, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor with multiplier of 2 width of 3.0um and length of 0.15um type bM
logger.info("Extracting 1.8V RF NMOS transistor with multiplier of 2 width of 3.0um and length of 0.15um type bM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_bM02W3p00L0p15"), {"SD" => nsd, "G" => ngate_01v8_bM02W3p00L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor with multiplier of 2 width of 3.0um and length of 0.18um type bM
logger.info("Extracting 1.8V RF NMOS transistor with multiplier of 2 width of 3.0um and length of 0.18um type bM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_bM02W3p00L0p18"), {"SD" => nsd, "G" => ngate_01v8_bM02W3p00L0p18, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor with multiplier of 2 width of 3.0um and length of 0.25um type bM
logger.info("Extracting 1.8V RF NMOS transistor with multiplier of 2 width of 3.0um and length of 0.25um type bM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_bM02W3p00L0p25"), {"SD" => nsd, "G" => ngate_01v8_bM02W3p00L0p25, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor with multiplier of 2 width of 5.0um and length of 0.15um type bM
logger.info("Extracting 1.8V RF NMOS transistor with multiplier of 2 width of 5.0um and length of 0.15um type bM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_bM02W5p00L0p15"), {"SD" => nsd, "G" => ngate_01v8_bM02W5p00L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor with multiplier of 2 width of 5.0um and length of 0.18um type bM
logger.info("Extracting 1.8V RF NMOS transistor with multiplier of 2 width of 5.0um and length of 0.18um type bM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_bM02W5p00L0p18"), {"SD" => nsd, "G" => ngate_01v8_bM02W5p00L0p18, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor with multiplier of 2 width of 5.0um and length of 0.25um type bM
logger.info("Extracting 1.8V RF NMOS transistor with multiplier of 2 width of 5.0um and length of 0.25um type bM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_bM02W5p00L0p25"), {"SD" => nsd, "G" => ngate_01v8_bM02W5p00L0p25, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor with multiplier of 4 width of 1.65um and length of 0.15um type bM
logger.info("Extracting 1.8V RF NMOS transistor with multiplier of 4 width of 1.65um and length of 0.15um type bM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_bM04W1p65L0p15"), {"SD" => nsd, "G" => ngate_01v8_bM04W1p65L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor with multiplier of 4 width of 1.65um and length of 0.18um type bM
logger.info("Extracting 1.8V RF NMOS transistor with multiplier of 4 width of 1.65um and length of 0.18um type bM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_bM04W1p65L0p18"), {"SD" => nsd, "G" => ngate_01v8_bM04W1p65L0p18, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor with multiplier of 4 width of 1.65um and length of 0.25um type bM
logger.info("Extracting 1.8V RF NMOS transistor with multiplier of 4 width of 1.65um and length of 0.25um type bM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_bM04W1p65L0p25"), {"SD" => nsd, "G" => ngate_01v8_bM04W1p65L0p25, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor with multiplier of 4 width of 3.0um and length of 0.15um type bM
logger.info("Extracting 1.8V RF NMOS transistor with multiplier of 4 width of 3.0um and length of 0.15um type bM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_bM04W3p00L0p15"), {"SD" => nsd, "G" => ngate_01v8_bM04W3p00L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor with multiplier of 4 width of 3.0um and length of 0.18um type bM
logger.info("Extracting 1.8V RF NMOS transistor with multiplier of 4 width of 3.0um and length of 0.18um type bM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_bM04W3p00L0p18"), {"SD" => nsd, "G" => ngate_01v8_bM04W3p00L0p18, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor with multiplier of 4 width of 3.0um and length of 0.25um type bM
logger.info("Extracting 1.8V RF NMOS transistor with multiplier of 4 width of 3.0um and length of 0.25um type bM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_bM04W3p00L0p25"), {"SD" => nsd, "G" => ngate_01v8_bM04W3p00L0p25, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor with multiplier of 4 width of 5.0um and length of 0.15um type bM
logger.info("Extracting 1.8V RF NMOS transistor with multiplier of 4 width of 5.0um and length of 0.15um type bM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_bM04W5p00L0p15"), {"SD" => nsd, "G" => ngate_01v8_bM04W5p00L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor with multiplier of 4 width of 5.0um and length of 0.18um type bM
logger.info("Extracting 1.8V RF NMOS transistor with multiplier of 4 width of 5.0um and length of 0.18um type bM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_bM04W5p00L0p18"), {"SD" => nsd, "G" => ngate_01v8_bM04W5p00L0p18, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor with multiplier of 4 width of 5.0um and length of 0.25um type bM
logger.info("Extracting 1.8V RF NMOS transistor with multiplier of 4 width of 5.0um and length of 0.25um type bM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_bM04W5p00L0p25"), {"SD" => nsd, "G" => ngate_01v8_bM04W5p00L0p25, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor with multiplier of 4 width of 3.0um and length of 0.15um type hcM
logger.info("Extracting 1.8V RF NMOS transistor with multiplier of 4 width of 3.0um and length of 0.15um type hcM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_hcM04W3p00L0p15"), {"SD" => nsd, "G" => ngate_01v8_hcM04W3p00L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor with multiplier of 4 width of 5.0um and length of 0.15um type hcM
logger.info("Extracting 1.8V RF NMOS transistor with multiplier of 4 width of 5.0um and length of 0.15um type hcM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_hcM04W5p00L0p15"), {"SD" => nsd, "G" => ngate_01v8_hcM04W5p00L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 0.42um and length of 0.15um type aF
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 0.42um and length of 0.15um type aF")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_aF02W0p42L0p15"), {"SD" => nsd, "G" => ngate_01v8_lvt_aF02W0p42L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => pwell_pin })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 0.84um and length of 0.15um type aF
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 0.84um and length of 0.15um type aF")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_aF02W0p84L0p15"), {"SD" => nsd, "G" => ngate_01v8_lvt_aF02W0p84L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => pwell_pin })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 1.65um and length of 0.15um type aF
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 1.65um and length of 0.15um type aF")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_aF02W1p65L0p15"), {"SD" => nsd, "G" => ngate_01v8_lvt_aF02W1p65L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => pwell_pin })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 3.0um and length of 0.15um type aF
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 3.0um and length of 0.15um type aF")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_aF02W3p00L0p15"), {"SD" => nsd, "G" => ngate_01v8_lvt_aF02W3p00L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => pwell_pin })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 0.42um and length of 0.15um type aF
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 0.42um and length of 0.15um type aF")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_aF04W0p42L0p15"), {"SD" => nsd, "G" => ngate_01v8_lvt_aF04W0p42L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => pwell_pin })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 0.84um and length of 0.15um type aF
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 0.84um and length of 0.15um type aF")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_aF04W0p84L0p15"), {"SD" => nsd, "G" => ngate_01v8_lvt_aF04W0p84L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => pwell_pin })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 1.65um and length of 0.15um type aF
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 1.65um and length of 0.15um type aF")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_aF04W1p65L0p15"), {"SD" => nsd, "G" => ngate_01v8_lvt_aF04W1p65L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => pwell_pin })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 3.0um and length of 0.15um type aF
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 3.0um and length of 0.15um type aF")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_aF04W3p00L0p15"), {"SD" => nsd, "G" => ngate_01v8_lvt_aF04W3p00L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => pwell_pin })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 6 width of 0.42um and length of 0.15um type aF
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 6 width of 0.42um and length of 0.15um type aF")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_aF06W0p42L0p15"), {"SD" => nsd, "G" => ngate_01v8_lvt_aF06W0p42L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => pwell_pin })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 6 width of 0.84um and length of 0.15um type aF
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 6 width of 0.84um and length of 0.15um type aF")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_aF06W0p84L0p15"), {"SD" => nsd, "G" => ngate_01v8_lvt_aF06W0p84L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => pwell_pin })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 6 width of 1.65um and length of 0.15um type aF
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 6 width of 1.65um and length of 0.15um type aF")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_aF06W1p65L0p15"), {"SD" => nsd, "G" => ngate_01v8_lvt_aF06W1p65L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => pwell_pin })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 6 width of 3.0um and length of 0.15um type aF
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 6 width of 3.0um and length of 0.15um type aF")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_aF06W3p00L0p15"), {"SD" => nsd, "G" => ngate_01v8_lvt_aF06W3p00L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => pwell_pin })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 8 width of 0.42um and length of 0.15um type aF
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 8 width of 0.42um and length of 0.15um type aF")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_aF08W0p42L0p15"), {"SD" => nsd, "G" => ngate_01v8_lvt_aF08W0p42L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => pwell_pin })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 8 width of 0.84um and length of 0.15um type aF
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 8 width of 0.84um and length of 0.15um type aF")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_aF08W0p84L0p15"), {"SD" => nsd, "G" => ngate_01v8_lvt_aF08W0p84L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => pwell_pin })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 8 width of 1.65um and length of 0.15um type aF
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 8 width of 1.65um and length of 0.15um type aF")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_aF08W1p65L0p15"), {"SD" => nsd, "G" => ngate_01v8_lvt_aF08W1p65L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => pwell_pin })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 8 width of 3.0um and length of 0.15um type aF
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 8 width of 3.0um and length of 0.15um type aF")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_aF08W3p00L0p15"), {"SD" => nsd, "G" => ngate_01v8_lvt_aF08W3p00L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => pwell_pin })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 1.65um and length of 0.15um type aM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 1.65um and length of 0.15um type aM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_aM02W1p65L0p15"), {"SD" => nsd, "G" => ngate_01v8_lvt_aM02W1p65L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 1.65um and length of 0.18um type aM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 1.65um and length of 0.18um type aM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_aM02W1p65L0p18"), {"SD" => nsd, "G" => ngate_01v8_lvt_aM02W1p65L0p18, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 1.65um and length of 0.25um type aM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 1.65um and length of 0.25um type aM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_aM02W1p65L0p25"), {"SD" => nsd, "G" => ngate_01v8_lvt_aM02W1p65L0p25, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 3.0um and length of 0.15um type aM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 3.0um and length of 0.15um type aM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_aM02W3p00L0p15"), {"SD" => nsd, "G" => ngate_01v8_lvt_aM02W3p00L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 3.0um and length of 0.18um type aM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 3.0um and length of 0.18um type aM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_aM02W3p00L0p18"), {"SD" => nsd, "G" => ngate_01v8_lvt_aM02W3p00L0p18, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 3.0um and length of 0.25um type aM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 3.0um and length of 0.25um type aM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_aM02W3p00L0p25"), {"SD" => nsd, "G" => ngate_01v8_lvt_aM02W3p00L0p25, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 5.0um and length of 0.15um type aM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 5.0um and length of 0.15um type aM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_aM02W5p00L0p15"), {"SD" => nsd, "G" => ngate_01v8_lvt_aM02W5p00L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 5.0um and length of 0.18um type aM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 5.0um and length of 0.18um type aM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_aM02W5p00L0p18"), {"SD" => nsd, "G" => ngate_01v8_lvt_aM02W5p00L0p18, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 5.0um and length of 0.25um type aM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 5.0um and length of 0.25um type aM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_aM02W5p00L0p25"), {"SD" => nsd, "G" => ngate_01v8_lvt_aM02W5p00L0p25, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 1.65um and length of 0.15um type aM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 1.65um and length of 0.15um type aM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_aM04W1p65L0p15"), {"SD" => nsd, "G" => ngate_01v8_lvt_aM04W1p65L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 1.65um and length of 0.18um type aM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 1.65um and length of 0.18um type aM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_aM04W1p65L0p18"), {"SD" => nsd, "G" => ngate_01v8_lvt_aM04W1p65L0p18, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 1.65um and length of 0.25um type aM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 1.65um and length of 0.25um type aM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_aM04W1p65L0p25"), {"SD" => nsd, "G" => ngate_01v8_lvt_aM04W1p65L0p25, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 3.0um and length of 0.15um type aM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 3.0um and length of 0.15um type aM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_aM04W3p00L0p15"), {"SD" => nsd, "G" => ngate_01v8_lvt_aM04W3p00L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 3.0um and length of 0.18um type aM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 3.0um and length of 0.18um type aM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_aM04W3p00L0p18"), {"SD" => nsd, "G" => ngate_01v8_lvt_aM04W3p00L0p18, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 3.0um and length of 0.25um type aM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 3.0um and length of 0.25um type aM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_aM04W3p00L0p25"), {"SD" => nsd, "G" => ngate_01v8_lvt_aM04W3p00L0p25, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 5.0um and length of 0.15um type aM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 5.0um and length of 0.15um type aM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_aM04W5p00L0p15"), {"SD" => nsd, "G" => ngate_01v8_lvt_aM04W5p00L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 5.0um and length of 0.18um type aM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 5.0um and length of 0.18um type aM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_aM04W5p00L0p18"), {"SD" => nsd, "G" => ngate_01v8_lvt_aM04W5p00L0p18, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 5.0um and length of 0.25um type aM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 5.0um and length of 0.25um type aM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_aM04W5p00L0p25"), {"SD" => nsd, "G" => ngate_01v8_lvt_aM04W5p00L0p25, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 1.65um and length of 0.15um type bM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 1.65um and length of 0.15um type bM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_bM02W1p65L0p15"), {"SD" => nsd, "G" => ngate_01v8_lvt_bM02W1p65L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 1.65um and length of 0.18um type bM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 1.65um and length of 0.18um type bM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_bM02W1p65L0p18"), {"SD" => nsd, "G" => ngate_01v8_lvt_bM02W1p65L0p18, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 1.65um and length of 0.25um type bM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 1.65um and length of 0.25um type bM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_bM02W1p65L0p25"), {"SD" => nsd, "G" => ngate_01v8_lvt_bM02W1p65L0p25, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 3.0um and length of 0.15um type bM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 3.0um and length of 0.15um type bM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_bM02W3p00L0p15"), {"SD" => nsd, "G" => ngate_01v8_lvt_bM02W3p00L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 3.0um and length of 0.18um type bM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 3.0um and length of 0.18um type bM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_bM02W3p00L0p18"), {"SD" => nsd, "G" => ngate_01v8_lvt_bM02W3p00L0p18, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 3.0um and length of 0.25um type bM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 3.0um and length of 0.25um type bM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_bM02W3p00L0p25"), {"SD" => nsd, "G" => ngate_01v8_lvt_bM02W3p00L0p25, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 5.0um and length of 0.15um type bM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 5.0um and length of 0.15um type bM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_bM02W5p00L0p15"), {"SD" => nsd, "G" => ngate_01v8_lvt_bM02W5p00L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 5.0um and length of 0.18um type bM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 5.0um and length of 0.18um type bM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_bM02W5p00L0p18"), {"SD" => nsd, "G" => ngate_01v8_lvt_bM02W5p00L0p18, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 5.0um and length of 0.25um type bM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 5.0um and length of 0.25um type bM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_bM02W5p00L0p25"), {"SD" => nsd, "G" => ngate_01v8_lvt_bM02W5p00L0p25, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 1.65um and length of 0.15um type bM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 1.65um and length of 0.15um type bM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_bM04W1p65L0p15"), {"SD" => nsd, "G" => ngate_01v8_lvt_bM04W1p65L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 1.65um and length of 0.18um type bM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 1.65um and length of 0.18um type bM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_bM04W1p65L0p18"), {"SD" => nsd, "G" => ngate_01v8_lvt_bM04W1p65L0p18, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 1.65um and length of 0.25um type bM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 1.65um and length of 0.25um type bM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_bM04W1p65L0p25"), {"SD" => nsd, "G" => ngate_01v8_lvt_bM04W1p65L0p25, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 3.0um and length of 0.15um type bM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 3.0um and length of 0.15um type bM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_bM04W3p00L0p15"), {"SD" => nsd, "G" => ngate_01v8_lvt_bM04W3p00L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 3.0um and length of 0.18um type bM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 3.0um and length of 0.18um type bM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_bM04W3p00L0p18"), {"SD" => nsd, "G" => ngate_01v8_lvt_bM04W3p00L0p18, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 3.0um and length of 0.25um type bM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 3.0um and length of 0.25um type bM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_bM04W3p00L0p25"), {"SD" => nsd, "G" => ngate_01v8_lvt_bM04W3p00L0p25, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 5.0um and length of 0.15um type bM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 5.0um and length of 0.15um type bM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_bM04W5p00L0p15"), {"SD" => nsd, "G" => ngate_01v8_lvt_bM04W5p00L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 5.0um and length of 0.18um type bM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 5.0um and length of 0.18um type bM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_bM04W5p00L0p18"), {"SD" => nsd, "G" => ngate_01v8_lvt_bM04W5p00L0p18, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 5.0um and length of 0.25um type bM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 5.0um and length of 0.25um type bM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_bM04W5p00L0p25"), {"SD" => nsd, "G" => ngate_01v8_lvt_bM04W5p00L0p25, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 1.65um and length of 0.15um type cM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 1.65um and length of 0.15um type cM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_cM02W1p65L0p15"), {"SD" => nsd, "G" => ngate_01v8_lvt_cM02W1p65L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 1.65um and length of 0.18um type cM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 1.65um and length of 0.18um type cM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_cM02W1p65L0p18"), {"SD" => nsd, "G" => ngate_01v8_lvt_cM02W1p65L0p18, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 1.65um and length of 0.25um type cM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 1.65um and length of 0.25um type cM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_cM02W1p65L0p25"), {"SD" => nsd, "G" => ngate_01v8_lvt_cM02W1p65L0p25, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 3.0um and length of 0.15um type cM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 3.0um and length of 0.15um type cM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_cM02W3p00L0p15"), {"SD" => nsd, "G" => ngate_01v8_lvt_cM02W3p00L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 3.0um and length of 0.18um type cM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 3.0um and length of 0.18um type cM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_cM02W3p00L0p18"), {"SD" => nsd, "G" => ngate_01v8_lvt_cM02W3p00L0p18, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 3.0um and length of 0.25um type cM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 3.0um and length of 0.25um type cM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_cM02W3p00L0p25"), {"SD" => nsd, "G" => ngate_01v8_lvt_cM02W3p00L0p25, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 5.0um and length of 0.15um type cM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 5.0um and length of 0.15um type cM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_cM02W5p00L0p15"), {"SD" => nsd, "G" => ngate_01v8_lvt_cM02W5p00L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 5.0um and length of 0.18um type cM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 5.0um and length of 0.18um type cM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_cM02W5p00L0p18"), {"SD" => nsd, "G" => ngate_01v8_lvt_cM02W5p00L0p18, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 5.0um and length of 0.25um type cM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 2 width of 5.0um and length of 0.25um type cM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_cM02W5p00L0p25"), {"SD" => nsd, "G" => ngate_01v8_lvt_cM02W5p00L0p25, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 1.65um and length of 0.15um type cM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 1.65um and length of 0.15um type cM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_cM04W1p65L0p15"), {"SD" => nsd, "G" => ngate_01v8_lvt_cM04W1p65L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 1.65um and length of 0.18um type cM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 1.65um and length of 0.18um type cM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_cM04W1p65L0p18"), {"SD" => nsd, "G" => ngate_01v8_lvt_cM04W1p65L0p18, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 1.65um and length of 0.25um type cM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 1.65um and length of 0.25um type cM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_cM04W1p65L0p25"), {"SD" => nsd, "G" => ngate_01v8_lvt_cM04W1p65L0p25, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 3.0um and length of 0.15um type cM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 3.0um and length of 0.15um type cM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_cM04W3p00L0p15"), {"SD" => nsd, "G" => ngate_01v8_lvt_cM04W3p00L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 3.0um and length of 0.18um type cM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 3.0um and length of 0.18um type cM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_cM04W3p00L0p18"), {"SD" => nsd, "G" => ngate_01v8_lvt_cM04W3p00L0p18, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 3.0um and length of 0.25um type cM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 3.0um and length of 0.25um type cM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_cM04W3p00L0p25"), {"SD" => nsd, "G" => ngate_01v8_lvt_cM04W3p00L0p25, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 5.0um and length of 0.15um type cM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 5.0um and length of 0.15um type cM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_cM04W5p00L0p15"), {"SD" => nsd, "G" => ngate_01v8_lvt_cM04W5p00L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 5.0um and length of 0.18um type cM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 5.0um and length of 0.18um type cM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_cM04W5p00L0p18"), {"SD" => nsd, "G" => ngate_01v8_lvt_cM04W5p00L0p18, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 5.0um and length of 0.25um type cM
logger.info("Extracting 1.8V RF NMOS transistor low threshold voltage with multiplier of 4 width of 5.0um and length of 0.25um type cM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_lvt_cM04W5p00L0p25"), {"SD" => nsd, "G" => ngate_01v8_lvt_cM04W5p00L0p25, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor with multiplier of 4 width of 3.0um and length of 0.15um type mcM
logger.info("Extracting 1.8V RF NMOS transistor with multiplier of 4 width of 3.0um and length of 0.15um type mcM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_mcM04W3p00L0p15"), {"SD" => nsd, "G" => ngate_01v8_mcM04W3p00L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF NMOS transistor with multiplier of 4 width of 5.0um and length of 0.15um type mcM
logger.info("Extracting 1.8V RF NMOS transistor with multiplier of 4 width of 5.0um and length of 0.15um type mcM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_01v8_mcM04W5p00L0p15"), {"SD" => nsd, "G" => ngate_01v8_mcM04W5p00L0p15, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 5V gate 10.5V drain RF NMOS transistor with multiplier of 4 width of 3.0um and length of 0.5um type aM
logger.info("Extracting 5V gate 10.5V drain RF NMOS transistor with multiplier of 4 width of 3.0um and length of 0.5um type aM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_g5v0d10v5_aM04W3p00L0p50"), {"SD" => nsd, "G" => ngate_g5v0d10v5_aM04W3p00L0p50, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 5V gate 10.5V drain RF NMOS transistor with multiplier of 4 width of 5.0um and length of 0.5um type aM
logger.info("Extracting 5V gate 10.5V drain RF NMOS transistor with multiplier of 4 width of 5.0um and length of 0.5um type aM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_g5v0d10v5_aM04W5p00L0p50"), {"SD" => nsd, "G" => ngate_g5v0d10v5_aM04W5p00L0p50, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 5V gate 10.5V drain RF NMOS transistor with multiplier of 4 width of 7.0um and length of 0.5um type aM
logger.info("Extracting 5V gate 10.5V drain RF NMOS transistor with multiplier of 4 width of 7.0um and length of 0.5um type aM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_g5v0d10v5_aM04W7p00L0p50"), {"SD" => nsd, "G" => ngate_g5v0d10v5_aM04W7p00L0p50, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 5V gate 10.5V drain RF NMOS transistor with multiplier of 10 width of 3.0um and length of 0.5um type aM
logger.info("Extracting 5V gate 10.5V drain RF NMOS transistor with multiplier of 10 width of 3.0um and length of 0.5um type aM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_g5v0d10v5_aM10W3p00L0p50"), {"SD" => nsd, "G" => ngate_g5v0d10v5_aM10W3p00L0p50, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 5V gate 10.5V drain RF NMOS transistor with multiplier of 10 width of 5.0um and length of 0.5um type aM
logger.info("Extracting 5V gate 10.5V drain RF NMOS transistor with multiplier of 10 width of 5.0um and length of 0.5um type aM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_g5v0d10v5_aM10W5p00L0p50"), {"SD" => nsd, "G" => ngate_g5v0d10v5_aM10W5p00L0p50, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 5V gate 10.5V drain RF NMOS transistor with multiplier of 10 width of 7.0um and length of 0.5um type aM
logger.info("Extracting 5V gate 10.5V drain RF NMOS transistor with multiplier of 10 width of 7.0um and length of 0.5um type aM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_g5v0d10v5_aM10W7p00L0p50"), {"SD" => nsd, "G" => ngate_g5v0d10v5_aM10W7p00L0p50, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 5V gate 10.5V drain RF NMOS transistor with multiplier of 2 width of 3.0um and length of 0.5um type bM
logger.info("Extracting 5V gate 10.5V drain RF NMOS transistor with multiplier of 2 width of 3.0um and length of 0.5um type bM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_g5v0d10v5_bM02W3p00L0p50"), {"SD" => nsd, "G" => ngate_g5v0d10v5_bM02W3p00L0p50, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 5V gate 10.5V drain RF NMOS transistor with multiplier of 2 width of 5.0um and length of 0.5um type bM
logger.info("Extracting 5V gate 10.5V drain RF NMOS transistor with multiplier of 2 width of 5.0um and length of 0.5um type bM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_g5v0d10v5_bM02W5p00L0p50"), {"SD" => nsd, "G" => ngate_g5v0d10v5_bM02W5p00L0p50, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 5V gate 10.5V drain RF NMOS transistor with multiplier of 4 width of 3.0um and length of 0.5um type bM
logger.info("Extracting 5V gate 10.5V drain RF NMOS transistor with multiplier of 4 width of 3.0um and length of 0.5um type bM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_g5v0d10v5_bM04W3p00L0p50"), {"SD" => nsd, "G" => ngate_g5v0d10v5_bM04W3p00L0p50, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 5V gate 10.5V drain RF NMOS transistor with multiplier of 4 width of 5.0um and length of 0.5um type bM
logger.info("Extracting 5V gate 10.5V drain RF NMOS transistor with multiplier of 4 width of 5.0um and length of 0.5um type bM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_g5v0d10v5_bM04W5p00L0p50"), {"SD" => nsd, "G" => ngate_g5v0d10v5_bM04W5p00L0p50, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 5V gate 10.5V drain RF NMOS transistor with multiplier of 4 width of 7.0um and length of 0.5um type bM
logger.info("Extracting 5V gate 10.5V drain RF NMOS transistor with multiplier of 4 width of 7.0um and length of 0.5um type bM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_g5v0d10v5_bM04W7p00L0p50"), {"SD" => nsd, "G" => ngate_g5v0d10v5_bM04W7p00L0p50, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 5V gate 10.5V drain RF NMOS transistor with multiplier of 10 width of 3.0um and length of 0.5um type bM
logger.info("Extracting 5V gate 10.5V drain RF NMOS transistor with multiplier of 10 width of 3.0um and length of 0.5um type bM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_g5v0d10v5_bM10W3p00L0p50"), {"SD" => nsd, "G" => ngate_g5v0d10v5_bM10W3p00L0p50, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 5V gate 10.5V drain RF NMOS transistor with multiplier of 10 width of 5.0um and length of 0.5um type bM
logger.info("Extracting 5V gate 10.5V drain RF NMOS transistor with multiplier of 10 width of 5.0um and length of 0.5um type bM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_g5v0d10v5_bM10W5p00L0p50"), {"SD" => nsd, "G" => ngate_g5v0d10v5_bM10W5p00L0p50, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 5V gate 10.5V drain RF NMOS transistor with multiplier of 10 width of 7.0um and length of 0.5um type bM
logger.info("Extracting 5V gate 10.5V drain RF NMOS transistor with multiplier of 10 width of 7.0um and length of 0.5um type bM")
extract_devices(mos4("sky130_fd_pr__rf_nfet_g5v0d10v5_bM10W7p00L0p50"), {"SD" => nsd, "G" => ngate_g5v0d10v5_bM10W7p00L0p50, "tS" => nsd, "tD" => nsd, "tG" => poly_con, "W" => sub,  "tW" => ptap })

# 1.8V RF PMOS transistor with multiplier of 2 width of 0.84um and length of 0.15um type aF
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 2 width of 0.84um and length of 0.15um type aF")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_aF02W0p84L0p15"), {"SD" => psd, "G" => pgate_01v8_aF02W0p84L0p15, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => nwell_pin })

# 1.8V RF PMOS transistor with multiplier of 2 width of 1.68um and length of 0.15um type aF
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 2 width of 1.68um and length of 0.15um type aF")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_aF02W1p68L0p15"), {"SD" => psd, "G" => pgate_01v8_aF02W1p68L0p15, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => nwell_pin })

# 1.8V RF PMOS transistor with multiplier of 2 width of 2.0um and length of 0.15um type aF
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 2 width of 2.0um and length of 0.15um type aF")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_aF02W2p00L0p15"), {"SD" => psd, "G" => pgate_01v8_aF02W2p00L0p15, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => nwell_pin })

# 1.8V RF PMOS transistor with multiplier of 2 width of 3.0um and length of 0.15um type aF
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 2 width of 3.0um and length of 0.15um type aF")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_aF02W3p00L0p15"), {"SD" => psd, "G" => pgate_01v8_aF02W3p00L0p15, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => nwell_pin })

# 1.8V RF PMOS transistor with multiplier of 2 width of 5.0um and length of 0.15um type aF
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 2 width of 5.0um and length of 0.15um type aF")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_aF02W5p00L0p15"), {"SD" => psd, "G" => pgate_01v8_aF02W5p00L0p15, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => nwell_pin })

# 1.8V RF PMOS transistor with multiplier of 4 width of 0.84um and length of 0.15um type aF
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 4 width of 0.84um and length of 0.15um type aF")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_aF04W0p84L0p15"), {"SD" => psd, "G" => pgate_01v8_aF04W0p84L0p15, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => nwell_pin })

# 1.8V RF PMOS transistor with multiplier of 4 width of 1.68um and length of 0.15um type aF
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 4 width of 1.68um and length of 0.15um type aF")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_aF04W1p68L0p15"), {"SD" => psd, "G" => pgate_01v8_aF04W1p68L0p15, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => nwell_pin })

# 1.8V RF PMOS transistor with multiplier of 4 width of 2.0um and length of 0.15um type aF
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 4 width of 2.0um and length of 0.15um type aF")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_aF04W2p00L0p15"), {"SD" => psd, "G" => pgate_01v8_aF04W2p00L0p15, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => nwell_pin })

# 1.8V RF PMOS transistor with multiplier of 4 width of 3.0um and length of 0.15um type aF
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 4 width of 3.0um and length of 0.15um type aF")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_aF04W3p00L0p15"), {"SD" => psd, "G" => pgate_01v8_aF04W3p00L0p15, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => nwell_pin })

# 1.8V RF PMOS transistor with multiplier of 4 width of 5.0um and length of 0.15um type aF
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 4 width of 5.0um and length of 0.15um type aF")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_aF04W5p00L0p15"), {"SD" => psd, "G" => pgate_01v8_aF04W5p00L0p15, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => nwell_pin })

# 1.8V RF PMOS transistor with multiplier of 6 width of 0.84um and length of 0.15um type aF
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 6 width of 0.84um and length of 0.15um type aF")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_aF06W0p84L0p15"), {"SD" => psd, "G" => pgate_01v8_aF06W0p84L0p15, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => nwell_pin })

# 1.8V RF PMOS transistor with multiplier of 6 width of 1.68um and length of 0.15um type aF
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 6 width of 1.68um and length of 0.15um type aF")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_aF06W1p68L0p15"), {"SD" => psd, "G" => pgate_01v8_aF06W1p68L0p15, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => nwell_pin })

# 1.8V RF PMOS transistor with multiplier of 6 width of 2.0um and length of 0.15um type aF
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 6 width of 2.0um and length of 0.15um type aF")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_aF06W2p00L0p15"), {"SD" => psd, "G" => pgate_01v8_aF06W2p00L0p15, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => nwell_pin })

# 1.8V RF PMOS transistor with multiplier of 6 width of 3.0um and length of 0.15um type aF
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 6 width of 3.0um and length of 0.15um type aF")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_aF06W3p00L0p15"), {"SD" => psd, "G" => pgate_01v8_aF06W3p00L0p15, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => nwell_pin })

# 1.8V RF PMOS transistor with multiplier of 8 width of 0.84um and length of 0.15um type aF
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 8 width of 0.84um and length of 0.15um type aF")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_aF08W0p84L0p15"), {"SD" => psd, "G" => pgate_01v8_aF08W0p84L0p15, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => nwell_pin })

# 1.8V RF PMOS transistor with multiplier of 8 width of 1.68um and length of 0.15um type aF
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 8 width of 1.68um and length of 0.15um type aF")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_aF08W1p68L0p15"), {"SD" => psd, "G" => pgate_01v8_aF08W1p68L0p15, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => nwell_pin })

# 1.8V RF PMOS transistor with multiplier of 2 width of 1.65um and length of 0.15um type aM
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 2 width of 1.65um and length of 0.15um type aM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_aM02W1p65L0p15"), {"SD" => psd, "G" => pgate_01v8_aM02W1p65L0p15, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor with multiplier of 2 width of 1.65um and length of 0.18um type aM
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 2 width of 1.65um and length of 0.18um type aM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_aM02W1p65L0p18"), {"SD" => psd, "G" => pgate_01v8_aM02W1p65L0p18, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor with multiplier of 2 width of 1.65um and length of 0.25um type aM
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 2 width of 1.65um and length of 0.25um type aM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_aM02W1p65L0p25"), {"SD" => psd, "G" => pgate_01v8_aM02W1p65L0p25, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor with multiplier of 2 width of 3.0um and length of 0.15um type aM
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 2 width of 3.0um and length of 0.15um type aM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_aM02W3p00L0p15"), {"SD" => psd, "G" => pgate_01v8_aM02W3p00L0p15, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor with multiplier of 2 width of 3.0um and length of 0.18um type aM
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 2 width of 3.0um and length of 0.18um type aM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_aM02W3p00L0p18"), {"SD" => psd, "G" => pgate_01v8_aM02W3p00L0p18, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor with multiplier of 2 width of 3.0um and length of 0.25um type aM
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 2 width of 3.0um and length of 0.25um type aM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_aM02W3p00L0p25"), {"SD" => psd, "G" => pgate_01v8_aM02W3p00L0p25, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor with multiplier of 2 width of 5.0um and length of 0.15um type aM
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 2 width of 5.0um and length of 0.15um type aM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_aM02W5p00L0p15"), {"SD" => psd, "G" => pgate_01v8_aM02W5p00L0p15, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor with multiplier of 2 width of 5.0um and length of 0.18um type aM
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 2 width of 5.0um and length of 0.18um type aM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_aM02W5p00L0p18"), {"SD" => psd, "G" => pgate_01v8_aM02W5p00L0p18, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor with multiplier of 2 width of 5.0um and length of 0.25um type aM
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 2 width of 5.0um and length of 0.25um type aM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_aM02W5p00L0p25"), {"SD" => psd, "G" => pgate_01v8_aM02W5p00L0p25, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor with multiplier of 4 width of 1.65um and length of 0.15um type aM
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 4 width of 1.65um and length of 0.15um type aM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_aM04W1p65L0p15"), {"SD" => psd, "G" => pgate_01v8_aM04W1p65L0p15, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor with multiplier of 4 width of 1.65um and length of 0.18um type aM
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 4 width of 1.65um and length of 0.18um type aM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_aM04W1p65L0p18"), {"SD" => psd, "G" => pgate_01v8_aM04W1p65L0p18, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor with multiplier of 4 width of 1.65um and length of 0.25um type aM
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 4 width of 1.65um and length of 0.25um type aM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_aM04W1p65L0p25"), {"SD" => psd, "G" => pgate_01v8_aM04W1p65L0p25, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor with multiplier of 4 width of 3.0um and length of 0.15um type aM
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 4 width of 3.0um and length of 0.15um type aM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_aM04W3p00L0p15"), {"SD" => psd, "G" => pgate_01v8_aM04W3p00L0p15, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor with multiplier of 4 width of 3.0um and length of 0.18um type aM
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 4 width of 3.0um and length of 0.18um type aM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_aM04W3p00L0p18"), {"SD" => psd, "G" => pgate_01v8_aM04W3p00L0p18, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor with multiplier of 4 width of 3.0um and length of 0.25um type aM
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 4 width of 3.0um and length of 0.25um type aM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_aM04W3p00L0p25"), {"SD" => psd, "G" => pgate_01v8_aM04W3p00L0p25, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor with multiplier of 4 width of 5.0um and length of 0.15um type aM
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 4 width of 5.0um and length of 0.15um type aM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_aM04W5p00L0p15"), {"SD" => psd, "G" => pgate_01v8_aM04W5p00L0p15, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor with multiplier of 4 width of 5.0um and length of 0.18um type aM
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 4 width of 5.0um and length of 0.18um type aM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_aM04W5p00L0p18"), {"SD" => psd, "G" => pgate_01v8_aM04W5p00L0p18, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor with multiplier of 4 width of 5.0um and length of 0.25um type aM
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 4 width of 5.0um and length of 0.25um type aM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_aM04W5p00L0p25"), {"SD" => psd, "G" => pgate_01v8_aM04W5p00L0p25, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor with multiplier of 2 width of 1.65um and length of 0.15um type bM
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 2 width of 1.65um and length of 0.15um type bM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_bM02W1p65L0p15"), {"SD" => psd, "G" => pgate_01v8_bM02W1p65L0p15, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor with multiplier of 2 width of 1.65um and length of 0.18um type bM
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 2 width of 1.65um and length of 0.18um type bM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_bM02W1p65L0p18"), {"SD" => psd, "G" => pgate_01v8_bM02W1p65L0p18, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor with multiplier of 2 width of 1.65um and length of 0.25um type bM
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 2 width of 1.65um and length of 0.25um type bM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_bM02W1p65L0p25"), {"SD" => psd, "G" => pgate_01v8_bM02W1p65L0p25, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor with multiplier of 2 width of 3.0um and length of 0.15um type bM
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 2 width of 3.0um and length of 0.15um type bM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_bM02W3p00L0p15"), {"SD" => psd, "G" => pgate_01v8_bM02W3p00L0p15, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor with multiplier of 2 width of 3.0um and length of 0.18um type bM
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 2 width of 3.0um and length of 0.18um type bM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_bM02W3p00L0p18"), {"SD" => psd, "G" => pgate_01v8_bM02W3p00L0p18, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor with multiplier of 2 width of 3.0um and length of 0.25um type bM
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 2 width of 3.0um and length of 0.25um type bM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_bM02W3p00L0p25"), {"SD" => psd, "G" => pgate_01v8_bM02W3p00L0p25, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor with multiplier of 2 width of 5.0um and length of 0.15um type bM
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 2 width of 5.0um and length of 0.15um type bM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_bM02W5p00L0p15"), {"SD" => psd, "G" => pgate_01v8_bM02W5p00L0p15, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor with multiplier of 2 width of 5.0um and length of 0.18um type bM
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 2 width of 5.0um and length of 0.18um type bM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_bM02W5p00L0p18"), {"SD" => psd, "G" => pgate_01v8_bM02W5p00L0p18, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor with multiplier of 2 width of 5.0um and length of 0.25um type bM
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 2 width of 5.0um and length of 0.25um type bM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_bM02W5p00L0p25"), {"SD" => psd, "G" => pgate_01v8_bM02W5p00L0p25, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor with multiplier of 4 width of 1.65um and length of 0.15um type bM
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 4 width of 1.65um and length of 0.15um type bM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_bM04W1p65L0p15"), {"SD" => psd, "G" => pgate_01v8_bM04W1p65L0p15, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor with multiplier of 4 width of 1.65um and length of 0.18um type bM
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 4 width of 1.65um and length of 0.18um type bM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_bM04W1p65L0p18"), {"SD" => psd, "G" => pgate_01v8_bM04W1p65L0p18, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor with multiplier of 4 width of 1.65um and length of 0.25um type bM
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 4 width of 1.65um and length of 0.25um type bM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_bM04W1p65L0p25"), {"SD" => psd, "G" => pgate_01v8_bM04W1p65L0p25, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor with multiplier of 4 width of 3.0um and length of 0.15um type bM
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 4 width of 3.0um and length of 0.15um type bM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_bM04W3p00L0p15"), {"SD" => psd, "G" => pgate_01v8_bM04W3p00L0p15, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor with multiplier of 4 width of 3.0um and length of 0.18um type bM
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 4 width of 3.0um and length of 0.18um type bM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_bM04W3p00L0p18"), {"SD" => psd, "G" => pgate_01v8_bM04W3p00L0p18, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor with multiplier of 4 width of 3.0um and length of 0.25um type bM
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 4 width of 3.0um and length of 0.25um type bM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_bM04W3p00L0p25"), {"SD" => psd, "G" => pgate_01v8_bM04W3p00L0p25, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor with multiplier of 4 width of 5.0um and length of 0.15um type bM
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 4 width of 5.0um and length of 0.15um type bM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_bM04W5p00L0p15"), {"SD" => psd, "G" => pgate_01v8_bM04W5p00L0p15, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor with multiplier of 4 width of 5.0um and length of 0.18um type bM
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 4 width of 5.0um and length of 0.18um type bM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_bM04W5p00L0p18"), {"SD" => psd, "G" => pgate_01v8_bM04W5p00L0p18, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor with multiplier of 4 width of 5.0um and length of 0.25um type bM
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 4 width of 5.0um and length of 0.25um type bM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_bM04W5p00L0p25"), {"SD" => psd, "G" => pgate_01v8_bM04W5p00L0p25, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor with multiplier of 4 width of 3.0um and length of 0.15um type hcM
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 4 width of 3.0um and length of 0.15um type hcM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_hcM04W3p00L0p15"), {"SD" => psd, "G" => pgate_01v8_hcM04W3p00L0p15, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor with multiplier of 4 width of 5.0um and length of 0.15um type hcM
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 4 width of 5.0um and length of 0.15um type hcM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_hcM04W5p00L0p15"), {"SD" => psd, "G" => pgate_01v8_hcM04W5p00L0p15, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor low threshold voltage with multiplier of 2 width of 3.0um and length of 0.35um type aM
logger.info("Extracting 1.8V RF PMOS transistor low threshold voltage with multiplier of 2 width of 3.0um and length of 0.35um type aM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_lvt_aM02W3p00L0p35"), {"SD" => psd, "G" => pgate_01v8_lvt_aM02W3p00L0p35, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor low threshold voltage with multiplier of 2 width of 3.0um and length of 0.5um type aM
logger.info("Extracting 1.8V RF PMOS transistor low threshold voltage with multiplier of 2 width of 3.0um and length of 0.5um type aM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_lvt_aM02W3p00L0p50"), {"SD" => psd, "G" => pgate_01v8_lvt_aM02W3p00L0p50, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor low threshold voltage with multiplier of 2 width of 5.0um and length of 0.35um type aM
logger.info("Extracting 1.8V RF PMOS transistor low threshold voltage with multiplier of 2 width of 5.0um and length of 0.35um type aM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_lvt_aM02W5p00L0p35"), {"SD" => psd, "G" => pgate_01v8_lvt_aM02W5p00L0p35, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor low threshold voltage with multiplier of 2 width of 5.0um and length of 0.5um type aM
logger.info("Extracting 1.8V RF PMOS transistor low threshold voltage with multiplier of 2 width of 5.0um and length of 0.5um type aM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_lvt_aM02W5p00L0p50"), {"SD" => psd, "G" => pgate_01v8_lvt_aM02W5p00L0p50, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor low threshold voltage with multiplier of 4 width of 3.0um and length of 0.35um type aM
logger.info("Extracting 1.8V RF PMOS transistor low threshold voltage with multiplier of 4 width of 3.0um and length of 0.35um type aM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_lvt_aM04W3p00L0p35"), {"SD" => psd, "G" => pgate_01v8_lvt_aM04W3p00L0p35, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor low threshold voltage with multiplier of 4 width of 3.0um and length of 0.5um type aM
logger.info("Extracting 1.8V RF PMOS transistor low threshold voltage with multiplier of 4 width of 3.0um and length of 0.5um type aM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_lvt_aM04W3p00L0p50"), {"SD" => psd, "G" => pgate_01v8_lvt_aM04W3p00L0p50, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor low threshold voltage with multiplier of 4 width of 5.0um and length of 0.35um type aM
logger.info("Extracting 1.8V RF PMOS transistor low threshold voltage with multiplier of 4 width of 5.0um and length of 0.35um type aM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_lvt_aM04W5p00L0p35"), {"SD" => psd, "G" => pgate_01v8_lvt_aM04W5p00L0p35, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor low threshold voltage with multiplier of 4 width of 5.0um and length of 0.5um type aM
logger.info("Extracting 1.8V RF PMOS transistor low threshold voltage with multiplier of 4 width of 5.0um and length of 0.5um type aM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_lvt_aM04W5p00L0p50"), {"SD" => psd, "G" => pgate_01v8_lvt_aM04W5p00L0p50, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor with multiplier of 4 width of 3.0um and length of 0.15um type mcM
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 4 width of 3.0um and length of 0.15um type mcM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_mcM04W3p00L0p15"), {"SD" => psd, "G" => pgate_01v8_mcM04W3p00L0p15, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor with multiplier of 4 width of 5.0um and length of 0.15um type mcM
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 4 width of 5.0um and length of 0.15um type mcM")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_mcM04W5p00L0p15"), {"SD" => psd, "G" => pgate_01v8_mcM04W5p00L0p15, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => ntap })

# 1.8V RF PMOS transistor with multiplier of 2 width of 0.84um and length of 0.15um type aF
logger.info("Extracting 1.8V RF PMOS transistor with multiplier of 2 width of 0.84um and length of 0.15um type aF")
extract_devices(mos4("sky130_fd_pr__rf_pfet_01v8_mvt_aF02W0p84L0p15"), {"SD" => psd, "G" => pgate_01v8_aF02W0p84L0p15, "tS" => psd, "tD" => psd, "tG" => poly_con, "W" => nwell,  "tW" => nwell_pin })

# 5V gate 20V drain RF PMOS transistor with ptap
logger.info("Extracting 5V gate 20V drain RF PMOS transistor with ptap")
extract_devices(mos4("sky130_fd_pr__pfet_20v0"), { "SD" => psd_5p0v_uhv_withptap, "G" => pgate_5p0v_uhv_withptap, "tS" => ps_5p0v_uhv_withptap, "tD" => pd_5p0v_uhv_withptap, "tG" => poly_con, "W" => dnwell, "tW" => ntap })

# 5V gate 20V drain RF NMOS transistor AUP
logger.info("Extracting 5V gate 20V drain RF NMOS transistor AUP")
extract_devices(mos4("sky130_fd_pr__rf_nfet_20v0_aup"), { "SD" => nsd_5p0v_uhv_aup, "G" => ngate_5p0v_uhv_aup, "tS" => ns_5p0v_uhv_aup, "tD" => nd_5p0v_uhv_aup, "tG" => poly_con, "W" => sub, "tW" => ptap })

# 5V gate 20V drain RF NMOS transistor with ptap
logger.info("Extracting 5V gate 20V drain RF NMOS transistor with ptap")
extract_devices(mos4("sky130_fd_pr__rf_nfet_20v0_withptap"), { "SD" => nsd_5p0v_uhv_withptap, "G" => ngate_5p0v_uhv_withptap, "tS" => ns_5p0v_uhv_withptap, "tD" => nd_5p0v_uhv_withptap, "tG" => poly_con, "W" => sub, "tW" => ptap })

# 5V gate 20V drain RF NMOS transistor isolated without ptap
logger.info("Extracting 5V gate 20V drain RF NMOS transistor isolated without ptap")
extract_devices(mos4("sky130_fd_pr__rf_nfet_20v0_noptap_iso"), { "SD" => nsd_5p0v_uhv_iso_noptap, "G" => ngate_5p0v_uhv_iso_noptap, "tS" => ns_5p0v_uhv_iso_noptap, "tD" => nd_5p0v_uhv_iso_noptap, "tG" => poly_con, "W" => sub, "tW" => ptap })

# 5V gate 20V drain RF NMOS transistor isolated with ptap
logger.info("Extracting 5V gate 20V drain RF NMOS transistor isolated with ptap")
extract_devices(mos4("sky130_fd_pr__rf_nfet_20v0_withptap_iso"), { "SD" => nsd_5p0v_uhv_iso_withptap, "G" => ngate_5p0v_uhv_iso_withptap, "tS" => ns_5p0v_uhv_iso_withptap, "tD" => nd_5p0v_uhv_iso_withptap, "tG" => poly_con, "W" => sub, "tW" => ptap })

# 5V gate 20V drain RF NMOS transistor native voltage AUP
logger.info("Extracting 5V gate 20V drain RF NMOS transistor native voltage AUP")
extract_devices(mos4("sky130_fd_pr__rf_nfet_20v0_nvt_aup"), { "SD" => nsd_5p0v_uhv_nvt_aup, "G" => ngate_5p0v_uhv_nvt_aup, "tS" => ns_5p0v_uhv_nvt_aup, "tD" => nd_5p0v_uhv_nvt_aup, "tG" => poly_con, "W" => sub, "tW" => ptap })

# 5V gate 20V drain RF NMOS transistor native voltage with ptap
logger.info("Extracting 5V gate 20V drain RF NMOS transistor native voltage with ptap")
extract_devices(mos4("sky130_fd_pr__rf_nfet_20v0_nvt_withptap"), { "SD" => nsd_5p0v_uhv_nvt_withptap, "G" => ngate_5p0v_uhv_nvt_withptap, "tS" => ns_5p0v_uhv_nvt_withptap, "tD" => nd_5p0v_uhv_nvt_withptap, "tG" => poly_con, "W" => sub, "tW" => ptap })

# 5V gate 20V drain RF NMOS transistor native voltage isolated without ptap
logger.info("Extracting 5V gate 20V drain RF NMOS transistor native voltage isolated without ptap")
extract_devices(mos4("sky130_fd_pr__rf_nfet_20v0_nvt_noptap_iso"), { "SD" => nsd_5p0v_uhv_nvt_iso_noptap, "G" => ngate_5p0v_uhv_nvt_iso_noptap, "tS" => ns_5p0v_uhv_nvt_iso_noptap, "tD" => nd_5p0v_uhv_nvt_iso_noptap, "tG" => poly_con, "W" => sub, "tW" => ptap })

# 5V gate 20V drain RF NMOS transistor native voltage isolated with ptap
logger.info("Extracting 5V gate 20V drain RF NMOS transistor native voltage isolated with ptap")
extract_devices(mos4("sky130_fd_pr__rf_nfet_20v0_nvt_withptap_iso"), { "SD" => nsd_5p0v_uhv_nvt_iso_withptap, "G" => ngate_5p0v_uhv_nvt_iso_withptap, "tS" => ns_5p0v_uhv_nvt_iso_withptap, "tD" => nd_5p0v_uhv_nvt_iso_withptap, "tG" => poly_con, "W" => sub, "tW" => ptap })

# 5V gate 20V drain RF NMOS transistor zero threshold voltage
logger.info("Extracting 5V gate 20V drain RF NMOS transistor zero threshold voltage")
extract_devices(mos4("sky130_fd_pr__rf_nfet_20v0_zvt_withptap"), { "SD" => nsd_5p0v_uhv_zvt_rf, "G" => ngate_5p0v_uhv_zvt_rf, "tS" => ns_5p0v_uhv_zvt_rf, "tD" => nd_5p0v_uhv_zvt_rf, "tG" => poly_con, "W" => sub, "tW" => ptap })


#================================
#------ RF BJT EXTRACTION -------
#================================

logger.info("Starting RF BJT EXTRACTION")

# sky130_fd_pr__rf_npn_05v5_W1p00L4p00 BJT
ignore_parameter("sky130_fd_pr__rf_npn_05v5_W1p00L4p00","AE")
logger.info("Extracting sky130_fd_pr__rf_npn_05v5_W1p00L4p00 BJT")
extract_devices(bjt4("sky130_fd_pr__rf_npn_05v5_W1p00L4p00"), { "C" => npn_5v0_1x4_c.extents , "B" => npn_5v0_1x4_b.extents , "E" => npn_5v0_1x4_e,"S" => sub.extents,
                                  "tC" => npn_5v0_1x4_c , "tB" => npn_5v0_1x4_b, "tE" => npn_5v0_1x4_e, "tS" => sub })

# sky130_fd_pr__rf_npn_05v5_W1p00L8p00 BJT
ignore_parameter("sky130_fd_pr__rf_npn_05v5_W1p00L8p00","AE")
logger.info("Extracting sky130_fd_pr__rf_npn_05v5_W1p00L8p00 BJT")
extract_devices(bjt4("sky130_fd_pr__rf_npn_05v5_W1p00L8p00"), { "C" => npn_5v0_1x8_c.extents , "B" => npn_5v0_1x8_b.extents , "E" => npn_5v0_1x8_e,"S" => sub.extents,
                                "tC" => npn_5v0_1x8_c , "tB" => npn_5v0_1x8_b, "tE" => npn_5v0_1x8_e, "tS" => sub })

# sky130_fd_pr__rf_npn_05v5_W2p00L2p00 BJT
ignore_parameter("sky130_fd_pr__rf_npn_05v5_W2p00L2p00","AE")
logger.info("Extracting sky130_fd_pr__rf_npn_05v5_W2p00L2p00 BJT")
extract_devices(bjt4("sky130_fd_pr__rf_npn_05v5_W2p00L2p00"), { "C" => npn_5v0_2x2_c.extents , "B" => npn_5v0_2x2_b.extents , "E" => npn_5v0_2x2_e,"S" => sub.extents,
                                  "tC" => npn_5v0_2x2_c , "tB" => npn_5v0_2x2_b, "tE" => npn_5v0_2x2_e, "tS" => sub })

# sky130_fd_pr__rf_npn_05v5_W2p00L4p00 BJT
ignore_parameter("sky130_fd_pr__rf_npn_05v5_W2p00L4p00","AE")
logger.info("Extracting sky130_fd_pr__rf_npn_05v5_W2p00L4p00 BJT")
extract_devices(bjt4("sky130_fd_pr__rf_npn_05v5_W2p00L4p00"), { "C" => npn_5v0_2x4_c.extents , "B" => npn_5v0_2x4_b.extents , "E" => npn_5v0_2x4_e,"S" => sub.extents,
                                "tC" => npn_5v0_2x4_c , "tB" => npn_5v0_2x4_b, "tE" => npn_5v0_2x4_e, "tS" => sub })

# sky130_fd_pr__rf_npn_05v5_W2p00L8p00 BJT
ignore_parameter("sky130_fd_pr__rf_npn_05v5_W2p00L8p00","AE")
logger.info("Extracting sky130_fd_pr__rf_npn_05v5_W2p00L8p00 BJT")
extract_devices(bjt4("sky130_fd_pr__rf_npn_05v5_W2p00L8p00"), { "C" => npn_5v0_2x8_c.extents , "B" => npn_5v0_2x8_b.extents , "E" => npn_5v0_2x8_e,"S" => sub.extents,
                                  "tC" => npn_5v0_2x8_c , "tB" => npn_5v0_2x8_b, "tE" => npn_5v0_2x8_e, "tS" => sub })

# sky130_fd_pr__rf_npn_05v5_W5p00L5p00 BJT
ignore_parameter("sky130_fd_pr__rf_npn_05v5_W5p00L5p00","AE")
logger.info("Extracting sky130_fd_pr__rf_npn_05v5_W5p00L5p00 BJT")
extract_devices(bjt4("sky130_fd_pr__rf_npn_05v5_W5p00L5p00"), { "C" => npn_5v0_5x5_c.extents , "B" => npn_5v0_5x5_b.extents , "E" => npn_5v0_5x5_e,"S" => sub.extents,
                                "tC" => npn_5v0_5x5_c , "tB" => npn_5v0_5x5_b, "tE" => npn_5v0_5x5_e, "tS" => sub })


#================================================
#------------- COMPARISON OPTIONS ---------------
#================================================

logger.info("Starting SKY130 LVS comparison section")

#=== FLATTEN CELLS ===
align

#=== NETLIST EXTRACTION ===
if SIMPLIFY
  netlist.simplify
end

#=== NETLIST OPTIONS ===
if NET_ONLY
  netlist
end

if TOP_LVL_PINS
  netlist.make_top_level_pins
end

if COMBINE
  netlist.combine_devices
end

if PURGE
  netlist.purge
end

if PURGE_NETS
  netlist.purge_nets
end

#=== SCHEMATIC OPTIONS ===
if SCH_SIMPLE
  schematic.simplify
end

#=== IGNORE EXTREME VALUES ===
max_res(1e7)
min_caps(1e-16)


compare

exec_end_time = Time.now
run_time = exec_end_time - exec_start_time
logger.info("DRC Total Run time %f seconds" % [run_time])




if ! compare
  logger.info("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")
  logger.error("ERROR : Netlists don't match")
  logger.info("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")
  raise "ERROR : Netlists don't match"
else
  logger.info("==========================================")
  logger.info("INFO : Congratulations! Netlists match.")
  logger.info("==========================================")
end



